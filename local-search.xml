<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JVM运行时数据区</title>
    <link href="/2023/03/10/Java/JVM/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"/>
    <url>/2023/03/10/Java/JVM/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h1><p><img src="https://s2.loli.net/2023/03/10/TAmMSqxBb9sZ68o.jpg" alt="运行时数据区"></p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>每个线程在创建的过程中都会创建一个虚拟机栈，其内部保存着一个一个的栈帧（Stack Frame），每个栈帧对应着一个方法，线程私有的，生命周期与线程一致。</p><p>栈是一种快速有效的分配存储地址，访问速度仅次于程序计数器。只有入栈和出栈操作。</p><p>主管程序运行，它保存方法的局部变量（8种基本数据类型和对象的引用地址）和部分结果，并参与方法的调用与返回。</p><ul><li>局部变量 VS 成员变量（属性）</li><li>基本类型变量 VS 引用类型变量（类&#x2F;数组&#x2F;接口）</li></ul><p>栈不存在GC，存在StackOverFlow，当系统内存满了会出现OOM。</p><p>-Xss 设置栈的大小</p><p>Java方法有两种返回函数的形式，一种是正常的函数返回，使用return指令；另外一种是抛出异常，不管哪种方式都会导致栈帧被弹出。</p><h4 id="LV-Local-Variables-局部变量表"><a href="#LV-Local-Variables-局部变量表" class="headerlink" title="LV Local Variables 局部变量表"></a>LV Local Variables 局部变量表</h4><ul><li><p>​主要存储方法参数和定义在方法体内的局部变量，这些数据类型包括8种基本数据类型，对象引用（reference），以及returnAddress类型</p></li><li><p>局部变量表存储结构是一个存储数字的数组，所以大小在编译期就确定下来了</p></li><li><p>局部变量表中的变量只在当前方法调用中有效。当方法调用结束后，随着方法栈帧的销毁而销毁。</p></li><li><p>存储在栈上，不存在线程安全的问题</p></li><li><p>Slot（槽）是局部变量表最基本的存储单元，32位占一个槽（int byte 引用类型等），64位占两个槽（long double）</p></li><li><p>非静态方法的局部变量表的第0位存储的是this</p></li></ul><h4 id="OS-Operand-Stack-操作数栈"><a href="#OS-Operand-Stack-操作数栈" class="headerlink" title="OS Operand Stack 操作数栈"></a>OS Operand Stack 操作数栈</h4><p>操作数栈指的是在方法执行过程中，根据字节码指令向栈中写入数据或提取数据，即入栈Push&#x2F;出栈Pop</p><ol><li><strong>主要存放计算过程中的中间结果，作为计算过程中的临时存储空间</strong>。比如push操作就是将数据压入到操作数栈，然后通过store操作将操作数栈中的数据存储到局部变量表中，load操作就是把局部变量表的值加载到操作数栈中用于计算</li><li>使用数组结构实现，但是只能通过入栈出栈的方式来访问数据，不能直接通过索引访问数据</li><li>操作数栈栈的深度在编译期就确定好了</li><li>如果被调用的方法存在返回值，其返回值也会压入到当前栈帧的操作数栈中，并更新PC寄存器下一条需要执行的字节码指令偏移量。</li><li>JVM的解释引擎是基于栈的执行引擎，其中的栈指的是操作数栈。</li></ol><h4 id="DL-Dynamic-Linking-动态链接"><a href="#DL-Dynamic-Linking-动态链接" class="headerlink" title="DL Dynamic Linking 动态链接"></a>DL Dynamic Linking 动态链接</h4><p>指向运行时常量池的方法引用</p><h4 id="RA-Return-Address-方法返回地址"><a href="#RA-Return-Address-方法返回地址" class="headerlink" title="RA Return Address 方法返回地址"></a>RA Return Address 方法返回地址</h4><p>当某方法执行结束后会出栈，出栈的同时将PC存放寄存器的值存放到方法返回地址中</p><h4 id="一些附加信息"><a href="#一些附加信息" class="headerlink" title="一些附加信息"></a>一些附加信息</h4><p>栈空间不存在GC，当栈空间是固定值时，栈内存用完后会出现内存溢出，会报异常StackOverFlow；当栈的空间是可扩展的情况，所有内存被用光后会出现OutofMemery；</p><h3 id="程序计数器-x2F-PC寄存器（Program-Counter-Register）"><a href="#程序计数器-x2F-PC寄存器（Program-Counter-Register）" class="headerlink" title="程序计数器&#x2F;PC寄存器（Program Counter Register）"></a>程序计数器&#x2F;PC寄存器（Program Counter Register）</h3><p><strong>PC寄存器用来存储指向下一条指令的地址</strong>，即即将要执行的指令代码。由执行引擎读取下一条指令。</p><p>如果是在执行native方法，则是未指定值(undefined)。</p><p>PC寄存器没有GC和OOM。</p><p>为什么要有PC寄存器？</p><p>因为CPU在不停的切换线程，每次切换线程需要知道即将执行哪一条指令，PC寄存器的作用就是记录将要执行指令的地址。需要准确的记录每一个线程将要执行的下一条指令的地址。</p><p>PC寄存器为什么要线程私有？</p><p>如果多个线程公用同一个PC寄存器的话，会导致程序执行指令错乱。比如线程1当前执行到第5条指令，线程2执行到第7条指令，此时PC寄存器存储的指令偏移量是7，线程3执行完第n条指令切换到线程1，此时它执行的并不是第5条指令。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>一个JVM实例对应一个堆内存，一旦JVM启动，Java堆区就会被创建，同时其空间大小也就确定了。</p><p>堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p><p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）</p><p><strong>几乎所有的对象实例和数组都分配在堆内存。</strong></p><p>堆的划分：</p><p>JDK7以及之前版本：新生区（Young）+养老区（Old）+永久代（Perm）</p><p>JDK8以及之后版本：新生区+养老区+元空间（MetaSpace）</p><p>配置新生代与老年代占比：</p><p>默认-XX:NewRatio&#x3D;2，表示新生代占1，老年代占2，新生代占整个堆的1&#x2F;3，默认情况下新生代与老年代比例是1:2；</p><p>默认情况下Eden区与Survivor区的占比是8:1:1，但是jvm存在自适应机制，默认情况有可能不是8:1:1，只有显示指定占比才能确保Eden区与Survivor区的占比是8:1:1（参数设置为：-XX:SurvivorRatio&#x3D;8）</p><p>几乎所有的Java对象都是在Eden区被new出来的，如果经过垃圾回收后，新生代的空间还是无法存储大对象就会直接存到老年代。</p><p>绝大部分的Java对象的销毁都在新生代进行了。</p><p>-XX:-UseAdaptiveSizePolicy:关闭自适应的内存分配策略</p><p>堆空间大小设置：</p><p>-X是JVM的运行参数</p><p>-Xms 堆空间初始大小，默认值是物理内存的1&#x2F;64</p><p>-Xmx 堆空间最大内存，默认值是物理内存的1&#x2F;4，超出后报OOM</p><p>建议将-Xms与-Xmx设置为一样值，避免jvm频繁扩容和堆空间释放，造成不必要的性能开销</p><p>JVM在进行GC时，并非每次都对三个内存区域（新生代&#x2F;老年代；方法区）一起回收，<strong>大部分时候回收的都是新生代。</strong></p><p>GC按照回收区域分为两类：一种是部分收集（Partial GC），一种是整堆收集（Full GC）</p><ul><li>部分收集：</li><li><ul><li>新生代收集（Young GC&#x2F;Minor GC）：只是新生代的垃圾收集</li><li>老年代收集（Major GC&#x2F;Old GC）：只是老年代的垃圾收集</li><li><ul><li><strong>目前，只有CMS GC会单独收集老年代的行为</strong>。</li><li>注意：很多时候Major GC会和Full GC混合使用，需要具体分辨是老年代还是整堆回收</li></ul></li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代</li><li><ul><li>目前，只有G1 GC会有这种行为，因为G1里面是以Region划分堆空间，新生代和老年代是混合在一起的</li></ul></li></ul></li><li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾</li></ul><p><strong>何时触发Young GC&#x2F;Minor GC？</strong></p><ul><li><strong>当Eden区满了触发Young GC</strong>，将Eden区与Survivor区的无效对象回收，Survivor区满了<strong>并不会触发</strong>Young GC，Survivor区的回收是被动的</li><li>Minor GC会引发STW（Stop the World），暂停其他用户的线程，等待垃圾回收接受，用户线程才会恢复运行</li></ul><p>​     </p><p><strong>何时触发Major GC？</strong></p><ul><li>出现Major GC，经常会伴随至少一次的Minor GC（但非绝对，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）</li><li><ul><li><strong>也就是老年代空间不足时，会先尝试触发Minor GC。如果之后空间还不足就会触发Major GC。</strong></li><li>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长</li><li>如果Major GC后，内存还不足，就报OOM了。</li></ul></li></ul><p><strong>何时触发Full GC？</strong></p><ol><li>调用System.gc()时，系统建议执行Full GC，但时不必然执行</li><li><strong>老年代空间不足，Major GC与Full GC混合使用</strong></li><li><strong>方法区空间不足</strong></li><li>通过Minor GC后进入老年代的<strong>平均大小</strong>大于老年代的可用内存</li><li>由Eden区&#x2F;S0区向s1区复制时，对象大小大于s1的可用内存，则把对象转存到老年代，且老年代的可用内存小于该对象大小</li></ol><p>此时会将无用的对象销毁，同时将幸存的对象放到Survivor区（空的区），此时，Eden区是空的了，于此同时，将非空的Survivor区的垃圾对象回收，将存活的对象的引用计数器加1并将对象移动到另一个Survivor区，此时之前非空的Survivor区被清空，谁空谁是To区。</p><p>对象何时晋升到老年代？</p><ul><li>当Survivor区的对象引用次数达到设置的阈值时会将达到阈值的对象晋升到老年区，阈值设置的参数为-XX:MaxTenuringThreshold&#x3D;<N>默认值是15</li><li>经过多次Young GC后，如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间（S1或者S0）的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄</li><li>当survivor区无法存放从新生代过来的对象时，也就是<strong>survivor区满了时，直接将这个对象放到老年代</strong></li><li><strong>新生代无法存储的大对象</strong></li></ul><p>内存分配策略：</p><ul><li>正常情况</li><li><ul><li>如果对象在Eden出生并经历过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并将对象年龄设为1.对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认15岁，其实每个JVM&#x2F;每个GC都有所不同）时，就会被晋升到老年代中。</li><li>对晋升老年代的年龄阈值，可以通过选项-XX:MaxTenuringThreshold来设置</li></ul></li><li>针对不同年龄段的对象分配原则</li><li><ul><li>优先分配到Eden区</li><li>大对象直接分配到老年代</li><li><ul><li>尽量避免出现过多的大对象</li></ul></li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断</li><li><ul><li>如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间（S1或者S0）的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</li></ul></li><li><strong>空间分配担保</strong></li><li><ul><li>HandlePromotionFailure在JDK7之后已经失效，可以认为这个值就是true</li><li><em><strong>*在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的空间*</strong></em></li><li><ul><li>如果大于，则此次Minor GC是安全的</li><li>如果小于，则虚拟机会查看-XX:HandlePromotionFailure设置值是否允许担保失败</li><li><ul><li>如果-XX:HandlePromotionFailure&#x3D;true，那么会****继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小****。</li><li><ul><li><strong>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的</strong></li><li><strong>如果小于，则改为进行一次Full GC</strong></li></ul></li></ul></li></ul></li><li>-XX:HandlePromotionFailure</li></ul></li></ul></li></ul><p><strong>（Thread Local Allocation Buffer，TLAB）</strong></p><ul><li>JVM在Eden区为每个线程分配了一个私有缓存区域，能保证线程安全</li><li>通过-XX:UseTLAB开启TLAB空间</li><li>TLAB仅占Eden区的1%，也可以通过-XX:TLABWasteTargetPercent调整TLAB的大小</li><li>一旦对象在TLAB空间分配内存失败时，JVM就会尝试通过加锁的机制确保操作的原子性，从而直接在Eden空间分配内存</li></ul><p><strong>对象何时被放到元空间&#x2F;永久代？</strong> </p><p>垃圾回收算法：</p><p>复制算法：解决碎片化的问题</p><p><strong>堆是分配对象的唯一选择吗？</strong></p><p>如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可以被优化到栈上分配。</p><p><strong>逃逸分析</strong></p><p>JDK7以后默认开启了逃逸分析。</p><p><strong>逃逸分析的基本行为就是分析对象动态作用域：</strong></p><ul><li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li><li>当一个对象在方法中被定义后，它被外部方法引用，则认为发生逃逸。例如作为调用参数传递到其他方法。</li></ul><p>使用逃逸分析，编译器可以堆代码做如下优化：</p><ul><li><strong>栈上分配</strong>，栈上分配无需进行GC</li><li>同步省略，通过逃逸分析来判断同步块所使用的锁对象是否<strong>只能够被一个线程访问</strong>而没有发布到其他线程。如果没有，JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫<strong>锁消除</strong>。</li><li>****分离对象或标量替换*<em><strong>，开启标量替换参数-XX:+EliminateAllocations，默认开启，</strong></em>*允许将对象打散分配到栈上*<em><strong>。标量（Scalar）是指一个无法再分解成更小的数据的数据，例如Java中的基本数据类型的数据。与之相对的是聚合量（Aggregate），Java中的对象就是聚合量。在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，即未发生逃逸，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是</strong>标量替换</em>*。</li></ul><p><strong>开发中能使用局部变量的，就不要使用在方法外定义。</strong></p><p><img src="https://s2.loli.net/2023/03/10/42yjvVlcrNJd6z9.jpg" alt="逃逸分析"></p><p><strong>为什么需要把Java堆分代？</strong></p><p>分代的唯一理由就是<strong>优化GC性能</strong>。有了分代会很明确的回收指定区域的无效对象，而不是遍历所有对象。</p><p>关于垃圾回收：<strong>频繁在新生代收集，很少在老年代收集，几乎不在永久代&#x2F;元空间收集</strong>。80%的对象都在新生代被收集了。</p><p><img src="https://s2.loli.net/2023/03/10/eAR2K3FclLJmQws.jpg" alt="GC过程"></p><p>JVM参数设置</p><p><img src="https://s2.loli.net/2023/03/10/gSfuedhijEkLyIH.jpg" alt="JVM参数"></p><h3 id="方法区（JDK8元空间-x2F-JDK7永久代）"><a href="#方法区（JDK8元空间-x2F-JDK7永久代）" class="headerlink" title="方法区（JDK8元空间&#x2F;JDK7永久代）"></a>方法区（JDK8元空间&#x2F;JDK7永久代）</h3><ul><li><p>方法区（非堆），尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会去选择进行垃圾回收或者进行压缩。方法区看作是一块独立于Java堆的内存空间。</p></li><li><p><strong>线程共享</strong></p></li><li><p>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多类，导致方法区溢出，虚拟机同样会报OOM异常</p><ul><li><strong>加载大量的第三方jar包；</strong></li><li><strong>Tomcat部署的工程过多；</strong></li><li><strong>大量动态的生成反射类</strong></li></ul></li><li><p>元空间使用的是本地内存（不容易出现OOM），永久代使用的jvm的内存</p></li><li><p><strong>方法区存储的数据可以理解为字节码文件中信息，即几乎字节码中的信息都会被加载到方法区</strong>。</p></li></ul><p><strong>方法区垃圾回收（JVM规范不强制要求具体的JVM虚拟机去回收方法区）：常量池中废弃的常量和不再使用的类型</strong></p><ul><li><strong>只要常量池中的常量没有任何地方引用，就可以被回收</strong></li><li><strong>回收不再使用的类型，必须满足下面所有条件，条件非常苛刻</strong><ul><li>该类以及任何派生的子类的所有实例已经被回收</li><li>加载该类的类加载器已经被回收</li><li>该类对应的Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul></li></ul><h4 id="方法区设置大小"><a href="#方法区设置大小" class="headerlink" title="方法区设置大小"></a>方法区设置大小</h4><ul><li><p>方法区的大小不必是固定的，jvm可以根据应用的需要动态调整。</p></li><li><p>Jdk7及以前：</p><ul><li>通过-XX:PermSize来设置永久代初始分配空间。默认值是20.75M</li><li>-XX:MaxPermSize来设置永久代的最大可分配空间。32位是64M，64位默认是82M</li><li>当JVM加载的类信息容量超过了这个值，会报OOM：PermGen space</li></ul></li><li><p>jdk8及以后</p><ul><li>默认值依赖平台。windows下，-XX:MetaspaceSize是21M，-XX:MaxMetaspaceSize的值是-1，即没有限制。</li><li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出OOM</li><li>-XX:MetaspaceSize设置元空间初始值，一旦触及就会触发Full GC，并卸载没用的类（即这些类对应的类加载器不再存活），阈值会被重置。新的阈值大小取决于释放了多少空间，如果释放的多，就降低阈值，反之则提高阈值。为了减少GC的次数，建议将-XX:MetaspaceSize初始值设置的大一点</li></ul></li></ul><h4 id="方法区内部结构"><a href="#方法区内部结构" class="headerlink" title="方法区内部结构"></a>方法区内部结构</h4><ul><li><p><strong>存储类型信息</strong>（类&#x2F;接口&#x2F;枚举&#x2F;注解。。。）&#x2F;常量&#x2F;静态变量&#x2F;即时编译器编译后的代码缓存。</p><ul><li><p>类型信息</p><ul><li>类型的完整名称（全名&#x3D;包名.类名）</li><li>类型直接父类的完整名称（对于interface或者Object，都没有父类）</li><li>类型的修饰符（public abstract final）</li><li>类型的直接接口的一个有序列表</li></ul></li><li><p>域（Filed）信息</p><ul><li>JVM必须在方法区中保存类型的所有域信息以及域的声明顺序</li><li>包括域名称 域类型 域修饰符（public private protected static final volatile transient的某个子集）</li></ul></li><li><p>方法（Method）信息</p><ul><li>JVM必须保存所有方法的以下信息</li><li>方法名称</li><li>方法的返回类型（或void）</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（public private protected static final synchronized native abstract的一个子集）</li><li>方法的字节码（bytecodes）&#x2F;操作数栈&#x2F;局部变量表及大小（abstract和native方法除外）</li><li>异常表（abstract和native方法除外）</li><li>每个异常处理的开始位置 结束位置 代码处理在程序计数器中的偏移地址 被捕获的异常类的常量池索引</li></ul></li></ul></li><li><p><strong>方法区还记录了类是由哪个类加载器加载的</strong></p></li><li><p>non-final的类变量</p><ul><li>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</li><li>类变量被类的所有实例共享，即使没有类的实例也可以访问它。在准备阶段进行初始化零值，在初始化阶段进行显示赋值。</li></ul></li><li><p>全局常量（final static修饰的），每个全局常量在编译期就分配了，即在编译期就已经初始化并赋值了。</p></li><li><p><strong>运行时常量池</strong></p><ul><li><p>包含数量值 字符串值 类引用 字段引用 方法引用</p></li><li><p>一个有效的字节码文件中除了包含类的版本信息，字段，方法以及接口等描述信息外，还包含一项信息就是常量池表，包括各种字面量和对类型，域和方法的符号引用。运行时常量池，可以看作一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型，字面量（及具体的字符串或者数值都叫做字面量）等类型。</p></li><li><p>为什么需要常量池？</p><ul><li>一个Java源文件中的类，接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存储到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到。</li></ul></li><li><p>运行时常量池是方法区的一部分；<strong>常量池</strong>是字节码文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p></li><li><p>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</p></li><li><p>JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组一样，通过索引来访问。</p></li><li><p>运行时常量池，相对于Class文件中的常量池的另一个重要特征是：具备动态性。比如，String.intern()</p></li></ul></li></ul><p><img src="https://s2.loli.net/2023/03/10/8Pq6iXwnWakVLQC.jpg" alt="方法栈调用"></p><h4 id="方法区的演进过程"><a href="#方法区的演进过程" class="headerlink" title="方法区的演进过程"></a>方法区的演进过程</h4><p><img src="https://s2.loli.net/2023/03/10/cAQltbjEhuopkJy.jpg" alt="方法区演进JDK6"></p><p><img src="https://s2.loli.net/2023/03/10/cFni4VuNokewU59.jpg" alt="方法区演进2"></p><p><img src="https://s2.loli.net/2023/03/10/grdUQo4pqO5J3w9.jpg" alt="方法区演进8"></p><p><strong>永久代为什么要被元空间替代？</strong></p><ul><li><strong>因为永久代设置空间大小很难确定，如果动态加载了太多的类容易出现OOM，****对永久代调优很困难</strong>，而元空间不在虚拟机中，使用的是本地内存</li></ul><p>StringTable（字符串常量池）为什么要调整位置？</p><ul><li>永久代空间比较小</li><li>Jdk7中将StringTable放到堆空间，因为永久代的回收频率与回收效率很低，只有在老年代和永久代空间不足时才触发Full GC，而开发中会有大量的字符串被创建，回收效率低，放到堆中能及时回收内存。</li></ul><p>静态变量从永久代移动到了堆空间；</p><p>成员变量随着类实例化被存储到堆空间中。</p><p>局部变量存放在局部变量表中。</p><p><strong>本地方法栈</strong></p><p>Java虚拟机栈主要管理Java方法的调用，本地方法栈主要用于管理本地方法的调用。</p><p>本地方法栈也是线程私有的。</p><p>当某个线程调用一个本地方法，它就不受Java虚拟机栈的限制，它和Java虚拟机具有同样的权限。</p><p>在Hotspot JVM中，直接将Java虚拟机栈与本地方法栈合二为一。</p><p><strong>Jvm系统线程</strong></p><ol><li>虚拟机线程</li><li>周期任务线程</li><li>GC线程</li><li>编译线程</li><li>信号调度线程</li></ol><p><img src="https://s2.loli.net/2023/03/10/bRZ6ahW2Hkcyx43.jpg" alt="堆栈方法区交互"></p><p><strong>如何解决OOM？</strong></p><ol><li>要解决OOM异常或者heap space异常，一般要通过工具<strong>对dump出来的堆快照进行分析，先分析清楚到底是出现了内存泄露（Memory Leak）还是内存溢出（Memory Overflow）</strong>。</li><li><strong>如果是内存泄露，通过工具找到对象到GC Roots的引用链，从而准确定位出相关代码</strong></li><li>如果不存在内存泄露，就去检查虚拟机堆参数（-Xmx于-Xms），与机器物理内存对比看是否可以调大，从代码上检查<strong>是否存在某些对象生命周期过长</strong>，持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ol><p><strong>对象实例内存布局</strong></p><p><strong>对象实例化的方式</strong></p><ol><li>New或者调用静态方法或者xxxBuilder&#x2F;Factor，本质还是new调用构造器</li><li>Class的newInstance()，反射方式，已过时，只能调用空参构造器，权限必须是public</li><li>Constructor的new，反射的方式，可以跳用空参或者带参的构造器，权限没有要求</li><li>Object的clone方法，需要实现cloneable接口</li><li>使用序列化，获取二进制流</li><li>使用第三方库Objenesis</li></ol><p><strong>对象创建的步骤</strong></p><ol><li>加载类元信息</li><li>对象分配内存</li><li><ul><li>对象占用内存的空间时确定的，除了long和   double占8个字节，基础数据类型和引用类型都占4个字节。</li><li>内存规整时，使用指针碰撞方式分配内存（即挨着往堆内存里面放对象实例，同时将指针移动到已用内存与空闲内存中间的位置），比如Serial和ParNew的垃圾收集器时标记整理算法，使用指针碰撞方式。</li><li>内存不规整时，即内存碎片化，虚拟机需要维护一个空闲列表，将对象分配到一个足够大的内存空间，并更新空闲列表。比如CMS垃圾收集器使用的就是标记清除算法。</li></ul></li><li>处理并发安全问题</li><li><ul><li>采用CAS失败重试，区域加锁保证更新的原子性</li><li>每个线程先分配一块TLAB空间</li></ul></li><li>初始化分配到的空间，默认初始化</li><li><ul><li>赋默认初始化值，保证对象实例字段在不赋值的情况下可以直接使用</li></ul></li><li>设置对象的对象头</li><li>执行init方法进行初始化，调用类的构造器，显示初始化</li></ol><p><strong>对象的内存布局</strong></p><ol><li><strong>对象头（Header），如果是数组，还需要记录数组的长度</strong></li><li><ol><li><strong>运行时元数据（Mark Word）</strong></li><li><ul><li>哈希值（HashCode）</li><li>GC分代年龄</li><li>锁状态标志</li><li>线程持有的锁</li><li>偏向线程ID</li><li>偏向时间戳</li></ul></li><li><strong>类型指针，指向类元数据InstanceKlass，确定该对象所属的类型</strong></li></ol></li><li><strong>实例数据（Instance Data）</strong></li></ol><ul><li>它是对象真正存储的有效信息，包括程序中定义的各种字段（包括父类）</li><li>规则</li><li><ul><li>相同宽度的对象总是被分配在一起</li><li>父类中定义的变量总是出现在子类前</li><li>如果CompactFileds参数是true（默认是true），子类的窄变量会插到父类的变量的空隙，节省空间</li></ul></li></ul><ol><li>对齐填充（Padding），仅仅起到占位符的作用</li></ol><p><strong>对象访问定位</strong></p><ul><li><strong>通过局部变量表中的对象引用访问到堆区的对象实例。</strong></li><li><strong>对象访问方式</strong></li><li><ol><li><strong>句柄访问</strong>，<strong>句柄池需要单独开辟空间</strong>，当对象实例发生移动时，栈上的引用地址无需修改，只需要修改句柄值的指针即可</li><li><strong>直接指针</strong>（HotSpot使用此方式），节省空间，访问快</li></ol></li></ul><p><strong>直接内存</strong></p><ul><li>直接内存不是虚拟机的一部分</li><li>直接内存是在Java堆外的，直接向系统内存申请的内存空间</li><li>通过在堆中的DirectByteBuffer操作Native内存</li><li>访问直接内存的性能要高于访问堆内存</li><li><ul><li><strong>读写频繁的场景需要考虑使用直接内存</strong></li><li><strong>Java NIO库允许Java程序使用直接内存，用于数据缓冲区</strong></li></ul></li><li>直接内存也会出现OOM，OutOfMemory：Direct Buffer Memory</li><li><ul><li>原因：由于直接内存在堆外，它的大小不会直接受限于-Xmx指定的大小，但系统内存有限，Java堆和直接内存的总和依然受限于操作系统的最大内存。</li></ul></li><li>设置直接内存大小：-MaxDirectMemorySize，如果不指定，默认与堆的最大值一致</li></ul><p><img src="https://s2.loli.net/2023/03/10/B34nsm2klx9cwQ6.jpg" alt="句柄池"></p><p><img src="https://s2.loli.net/2023/03/10/IaMVSglHTr1eEBb.jpg" alt="Screen Shot 2021-01-20 at 5.51.58 PM"></p><p><img src="https://s2.loli.net/2023/03/10/zdGTErSUpYjsalV.jpg" alt="Screen Shot 2021-01-20 at 8.50.29 PM"></p><p><strong>面试题</strong></p><p>百度</p><p>三面：说一下JVM内存模型吧，有哪些区？分别干什么的？</p><p>蚂蚁金服：</p><p>Java8的内存分代改进</p><p>JVM内存分哪几个区，每个区的作用时什么？</p><p>一面：JVM内存分布&#x2F;内存结构？堆和栈的区别？堆的结构？为什么两个survivor区？</p><p>二面：Eden和Survivor的比例分配</p><p>二面：Java对象头里有什么</p><p>小米：</p><p>JVM内存分区，为什么要有新生代和老年代</p><p>字节跳动：</p><p>二面：Java内存分区</p><p>二面：讲讲JVM运行时数据区</p><p>什么时候对象会进入老年代？</p><p>京东：</p><p>JVM内存结构，Eden和survivor比例</p><p>JVM内存为什么要分成新生代，老年代，持久代，新生代中为什么要分为Eden和Survivor。</p><p>天猫：</p><p>一面：JVM内存模型以及分区，需要详细到每个区放什么。</p><p>一面：JVM的内存模型，Java8做了什么修改</p><p>拼多多：</p><p>JVM内存分哪几个区，每个区的作用时什么</p><p>美团：</p><p>Java内存分配</p><p>JVM的永久代会发生垃圾回收吗？</p><p>一面：JVM内存分区，为什么要有新生代和老年代？</p><p>对象在JVM中时怎么存储的？</p><p>对象头信息里面有哪些东西？</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM-垃圾回收GC</title>
    <link href="/2023/03/10/Java/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/2023/03/10/Java/JVM/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM-垃圾回收GC"><a href="#JVM-垃圾回收GC" class="headerlink" title="JVM-垃圾回收GC"></a>JVM-垃圾回收GC</h1><p><strong>什么是垃圾？</strong></p><p>垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾。</p><p><strong>为什么需要GC？</strong></p><ul><li>如果没有GC，内存迟早会被消耗完</li><li>除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，以便jvm将整理出的内存分配给新的对象。</li><li>随着程序业务越来越庞大，复杂，没有GC就不能保证应用程序的正常运行</li></ul><p>早期的垃圾回收：手动申请和释放内存，指的是C语言等。</p><p><strong>Java垃圾回收机制？</strong></p><p>自动内存管理，无需开发人员手动参与内存的分配和回收，降低内存泄露</p><p>垃圾回收器可以对年轻代回收，也可以对老年代回收，甚至是全堆和方法区回收。</p><p>其中，Java堆事垃圾回收的工作重点。</p><p>从次数上讲：</p><ul><li>频繁收集Young区</li><li>较少收集Old区</li><li>基本不动方法区</li></ul><p>在堆里存放几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为已经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们称为垃圾标记阶段。</p><ol><li>标记阶段：</li><li><ol><li>引用计数算法（Reference Counting）</li><li><ul><li>概念：为每一个对象保存一个引用计数器属性，当有对象引用它就+1，当引用失效就-1，当属性为0时，说明此对象可以被回收。</li><li>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</li><li>缺点：需要单独的字段存储计数器，增加了内存的开销；每次赋值都需要更新计数器，增加了时间的开销；引用计数器有一个严重的问题，即<strong>无法处理循环引用</strong>的情况。所以Java的垃圾回收器中没有使用这类算法。</li></ul></li><li>可达性分析算法</li><li><ul><li>概述：可达性分析算法是以根对象集合（GC Roots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。可以有效地解决在引用计数算法中循环引用的问题，防止内存泄露的发生。</li><li>搜索走过的路径称为引用链（Reference Chain）</li></ul></li></ol></li></ol><p><strong>目前在jvm中比较常见的三种垃圾收集算法是标记-清除算法（Mark- Sweep）&#x2F;复制算法（Copying）&#x2F;标记-压缩算法（Mark- Compact）</strong></p><p><strong>标记-清除（Mark- Sweep）算法</strong></p><ul><li>执行过程：</li><li><ul><li>当堆中的有效内存空间（available memory）被耗尽时，就会停止整个程序（Stop The World），然后就行两项工作，第一项是标记，第二项是清除。</li><li><ul><li>标记：Collector从引用根节点开始遍历，<strong>标记所有被引用的对象</strong>，一般是在对象的Header中记录为可达对象。</li><li>清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在Header中没有标记为可达对象，则将其回收。</li></ul></li></ul></li><li>缺点：</li><li><ul><li>效率不算高</li><li>在GC的时候会停止用户线程，用户体验不好</li><li>这种方式清理出来的空闲内存不连续，<strong>产生内存碎片。****需要维护一个空闲列表</strong></li></ul></li><li>优点：简单 </li><li>何为清除？</li><li><ul><li>清除并不是置空，而是将这些垃圾对象的地址记录在空闲列表，当有新对象来的时候，直接覆盖原有对象位置。</li></ul></li></ul><p><strong>复制（Copying）算法</strong></p><p>概述：将活着的内存空间分为两块，每次只使用一块，在垃圾回收时将正在使用的内存中<strong>存活的对象复制</strong>到未使用的内存块中，之后清除正在使用的内存块中的所有垃圾对象，交换两个内存的角色，最后完成垃圾回收。</p><p><img src="https://s2.loli.net/2023/03/10/2S3TuB5gKA1WfwI.jpg" alt="复制算法"></p><p>优点：</p><ul><li>没有标记和清除过程，实现简单，运行高效</li><li>复制过去后保证空间连续性，<strong>不会出现“碎片”问题</strong></li></ul><p>缺点：</p><ul><li><strong>需要两倍的内存空间</strong></li><li>因为复制，所以<strong>需要维护对象引用关系</strong>，需要时间的开销</li></ul><p>注：<strong>如果垃圾对象很少，复制算法不是好的选择，因为需要复制大量的存活对象，开销很大还没有效果</strong></p><p>应用场景：</p><p>在新生代使用的就是复制算法，因为新生代80%的对象都是朝生夕死的，所以使用复制算法性价比很高。</p><p><img src="https://s2.loli.net/2023/03/10/vpLTDKqAg85Yz1C.jpg" alt="新时代"></p><p><strong>标记-压缩（整理）算法（Mark- Compact）</strong></p><p>执行过程：</p><ul><li>第一阶段和标记-清除算法一样，从根节点开始标记所有被引用对象</li><li>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放</li><li>最后，清理边界外所有的空间</li></ul><p><img src="https://s2.loli.net/2023/03/10/cxA6K1EiVtfyjvJ.jpg" alt="标记压缩"></p><p>优点：</p><ul><li>相对于标记-清除算法来说，不存在内存碎片化的问题</li><li>相对于复制算法来说，不存在内存减半的问题</li></ul><p>缺点：</p><ul><li>从效率上来说，标记-压缩算法是这三种算法里最<strong>低</strong>的</li><li><strong>存在对象移动，所以需要维护对象引用关系</strong></li></ul><table><thead><tr><th></th><th>Mark-Sweep</th><th>Mark-Compact</th><th>Copying</th></tr></thead><tbody><tr><td>速度</td><td>中等</td><td>最慢</td><td>最快</td></tr><tr><td>空间开销</td><td>少（但会堆积碎片）</td><td>少（不堆积碎片）</td><td>内存使用率减半（不堆积碎片）</td></tr><tr><td>移动对象</td><td>否</td><td>是</td><td>是</td></tr><tr><td>内存分配方式</td><td>空闲列表方式</td><td>指针碰撞方式</td><td>指针碰撞方式</td></tr></tbody></table><p><strong>垃圾收集思想：分代收集算法&#x2F;增量收集算法&#x2F;分区算法，这些只是基本的算法思路，实际GC实现过程要复杂的多，目前还在发展中的前沿GC都是复合算法，并且并行和并发兼备。</strong></p><p><strong>分代收集算法</strong></p><p>概述：因为没有一个完美的算法，可以根据不同生命周期的对象采取不同的收集方式。目前几乎所有的GC都采用分代收集（Generational Collecting）算法执行垃圾回收</p><ul><li>年轻代</li><li><ul><li>年轻代的特点：区域相对老年代较小，对象生命周期短，存活率低，回收频繁。这种情况复制算法是最合适的。</li></ul></li><li>老年代</li><li><ul><li>老年代特点：区域较大，对象生命周期长，存活率高，回收不及年轻代频繁。这种情况存活大量对象，复制算法明显不合适。一般使用标记-清除或者标记-清除与标记-整理混合的方式。</li><li><ul><li>Mark阶段的开销与存活对象的数量成正比</li><li>Sweep阶段的开销与所管理区域的大小成正相关</li><li>Compact阶段的开销与存活对象的数据成正比</li></ul></li></ul></li></ul><p>HotSpot使用的是CMS回收器，CMS基于Mark-Sweep实现的，对于对象回收效率很高。而对于碎片问题，CMS采用基于Mark-Compact算法的Serial Old回收器作为补偿措施；当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用Serial Old执行Full GC以达到对老年代内存的整理。</p><p><strong>增量收集算法</strong></p><ul><li>基本思想：垃圾收集线程每次只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记&#x2F;清理或复制工作。</li><li>解决的问题：主要解决STW问题，避免程序因垃圾收集长时间挂起，影响用户体验和系统稳定性。</li><li>缺点：线程切换和上下文转换的消耗，造成系统吞吐量的下降。</li></ul><p><strong>分区算法</strong></p><ul><li>概述：一般来说，在相同条件下，堆空间越大，一次GC的时间越长，同时GC产生的STW时间越长。为了解决STW问题，将一块大的内存区域分割成多个小块，根据目标停顿时间，每次合理地回收若干Region，而不是整堆收集。</li><li>分代收集算法按照对象生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间Region。</li><li>每个Region独立使用，独立回收。可以控制一次回收多少个区间。</li></ul><p><img src="https://s2.loli.net/2023/03/10/Ks8nzS6HXu2oVbx.jpg" alt="region"></p><p><strong>垃圾回收的相关概念</strong></p><ol><li><p><strong>System.gc()的理解</strong></p></li><li><ul><li>在默认情况下System.gc()或者Runtime.getRuntime().gc()的调用，会显示触发Full GC</li><li>System.gc()无法保证对垃圾收集器的调用，即无法保证垃圾收集器一定执行或者什么时间执行，无法保证是否执行finalize方法。</li><li>一般情况下System.gc()是自动进行的，特殊情况下，如我们编写一个性能基准，我们可以在运行之间调用System.gc()</li><li>System.gc()的底层就是Runtime.getRuntime().gc()</li><li>执行System.runFinalization()会强制调用失去引用对象的finalize方法</li></ul></li><li><p><strong>内存溢出（OOM）：</strong></p></li></ol><ul><li>概述：如果不及时对内存中的垃圾进行清理，这些垃圾会一直占据着内存空间，<em><strong>*当进行了一次Full GC后，剩余内存仍然无法存储新的对象时，就会导致内存溢出。*</strong></em></li><li>原因</li><li><ul><li>Java虚拟机的堆内存设置不够</li><li>代码创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）</li></ul></li><li>在抛出OOM之前，通常会触发GC</li><li><ul><li>例如jvm会尝试回收软引用指向的对象</li><li>NIO中System.gc()会被调用</li></ul></li><li><strong>也有不会触发GC的情况</strong></li><li><ul><li>如我们去分配一个超大对象（超过了堆的最大值），JVM可以判断出GC并不能解决这个问题，直接抛出OOM</li></ul></li></ul><ol><li><strong>内存泄露（Memory Leak）</strong></li></ol><ul><li>概述：严格来说，只有对象不会再被程序用到，但是GC又不能回收他们的情况，才叫内存泄露。</li><li><ul><li>单例模式： 单例的生命周期和应用程序一样长，如果单例程序中持有对外部对象的引用的话，那么这个外部对象是不能被回收的，会导致内存泄露</li><li><strong>一些提供close的资源未被关闭导致内存泄露</strong>，比如数据库连接，网络连接，io连接等等，必须手动close，否则是不能被回收的，导致内存泄露</li></ul></li><li>实际情况很多时候一些不太好的实践会导致对象的生命周期过长甚至导致OOM，也可以叫做宽泛意义上的“内存泄露”</li><li><ul><li>比如，明明可以使用局部变量解决问题，实际却声明为成员变量或者静态变量，导致生命周期过长</li><li>比如，web程序开发中，明明可以声明为request级别，却在实际开发中声明为session级别，导致生命周期过长</li></ul></li><li>内存泄露有可能导致内存溢出</li></ul><ol><li><p><strong>STW(Stop The World)</strong></p></li><li><ul><li>概述：每当出现GC时，都会产生应用程序的停顿。即垃圾收集线程开始工作，停掉所有正在工作的用户线程。</li><li>所有的GC都会发生STW事件</li></ul></li><li><p><strong>程序的并发与并行</strong></p></li><li><ul><li>并发（Concurrent）</li><li><ul><li>在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行。</li><li>并发不是真正意义上的“同时进行”，只是CUP把一个时间段划分成几个时间片段，然后在这几个时间区间来回切换，由于CPU处理的速度非常快，只要时间间隔处理得当，即用户可以感觉到多个应用程序同时在进行。</li></ul></li><li>并行（Parallel）</li><li><ol><li>当系统有一个以上的CPU时，当一个CPU执行一个进程，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，我们称之为并行（Parallel）</li></ol></li><li>对比：</li><li><ul><li>并发，指的是多个事情，在同一时间段内同时发生了；并行，指的是多个事情，在同一时间点上同时发生了。</li></ul></li><li>并发的多个任务之间是互相抢占资源的；并行的多个任务之间不互相抢占资源的。</li><li>只有在多CPU或者一个CPU多核的情况中，才会发生并行。否则，看似同时发生的事情，其实都是并发执行的。</li></ul></li><li><p><strong>垃圾回收的并发与并行</strong></p></li><li><ol><li>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态</li><li><ol><li>例如ParNew，Parallel Scavenge，Parallel Old；</li></ol></li><li>串行（Serial）：相较于并行的概念，单线程执行</li><li>并发（Concurrent）：指的是用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会暂停用户程序的线程</li><li><ul><li>用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；</li><li>如：CMS，G1</li></ul></li></ol></li><li><p><strong>安全点（Safe Point）与安全区域（Safe Region）</strong></p></li><li><ul><li>安全点 Safe Point</li><li><ul><li>程序执行过程中并非所有地方都能停顿下来进行GC，只有在特定的位置才能停顿下来进行GC，这些位置称为安全点。</li><li>如果安全点太少可能导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题。</li><li><strong>安全点的选择标准</strong></li><li><ul><li>大部分指令的执行时间都非常短暂，通常会根据“<strong>是否具有让程序长时间执行的特征</strong>”为标准。比如：选择一些执行时间较长的指令作为Safe Point，如方法调用，循环跳转和异常跳转等。</li></ul></li><li>如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来呢？</li><li><ul><li>抢先式中断：（目前没有虚拟机采用了）</li><li><ul><li>首先中断所有线程。如果还有线程不在安全点，就恢复线程，让线程跑到安全点。</li></ul></li><li>主动式中断：</li><li><ul><li>设置一个中断标志，各个线程运行到Safe Point的时候主动轮询这个标志，如果中断标志为真（说明要进行GC），则将自己进行中断挂起。</li></ul></li></ul></li></ul></li><li>安全区域 Safe Region</li><li><ul><li>Safe Point机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的SafePoint。但是，程序“不执行”的时候呢？例如线程处于Sleep状态或者Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全点去中断挂起，JVM也不太可能等待线程被唤醒。对于这种情况，就需要安全区域来解决。</li><li>****安全区域是指在一段代码片段中，对象的引用关系不会发生变化****，在这个区域中的任何位置开始GC都是安全的。</li><li>执行过程：</li><li><ul><li>当用户线程运行到Safe Region的代码时，首先标识线程已经进入了Safe Region，如果这段时间内发生GC，JVM会忽略（忽略即用户线程可以继续执行）标识为Safe Region状态的线程</li><li>当用户线程即将离开Safe Region时，会检查JVM是否已经完成GC，如果完成了，则继续运行，否则线程必须等待，直到收到可以安全离开Safe Region的信号为止。</li></ul></li></ul></li></ul></li></ol><p><strong>对象有三种状态</strong></p><ul><li>以下三种状态是由于finalize方法的存在，进行的区分，只有对象不可触及时才可以被回收。</li><li><ul><li>可触及的：从根节点开始，可以到达这个对象</li><li>可复活的：对象的所有引用都被释放，但是对象有可能在finalize中复活</li><li>不可触及的：对象的finalize被调用，并且没有复活，那么就会进入不可触及状态。不可触及对象不可能被复活，因为<em><strong>*finalize只会被调用一次。*</strong></em></li></ul></li></ul><p><strong>对象引用</strong></p><p>强引用（Strong Reference），软引用（Soft Reference），弱引用（Weak Reference），虚引用（Phantom Reference），强度依次递减。</p><ul><li>强引用：在引用关系存在的情况下，垃圾收集器永远不会回收强引用</li><li><ul><li>Java中最常见的就是强引用，99%以上的对象都是强引用，也是默认引用类型</li><li>强引用对象时可触及的</li><li>强引用可以直接访问目标对象</li><li>强引用所指向的对象在任何时候都不会被回收</li><li>强引用可能导致内存泄露</li></ul></li><li>软引用：在引用关系存在的情况下，内存不足则回收，但是内存不足并不表示一定会爆出OOM才会回收软引用</li><li><ul><li>应用场景：高速缓存，如Mybatis底层就使用了软引用</li></ul></li><li>弱引用：在引用关系存在的情况下，垃圾收集就回收，用于垃圾回收的线程优先级较低，不能保证立即回收，可能要等一段时间</li><li><ul><li>应用场景：缓存</li><li>你在开发中用过WeakHashMap吗？</li><li><ul><li>WeekHashMap里的Entry就是继承的WeakReference</li><li>应用场景：存储图片，当发生GC时会立即回收，避免出现OOM</li></ul></li></ul></li><li>虚引用：一个对象是否有虚引用，完全不会对其生存时间构成影响，也无法通过一个虚引用来获得对象的实例；设置虚引用的唯一目的是<strong>能在对象被回收时收到一个系统通知，对对象回收进行跟踪</strong>。</li><li><ul><li>虚引用必须和引用队列一起使用</li><li>应用场景：对象回收跟踪，也可以将释放资源的操作放到虚引用中执行</li></ul></li><li>终结器引用</li><li><ul><li>它用以实现对象的finalize方法</li><li>无需手动编码，配合引用队列使用</li><li>在GC时，终结器引用入队。由Finalizer线程通过终结器引用找到被引用对象并调用它的finalize方法，第二次GC时才能回收被引用对象。</li></ul></li></ul><p><strong>垃圾收集器分类</strong></p><ul><li><p>按线程数分，可以分为串行垃圾收集器和并行垃圾收集器。</p><ul><li><p>串行回收器适用于单核CPU情况，串行回收默认被应用在客户端的Client模式下的JVM中</p></li><li><p>并行适合在多核或多CPU情况</p><p><img src="https://s2.loli.net/2023/03/10/5YjDoKPCVGbZOXt.jpg" alt="Screen Shot 2021-01-28 at 7.30.11 PM"></p></li></ul></li><li><p>按工作模式分，可分为并发式垃圾回收器和独占式垃圾回收器。</p><ul><li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li><li>独占式垃圾回收器一旦运行，就停止应用程序中国呢的所有用户线程，直到垃圾回收过程完全结束。</li></ul><p><img src="https://s2.loli.net/2023/03/10/eCa76POY9HIqFyt.jpg" alt="Screen Shot 2021-01-29 at 10.25.10 AM"></p></li><li><p>按碎片处理方式分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。</p></li><li><ul><li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</li><li><ul><li>再分配对象空间使用：指针碰撞</li></ul></li><li>非压缩式的垃圾回收器不进行这步操作</li><li><ul><li>再分配对象空间使用：空闲列表</li></ul></li></ul></li><li><p>按工作的内存区间分，可以分为年轻代垃圾回收器和老年代垃圾回收器。</p></li></ul><p>评估GC的性能指标</p><ul><li><strong>吞吐量（throughput）</strong>：运行用户代码的时间占总运行时间的比例</li><li><ul><li>（总运行时间：程序的运行时间+内存回收的时间），比如：虚拟机总共运行了100分钟，其中垃圾收集花掉了一分钟，那么吞吐量就是99%，越高越好</li><li>吞吐量优先，意味着在单位时间内，STW的时间最短</li><li>这种情况下，应用程序能容忍较高的暂停时间</li></ul></li><li>垃圾收集开销：吞吐量的补数，垃圾收集器所用时间与总运行时间的比例</li><li>**<em>*暂停时间（pause time）*<em>：执行垃圾收集器时，程序的工作线程被暂停的时间</em></em></li><li>收集频率：相对于应用程序的执行，收集操作发生的频率</li><li>内存占用：Java堆区所占的内存大小</li><li>快速：一个对象从诞生到被回收所经历的时间</li></ul><p>吞吐量与暂停时间时矛盾体，<strong>目标是在可控的暂停时间内，最大程度地提高吞吐量</strong></p><p><img src="https://s2.loli.net/2023/03/10/UajPyLB8t2VrWfO.jpg" alt="Screen Shot 2021-01-29 at 11.06.08 AM"></p><p>串行：Serial和Serial Old</p><p>并行：ParNew和Parallel Scavenge和Parallel Old</p><p>并发：G1和CMS（Concurrent Mark Sweep）</p><p>Serial&amp;Serial Old</p><p>应用场景：单线程或者单核CPU的场景，如用户的桌面应用</p><p><img src="https://s2.loli.net/2023/03/10/6HqTXM3RnElGhv8.jpg" alt="Serial"></p><p><strong>ParNew</strong></p><ul><li>概述：相当于Serial的多线程版本，Par时Parallel的缩写，New表示只处理新生代</li><li>ParNew在单线程环境下不一定比Serial收集器效率更高</li><li>对于新生代，回收次数频繁，使用并行方式高效</li><li>对于老年代，回收次数少，使用串行方式节省资源（CPU并行需要切换线程，串行可以省去切换线程的资源）</li></ul><p><img src="https://s2.loli.net/2023/03/10/BKMHpbDiFXuxvVJ.jpg" alt="ParNew"></p><p><strong>Parallel Scavenge和Parallel Old</strong></p><ul><li><strong>JDK8中默认的垃圾收集器</strong></li><li>和ParNew不同的是，Parallel Scavenge的目标是达到一个可控制的吞吐量（Throughput）。</li><li>同时Parallel Scavenge具有自适应调节策略</li><li><strong>高吞吐量适合在后台运算而不需要太多交互的任务</strong></li><li>应用场景：</li><li><ul><li><strong>执行批量处理，订单处理，工资支付，科学计算等等</strong></li></ul></li><li>参数配置：</li><li><ul><li>-XX:+UseParallelGC 开启新生代</li><li>-XX:+UseParallelOldGC 开启老年代</li><li>上面两个参数开启一个，另一个也会被开启</li><li>-XX:ParallelGCThreads 设置年轻代并行收集器的线程数，线程数的值与CPU数量保持一致效果最好</li><li><ul><li>CPU&lt;&#x3D;8时，与线程数相等即可</li><li>CPU&gt;8时，线程数等于3+(5*CPU_Count)&#x2F;8</li></ul></li><li>-XX:MaxGCPauseMillis 设置垃圾收集器最大停顿时间（<strong>慎用</strong>）</li><li><ul><li>为了尽可能把停顿时间控制在MaxGCPauseMillis以内，收集器会调整堆大小或者其他参数</li><li>如果停顿时间设置的过小会导致堆空间变小，频繁的GC，同时吞吐量下降</li></ul></li><li>-XX:GCTimeRatio垃圾收集时间占总时间的比例。用于衡量<strong>吞吐量</strong>的大小</li><li><ul><li>取值范围（0，100）。默认99，也就是垃圾回收时间不超过1%；</li><li>与-XX:MaxGCPauseMillis参数互补的关系</li></ul></li><li>-XX:+UseAdaptiveSizePolicy 设置Parallel Scavenge收集器的自适应调节策略</li><li><ul><li>在这种模式下，年轻代，Eden和Survivor的比例等会被自动调整，以达到堆大小，吞吐量和停顿时间之间的平衡点。</li></ul></li></ul></li></ul><p><img src="https://s2.loli.net/2023/03/10/2hfBKUyYWXMxwr8.jpg" alt="Parallel Scavenge"></p><p>CMS（Concurrent-Mark-Sweep），<em><strong>*为了最大程度低延迟，CMS采用的是并发垃圾收集*</strong></em></p><p><img src="https://s2.loli.net/2023/03/10/APUjEVNMycetwD2.jpg" alt="CMS"></p><ul><li><p>说明：JDK9标记为Deprecate，JDK14被删除</p></li><li><p>执行过程</p></li><li><ul><li>初始标记（Initial-Mark）阶段：主要任务**仅仅是标记出**GC Roots能直接关联到的对象****。</li><li><ul><li>存在STW</li><li>速度非常快</li></ul></li><li>并发标记（Concurrent-Mark）阶段：从GC Roots的直接关联对象开始遍历整个对象图的过程</li><li><ul><li>不存在STW</li><li>耗时较长</li></ul></li><li>重新标记（Remark）阶段：由于在并发标记阶段中，用户线程与垃圾收集线程同时运行，会导致标记不准确，在这个阶段修正并发标记期间，因用户程序继续运行而导致标记产生变动的那部分对象的标记记录</li><li><ul><li>存在STW，同时会比初始标记阶段稍长一些</li><li>远比并发标记阶段时间短</li></ul></li><li><strong>并发清除</strong>（Concurrent- Sweep）阶段：清理删除标记阶段的已经死亡的对象，释放内存空间。由于不需要移动存活对象，这个阶段也可以与用户线程同时并发</li><li><ul><li>不存在STW</li></ul></li></ul></li><li><p>使用的是标记—清除算法</p></li><li><ul><li>为什么不使用标记—压缩算法？</li><li><ul><li>因为是****并发清除****，如果使用标记-压缩算法会移动对象，此时用户线程还在执行，会对用户线程造成影响</li></ul></li></ul></li><li><p>由于在垃圾回收阶段用户线程没有中断，所以在<strong>CMS回收</strong>过程中，应该确保应用程序有足够的内存可用，即<strong>当堆内存使用率达到某一阀值</strong>时，便<strong>开始进行回收</strong>。<strong>如果预留的内存无法满足程序需要，就会出现“Concurrent Mode Failure”，此时临时启动Serial Old收集器重新进行老年代垃圾回收，这样停顿时间就很长了</strong>。</p></li><li><p>CMS优点</p></li><li><ul><li>并发收集</li><li>低延迟</li></ul></li><li><p>CMS弊端</p></li><li><ul><li><strong>会产生内存碎片</strong>，可以在若干次GC后进行一次碎片整理</li><li>CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户线程暂停，但会因为占用了一部分线程而导致应用程序变慢，<strong>总吞吐量下降</strong></li><li>CMS收集器<strong>无法处理浮动垃圾</strong>。即在<strong>并发标记阶段</strong>如果<strong>产生新的垃圾</strong>，在重新标记阶段无法对这些垃圾重新标记，导致这些垃圾没有被及时回收。</li></ul></li><li><p>参数设置：</p></li><li><ul><li>-XX:+UseConcMarkSweepGC </li><li><ul><li>开启该参数后会自动将-XX:+UseParNewGC打开，即ParNew（Young区）+CMS（Old区）+Serial Old的组合</li></ul></li><li>-XX:CMSInitiatingOccupanyFraction设置堆内存使用率的阈值，一旦达到该阈值就开始进行回收。</li><li><ul><li>如果内存增长缓慢可以设置一个稍大的值，能够降低CMS的频率，减少老年代回收的次数可以明显改善程序性能。</li><li>如果内存增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。</li></ul></li></ul></li><li><p>如果你想要最小化地使用内存和并行开销，选择Serial GC，老年代则用Serial Old GC。</p></li><li><p>如果你想要最大化应用程序<strong>吞吐量</strong>，选择Parallel GC，老年代使用Parallel Old GC</p></li><li><p>如果你想要最小化GC的中断或<strong>停顿时间</strong>，选择CMS GC，年轻代使用ParNew，紧急方案使用Serial Old GC；</p></li></ul><p><strong>G1（Garbage First）</strong></p><p><img src="https://s2.loli.net/2023/03/10/3n8m7QpPK1JEdSv.jpg" alt="G1"></p><ul><li><strong>JDK9中默认的垃圾收集器</strong></li><li>适合大堆，也就是大内存的场景下，大概超过8G的场景下，G1优于CMS</li><li><strong>G1需要维护一个记忆集，需要额外的内存开销</strong></li><li>目标：<strong>在延迟可控的情况下获得尽可能高的吞吐量</strong></li><li>****并行与并发的回收器*<em><strong>，作用于</strong></em>*新生代（并行）*<em><strong>和</strong>老年代（并发）</em>*</li><li>主要针对配备多核CPU及大容量内存的机器</li><li>原理：把内存分割为很多不相关的区域（Region）（物理上不连续的）。G1有计划地避免在整个堆进行全区域的垃圾收集，根据垃圾堆积的价值大小，在后台维护一个优先列表，<strong>每次根据允许的收集时间，优先回收价值最大的Region</strong></li><li>并行与并发</li><li><ul><li>G1在回收期间可以有多个GC线程同时工作，此时用户线程STW</li><li>G1拥有与应用程序交替执行的能力，部分工作可以与应用程序同时执行</li></ul></li><li>分代收集</li><li><ul><li>G1依然属于分代型垃圾回收器</li><li>将堆空间分为若干区域，这些区域包含了逻辑上的年轻代和老年代</li><li>兼顾年轻代和老年代</li></ul></li><li>空间整合</li><li><ul><li>CMS：“标记-清除”算法，内存碎片，若干次GC后进行一次碎片整理</li><li>G1将内存划分为一个个的Region，内存回收以Region为基本单位，<strong>region之间使用的是<strong><strong>复制算法</strong></strong>，但整体上可以看作是****标记-压缩算法</strong>，有利于程序长时间运行，不会因为碎片问题无法存储大对象。</li></ul></li><li>可预测的停顿时间模型（Soft real-time）</li><li><ul><li>能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾回收上的时间不得超过N毫秒</li><li>每次根据允许的收集时间，优先回收价值最大的Region，获取尽可能高的收集效率</li><li>根据<strong>优先列表</strong>，<strong>部分</strong>区域进行<strong>回收</strong>，<strong>无需全局停顿</strong></li></ul></li></ul><p>G1回收器垃圾回收过程</p><p><strong>当年轻代的Eden区用尽时开始年轻代回收过程</strong>；G1的<strong>年轻代收集</strong>阶段是一个<strong>并行</strong>的<strong>独占式</strong>收集器。在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后<strong>从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。</strong></p><p><strong>当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。</strong></p><p><strong>**标记完成马上开始混合回收过程**。**G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，</strong>G1的老年代回收器不需要整个老年代被回收，一次只需要扫描&#x2F;回收一部分老年代的Region就可以了**。同时，这个老年代Region是和年轻代一起被回收的。</p><p><img src="https://s2.loli.net/2023/03/10/KeyVlqucT9wdi8N.jpg" alt="GC"></p><ul><li>年轻代GC（Young GC）</li><li>老年代并发标记过程（Concurrent Marking）</li><li>混合回收（Mixed GC）</li><li>（如果需要，单线程，独占式，高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收）</li></ul><p><img src="https://s2.loli.net/2023/03/10/ctj15Fhq2fd3Pl6.jpg" alt="Region"></p><p><strong>Remembered Set</strong></p><p>问题：<strong>一个对象被不同区域引用的问题，需要扫描整堆，回收新生代时也要扫描老年代</strong></p><p>解决方法：</p><ul><li><strong>无论G1还是其他分代收集器，*<em>JVM都是使用Remembered Set来避免全局扫描*</em></strong></li><li>每一个Region都对应一个Remembered Set</li><li>每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作，然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器，检查老年代对象是否引用了新生代对象），如果不同，通过CardTable把相关引用信息记录到引用指向对象所在Region对应的Remembered Set中</li><li>当进行垃圾收集时，在GC Roots的枚举范围加入Remembered Set；就可以保证不进行全局扫描也不会遗漏。</li></ul><p>G1回收器的参数设置</p><ul><li>-XX: +UseG1GC 设置使用G1收集器</li><li>- XX：G1HeapRegionSize 设置Region的大小。值为2的幂次，范围是1MB-32MB之间</li><li>-XX:MaxGCPauseMillis 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认200ms</li><li>-XX：ParallelGCThread 设置STWGC工作线程数，最大设置为8</li><li>-XX：ConcGCThreads 设置并发标记的线程数，设置为ParallelGCThread的1&#x2F;4</li><li>-XX:InitiatingHeapOccupancyPercent 设置触发并发GC周期的Java堆占用率阈值，超过此值，就触发GC，默认45</li></ul><p><strong>G1的设计原则就是简化JVM性能调优</strong></p><p><strong>第一步：开启G1垃圾回收器</strong></p><p><strong>第二步：设置堆的最大内存</strong></p><p><strong>第三步：设置最大的停顿时间</strong></p><p>G1中提供了三种垃圾回收模式：YoungGC&#x2F;Mixed GC和Full GC，在不同条件下触发</p><p><strong>G1应用场景</strong></p><ul><li>面向服务端应用，针对大内存多处理器的机器</li><li>需要低延迟的场景，并且具有大的堆内存情况下</li><li>用来替换CMS收集器</li><li><ul><li>超过50%的Java堆被活动数据占用</li><li>对象分配频率或年代提升频率变化很大</li><li>GC停顿时间过长（长于0.5至1秒）</li></ul></li></ul><p>G1可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程</p><p><strong>分区Region：化整为零</strong></p><ul><li>使用G1收集器时，将整个Java堆区划分为约2048个大小相同的独立的Region块，每个Region大小根据堆空间实际大小而定，整体控制在1MB到32MB之间，且为2的N次幂。<strong>所有的Region大小相同</strong>，且在JVM生命周期内不会被改变</li><li>G1垃圾收集器还增加了一个新的内存区域，叫做Humongous区域，主要用于存储大对象，如果超过1.5个Region就放到H区。</li><li><strong>设置H区的原因：</strong></li><li><ul><li><strong>对于堆中的大对象，默认会直接分配到老年代，但是如果此时的大对象生命周期较短，就会对垃圾收集器造成负面影响</strong>。<strong>为了解决这个问题，G1划分了一个Humongous区。如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。如果找不到连续的H区，则进行Full GC</strong></li></ul></li></ul><p><img src="https://s2.loli.net/2023/03/10/KlgS38UuDYbxraW.jpg" alt="GC对比"></p><p><img src="https://s2.loli.net/2023/03/10/SnL9IHsYjJq1bNm.jpg" alt="Screen Shot 2021-01-29 at 8.03.05 PM"></p><p><img src="https://s2.loli.net/2023/03/10/sonyijUMS1DxhYA.jpg" alt="Screen Shot 2021-01-29 at 8.03.37 PM"></p><p><a href="https://wiki.openjdk.java.net/display/zgc/Main">ZGC</a>（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器，它的设计目标包括：</p><ul><li>停顿时间不超过10ms；</li><li>停顿时间不会随着堆的大小，或者活跃对象的大小而增加；</li><li>支持8MB~4TB级别的堆（未来支持16TB）。</li></ul><p>蚂蚁金服：</p><p>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下CMS和G1</p><p>一面：JVM GC算法有哪些，目前的JDK版本采用什么回收算法</p><p>一面：G1回收器讲一下回收过程</p><p>GC是什么？为什么要有GC？</p><p>一面：GC的两种判定方法？CMS收集器与G1收集器的特点</p><p>百度：</p><p>说一下GC算法，分代回收说一下</p><p>垃圾收集策略和算法</p><p>天猫：</p><p>一面：JVM GC原理，JVM怎么回收内存</p><p>一面：CMS特点，垃圾收集算法有哪些？各自的优缺点，他们共同的缺点是什么？</p><p>滴滴：</p><p>一面：Java的垃圾回收器都有哪些，说一下G1的应用场景，平时你是如何搭配使用垃圾回收器的</p><p>京东：</p><p>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下CMS和G1，包括原理，流程，优缺点，垃圾回收算法的实现原理</p><p>阿里：</p><p>讲一讲垃圾回收算法</p><p>什么情况下触发垃圾回收？</p><p>如何选择合适的垃圾收集算法？</p><p>JVM有哪几种垃圾回收器？</p><p>字节跳动：</p><p>常见的垃圾回收器算法有哪些，各有什么优劣？</p><p>system.gc()和runtime.gc()会做什么事情？</p><p>一面：Java GC机制？<strong>GC Roots有哪些？比如局部变量表里面的对象，由于Root采用栈方式存放变量和指针，所以如果一个指针保存了堆内存里面的对象，但是自己又不存在堆内存里面，它就是一个Root</strong></p><p><strong>即堆周边的区域里的对象都可以作为GC Root</strong></p><p><img src="https://s2.loli.net/2023/03/10/bg4iSzEW6evhlrQ.jpg" alt="508BB403-B8DE-41E8-8DAC-B74EA5907923"></p><p><img src="https://s2.loli.net/2023/03/10/hzTfSH8XQWdZRJu.jpg" alt="346E5148-8EEC-4DF2-8506-37C17CEC552E"></p><p>二面：Java对象的回收方式，回收算法。</p><p>CMS和G1了解么，CMS解决什么问题，说一下回收的过程，CMS回收停顿了几次，为什么要停顿两次。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMq学习笔记</title>
    <link href="/2023/03/10/Middleware/MessageQueue/RabbitMq%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/10/Middleware/MessageQueue/RabbitMq%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMq学习笔记"><a href="#RabbitMq学习笔记" class="headerlink" title="RabbitMq学习笔记"></a>RabbitMq学习笔记</h1><h4 id="Erlang安装"><a href="#Erlang安装" class="headerlink" title="Erlang安装"></a>Erlang安装</h4><p><a href="https://www.erlang-solutions.com/downloads/">https://www.erlang-solutions.com/downloads/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#运行Package Cloud提供的RabbitMQ Server快速安装脚本</span><br>curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash<br><br><span class="hljs-comment">#运行Package Cloud提供Erlang环境快速安装脚本</span><br>curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash<br><br><span class="hljs-comment">#使用yum安装Erlang环境</span><br>yum  -y install erlang<br><br><span class="hljs-comment">#安装socat, logrotate依赖</span><br>  yum install socat logrotate -y<br><br><span class="hljs-comment">#使用yum安装RabbitMQ Server</span><br>yum install -y rabbitmq-server<br><br></code></pre></td></tr></table></figure><p>为什么Rabbitmq是基于channel发送消息而不是基 于连接？</p><p>因为连接需要三次握手和四次挥手，会很慢</p><h4 id="消息模式"><a href="#消息模式" class="headerlink" title="消息模式"></a>消息模式</h4><blockquote><p>所有的模式队列与交换机一定要建立绑定关系，如果没有指明交换机，会走一个默认的交换机，默认交换机是direct模式</p></blockquote><h5 id="1-简单模式"><a href="#1-简单模式" class="headerlink" title="1. 简单模式"></a>1. 简单模式</h5><blockquote><p>默认交换机</p></blockquote><p><img src="https://s2.loli.net/2023/03/10/Z4xF6IlC1hHaEdc.jpg" alt="img"></p><h5 id="2-工作队列模式"><a href="#2-工作队列模式" class="headerlink" title="2. 工作队列模式"></a>2. 工作队列模式</h5><blockquote><p>默认交换机</p><ul><li>轮训模式，轮训分发，可以自动ack，但是建议使用手动ack</li><li>公平分发，能者多劳，必须手动ack</li></ul></blockquote><p><img src="https://s2.loli.net/2023/03/10/KZiwoygEuFm8OMN.jpg" alt="img"></p><h5 id="3-发布订阅模式-fanout"><a href="#3-发布订阅模式-fanout" class="headerlink" title="3. 发布订阅模式 fanout"></a>3. 发布订阅模式 fanout</h5><blockquote><p>需要指定交换机</p></blockquote><p><img src="https://s2.loli.net/2023/03/10/oQtmlMgIG5YhXC8.jpg" alt="img"></p><h5 id="4-Routing模式（Direct模式）"><a href="#4-Routing模式（Direct模式）" class="headerlink" title="4. Routing模式（Direct模式）"></a>4. Routing模式（Direct模式）</h5><blockquote><p>需要指定交换机和路由key</p></blockquote><p><img src="https://s2.loli.net/2023/03/10/7ICjpoOkDaUzGFd.jpg" alt="img"></p><h5 id="5-Topic模式"><a href="#5-Topic模式" class="headerlink" title="5. Topic模式"></a>5. Topic模式</h5><blockquote><p>需要指定交换机和路由key</p></blockquote><p><img src="https://s2.loli.net/2023/03/10/qSheLb15KNlJ3Y8.jpg" alt="img"></p><blockquote><p>‘#’ : 匹配一个或多个词</p><p>‘*’ : 匹配不多不少恰好1个词</p><p>item.# ：能够匹配 item.insert.abc 或者 item.insert</p><p>item.* ：只能匹配 item.insert</p></blockquote><h5 id="6-RPC模式"><a href="#6-RPC模式" class="headerlink" title="6. RPC模式"></a>6. RPC模式</h5><p><img src="https://s2.loli.net/2023/03/10/ntZjNb1lrocTQHu.jpg" alt="img"></p><h4 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h4><p>direct</p><p>fanout</p><p>topic</p><p>headers</p>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Middleware</tag>
      
      <tag>RabbitMq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMq学习笔记</title>
    <link href="/2023/03/10/Middleware/MessageQueue/RocketMq%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/10/Middleware/MessageQueue/RocketMq%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="RocketMq学习笔记"><a href="#RocketMq学习笔记" class="headerlink" title="RocketMq学习笔记"></a>RocketMq学习笔记</h2><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">unzip rocketmq-all-4.9.4-source-release.zip</span><br><span class="hljs-meta prompt_"> &gt; </span><span class="language-bash"><span class="hljs-built_in">cd</span> rocketmq-all-4.9.4-source-release/</span><br><span class="hljs-meta prompt_"> # </span><span class="language-bash">改完配置需要重新编译</span> <br><span class="hljs-meta prompt_"> &gt; </span><span class="language-bash">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="hljs-meta prompt_"> &gt; </span><span class="language-bash"><span class="hljs-built_in">cd</span> distribution/target/rocketmq-4.9.4/rocketmq-4.9.4</span><br></code></pre></td></tr></table></figure><h3 id="Start-Name-Server"><a href="#Start-Name-Server" class="headerlink" title="Start Name Server"></a>Start Name Server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">nohup</span> sh bin/mqnamesrv &amp;</span><br><span class="hljs-meta prompt_">  &gt; </span><span class="language-bash"><span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log</span><br>  The Name Server boot success...<br></code></pre></td></tr></table></figure><h3 id="Start-Broker"><a href="#Start-Broker" class="headerlink" title="Start Broker"></a>Start Broker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">nohup</span> sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="hljs-meta prompt_">  &gt; </span><span class="language-bash"><span class="hljs-built_in">tail</span> -f ~/logs/rocketmqlogs/broker.log</span> <br>  The broker[%s, 172.30.30.233:10911] boot success...<br></code></pre></td></tr></table></figure><h3 id="Send-amp-Receive-Messages"><a href="#Send-amp-Receive-Messages" class="headerlink" title="Send &amp; Receive Messages"></a>Send &amp; Receive Messages</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">export</span> NAMESRV_ADDR=localhost:9876</span><br><span class="hljs-meta prompt_"> &gt; </span><span class="language-bash">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br> SendResult [sendStatus=SEND_OK, msgId= ...<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> &gt; </span><span class="language-bash">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="hljs-meta prompt_"> ConsumeMessageThread_%</span><span class="language-bash">d Receive New Messages: [MessageExt...</span><br><br></code></pre></td></tr></table></figure><h3 id="Shutdown-Servers"><a href="#Shutdown-Servers" class="headerlink" title="Shutdown Servers"></a>Shutdown Servers</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">sh bin/mqshutdown broker</span><br>The mqbroker(36695) is running...<br>Send shutdown request to mqbroker(36695) OK<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">sh bin/mqshutdown namesrv</span><br>The mqnamesrv(36664) is running...<br>Send shutdown request to mqnamesrv(36664) OK<br></code></pre></td></tr></table></figure><h3 id="RocketMq-Console"><a href="#RocketMq-Console" class="headerlink" title="RocketMq Console"></a>RocketMq Console</h3><p>已更名为rocketmq-dashboard</p><h4 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">从GitHub上面拉取代码</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/apache/rocketmq-dashboard.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> rocketmq-dashboard</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">maven打包</span><br>mvn clean package -Dmaven.test.skip=true<br>java -jar target/rocketmq-dashboard-1.0.1-SNAPSHOT.jar<br><br>or<br><br>mvn spring-boot:run<br></code></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><blockquote><p><code>rocketmq-console/src/main/resources/application.properties</code></p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.address</span>=<span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># server.port=8080</span><br><span class="hljs-comment"># 我这里将8080改成19876了</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">19876</span><br><span class="hljs-comment"># …… </span><br><span class="hljs-comment"># 中间省略</span><br><span class="hljs-comment"># ………</span><br><span class="hljs-comment"># 这里是指定Nameserv,也可以不指定，在前端控制台进行指定</span><br><span class="hljs-attr">rocketmq.config.namesrvAddr</span>=<span class="hljs-string">localhost:9876</span><br><span class="hljs-comment"># …… </span><br><span class="hljs-comment"># 后续省略</span><br><span class="hljs-comment"># ………</span><br></code></pre></td></tr></table></figure><h4 id="RocketMq启动"><a href="#RocketMq启动" class="headerlink" title="RocketMq启动"></a>RocketMq启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">NettyServerConfig默认端口:10911<br>NameServer默认端口:9876<br><br><span class="hljs-comment"># rocketmq 启动路径</span><br>  /xdfapp/server/rocket/rocketmq-all-4.3.0/distribution/target/apache-rocketmq/bin<br><span class="hljs-comment"># 日志路径</span><br>  /root/logs/rocketmqlogs<br><br><span class="hljs-comment"># 启动NameServer</span><br><span class="hljs-built_in">nohup</span> ./mqnamesrv &amp;<br><span class="hljs-comment"># 启动Broker</span><br><span class="hljs-built_in">nohup</span> ./mqbroker -c ../conf/broker.conf &amp;<br><br><br><span class="hljs-comment"># broker.conf配置</span><br>brokerClusterName = DefaultCluster<br>brokerName = broker-a<br>brokerId = 0<br>deleteWhen = 04<br>fileReservedTime = 48<br>brokerRole = ASYNC_MASTER<br>flushDiskType = ASYNC_FLUSH<br>namesrvAddr=10.60.0.65:9876<br><span class="hljs-comment"># brokerIP1=10.60.0.65</span><br>autoCreateTopicEnable=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"># this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"># the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">#  See the License for the specific language governing permissions and</span><br><span class="hljs-comment">#  limitations under the License.</span><br><span class="hljs-attr">​</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 所属集群名字</span><br><span class="hljs-attr">brokerClusterName</span>=<span class="hljs-string">DefaultCluster</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,</span><br><span class="hljs-comment"># 在 broker-b.properties 使用: broker-b</span><br><span class="hljs-attr">brokerName</span>=<span class="hljs-string">broker-a</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 0 表示 Master，&gt; 0 表示 Slave</span><br><span class="hljs-attr">brokerId</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># nameServer地址，分号分割</span><br><span class="hljs-comment"># namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed</span><br><span class="hljs-comment"># 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP</span><br><span class="hljs-attr">brokerIP1</span>=<span class="hljs-string">192.168.200.129</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class="hljs-attr">defaultTopicQueueNums</span>=<span class="hljs-string">4</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 </span><br><span class="hljs-attr">autoCreateTopicEnable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class="hljs-attr">autoCreateSubscriptionGroup</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># Broker 对外服务的监听端口</span><br><span class="hljs-attr">listenPort</span>=<span class="hljs-string">10911</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 删除文件时间点，默认凌晨4点</span><br><span class="hljs-attr">deleteWhen</span>=<span class="hljs-string">04</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 文件保留时间，默认48小时</span><br><span class="hljs-attr">fileReservedTime</span>=<span class="hljs-string">120</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># commitLog 每个文件的大小默认1G</span><br><span class="hljs-attr">mapedFileSizeCommitLog</span>=<span class="hljs-string">1073741824</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整</span><br><span class="hljs-attr">mapedFileSizeConsumeQueue</span>=<span class="hljs-string">300000</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># destroyMapedFileIntervalForcibly=120000</span><br><span class="hljs-comment"># redeleteHangedFileInterval=120000</span><br><span class="hljs-comment"># 检测物理文件磁盘空间</span><br><span class="hljs-attr">diskMaxUsedSpaceRatio</span>=<span class="hljs-string">88</span><br><span class="hljs-comment"># 存储路径</span><br><span class="hljs-comment"># storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store</span><br><span class="hljs-comment"># commitLog 存储路径</span><br><span class="hljs-comment"># storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog</span><br><span class="hljs-comment"># 消费队列存储</span><br><span class="hljs-comment"># storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue</span><br><span class="hljs-comment"># 消息索引存储路径</span><br><span class="hljs-comment"># storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index</span><br><span class="hljs-comment"># checkpoint 文件存储路径</span><br><span class="hljs-comment"># storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint</span><br><span class="hljs-comment"># abort 文件存储路径</span><br><span class="hljs-comment"># abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort</span><br><span class="hljs-comment"># 限制的消息大小</span><br><span class="hljs-attr">maxMessageSize</span>=<span class="hljs-string">65536</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># flushCommitLogLeastPages=4</span><br><span class="hljs-comment"># flushConsumeQueueLeastPages=2</span><br><span class="hljs-comment"># flushCommitLogThoroughInterval=10000</span><br><span class="hljs-comment"># flushConsumeQueueThoroughInterval=60000</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># Broker 的角色</span><br><span class="hljs-comment"># - ASYNC_MASTER 异步复制Master</span><br><span class="hljs-comment"># - SYNC_MASTER 同步双写Master</span><br><span class="hljs-comment"># - SLAVE</span><br><span class="hljs-attr">brokerRole</span>=<span class="hljs-string">ASYNC_MASTER</span><br><span class="hljs-attr">​</span><br><span class="hljs-comment"># 刷盘方式</span><br><span class="hljs-comment"># - ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-comment"># - SYNC_FLUSH 同步刷盘</span><br><span class="hljs-attr">flushDiskType</span>=<span class="hljs-string">ASYNC_FLUSH</span><br><span class="hljs-comment"># 发消息线程池数量</span><br><span class="hljs-comment"># sendMessageThreadPoolNums=128</span><br><span class="hljs-comment"># 拉消息线程池数量</span><br><span class="hljs-comment"># pullMessageThreadPoolNums=128</span><br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/10/QxgpJy8Cm3WNwk7.jpg" alt="image-20220817173427156"></p><p>RocketMq使用</p><p>在消息存储方面使用顺序写</p><p>在消息发送方面使用零拷贝技术，少了从内核态到用户态的步骤，同时一次只能映射1.5G~2G的数据到虚拟内存，所以RocketMQ默认设置单个CommitLog日志数据文件大小为1G</p><p><img src="https://s2.loli.net/2023/03/10/bNj3m6HJsyxnYBM.jpg" alt="image-20220817175729240"></p><ul><li>CommitLog: 存储消息的元数据</li><li>ConsumerQueue: 存储消息在CommitLog的索引，按照消息的偏移量来查询消息</li><li>IndexFile: 提供了一种通过key或者时间区间查询消息的方法</li></ul><h3 id="刷盘机制"><a href="#刷盘机制" class="headerlink" title="刷盘机制"></a>刷盘机制</h3><blockquote><p>指的是消息从内存到磁盘</p></blockquote><ul><li>同步刷盘，保证数据不丢失</li><li><strong>异步刷盘，高吞吐量</strong></li></ul><p><img src="https://s2.loli.net/2023/03/10/rhSJ1lvDpHbVoiL.jpg" alt="image-20220817180635301"></p><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p><img src="https://s2.loli.net/2023/03/10/IiZFeSHBTpmPKaU.jpg" alt="image-20220817181308435"></p><h3 id="消息复制"><a href="#消息复制" class="headerlink" title="消息复制"></a>消息复制</h3><ul><li>同步复制，只有master把消息同步到slave，才通知用户写入成功</li><li>异步复制，只要master写入成功，就通知用户成功，可能出现消息的丢失</li><li>配置方式：broker.properties中的brokerRole<ul><li>ASYNC_MASTER 主节点，异步复制</li><li><strong>SYNC_MASTER 主节点，同步复制，保证消息不丢失</strong></li><li>SLAVE 从节点</li></ul></li></ul><p><img src="https://s2.loli.net/2023/03/10/r9lYobcH7K8MgSV.jpg" alt="image-20220817182127810"></p><p><font color=red><strong>建议：异步刷盘+主从同步复制</strong></font></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>生产者负载均衡：轮询发送，会平均落在不同的Broker的不同的Queue（同一个topic）</li></ul><p><img src="https://s2.loli.net/2023/03/10/Hl1xNTckQJhof52.jpg" alt="image-20220817184304881"></p><ul><li><p>消费者负载均衡</p><ul><li><p>集群模式，默认就实现了负载均衡，只需要增加消费者就可以达到负载的效果</p><blockquote><p><strong>在集群模式下，一个队列只允许分配给一个消费者，当消费者的数量比队列的数量还多的话，就会出现闲置的消费者</strong></p></blockquote><p>默认算法是：AllocateMessageQueueAveragely</p><p><img src="https://s2.loli.net/2023/03/10/ejiXAbv4hSdZgyY.jpg" alt="image-20220817184838450"></p><p>另一种算法是：AllocateMessageQueueAveragelyByCircle</p><p><img src="https://s2.loli.net/2023/03/10/Fow6VtbflWjJGxh.jpg" alt="image-20220817185045079"></p></li><li><p>广播模式</p><blockquote><p><strong>每一个消费者都会消费所有的队列，所有广播模式不属于负载均衡</strong></p></blockquote></li></ul></li></ul><p><img src="https://s2.loli.net/2023/03/10/9DWsk1NCojEmTAV.jpg" alt="image-20220817185816466"></p><h3 id="消息重试"><a href="#消息重试" class="headerlink" title="消息重试"></a>消息重试</h3><blockquote><p>指的是消费者消费消息失败后会重试</p></blockquote><ul><li><p>顺序消息的重试</p><blockquote><p><font color=red><strong>当出现消费失败的情况时，会无限次数重试(每隔1秒)，应及时进行处理，避免造成消费阻塞</strong></font></p></blockquote></li><li><p>无序消息的重试</p><blockquote><p>无序消息重试，只针对集群方式生效（默认最多重试16次），依然失败则进入死信队列，而广播模式没有重试机制</p></blockquote></li></ul><p>​<img src="https://s2.loli.net/2023/03/10/2oCREju9xP5QaBT.jpg" alt="image-20220817191627279"></p><p>无序消费的集群模式重试机制配置方式：</p><p>推荐使用：Action.ReconsumeLater;</p><p><img src="https://s2.loli.net/2023/03/10/OwzDmYHvNGIejco.jpg" alt="image-20220817192040478"></p><p>不想重试，配置如下</p><p><img src="https://s2.loli.net/2023/03/10/n8tFX5Ls1pABWic.jpg" alt="image-20220817192329498"></p><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><blockquote><p>当消息经过重试后依然失败，消息会被放入死信队列</p></blockquote><p>特征：</p><ul><li>不会再被消费者正常消费</li><li>有效期与正常消息相同，均为3天</li><li><strong>死信队列对应的是消费者组</strong>，该消费者组下面的所有topic都会放入同一个死信队列</li></ul><p>如何消费死信队列</p><ul><li>可以在控制台重新发送该消息</li><li>可以创建一个新的消费者，重新消费死信队列中的消息</li></ul><h3 id="生产者与生产者组"><a href="#生产者与生产者组" class="headerlink" title="生产者与生产者组"></a>生产者与生产者组</h3><blockquote><p>消息发送包括同步发送，异步发送，顺序发送，单向发送。</p><p>同步发送，发送过程中处于阻塞状态，直到broker返回消息确认</p><p>异步发送，同步异步回调来接收broker的消息确认</p><p>顺序发送，</p><p>单向发送，发过去就不管了，没有消息确认机制</p></blockquote><blockquote><p>生产者组，同一类Producer的集合，发送同一类消息且发送逻辑一致</p><p>使用场景：如果发送的是事务消息且发送消息之后生产者崩溃了，但事务还没有结束，此时broker会与生产者组的其他Producer完成整个事务的发送</p></blockquote><h3 id="消息生产与消费"><a href="#消息生产与消费" class="headerlink" title="消息生产与消费"></a>消息生产与消费</h3><ul><li><p>顺序消费</p><blockquote><p><font color=red><strong>生产者通过MessageQueueSelector实现，原理是对传递的参数进行取模或者hash运算，将需要排序的消息发往同一个队列</strong></font></p><p><font color=red><strong>当Broker推送消息到消费者时，消费者会通过一个orderly的监听器进行顺序消费</strong></font></p></blockquote></li><li><p>延迟消息</p><blockquote><p>消息生产者设置messageDelayLevel实现延迟消息，非商业版只能设置18个等级的messageDelayLevel，如下</p><p>原理：18个等级对应着18个延迟消费的队列（系统内置的延迟队列<strong>SCHEDULE_TOPIC_XXXX</strong>），延迟消息不是延迟发送，而是延迟消费</p><p>messageDelayLevel&#x3D;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p></blockquote></li><li><p>批量消息</p><blockquote><ul><li>将消息放到集合进行批量发送，但是批量的消息限制在4m以内</li><li>如果超出4M，可以使用<code>ListSpliter</code>进行拆分成小于4m的集合进行分批发送；同时设置Broker的接收限制为4M以内，即<code>broker.conf</code>中的<code>maxMessageSize</code></li><li>在生产者中的源码中<code>DefaultMQProducer</code>，已经设置了<code>maxMessageSize</code>的大小限制为4M</li></ul></blockquote><p><img src="https://s2.loli.net/2023/03/10/O1rJ5vXY67McPW4.jpg" alt="image-20220916075050844"></p></li><li><p>过滤消息</p><ul><li><p>Tag方式的过滤</p><blockquote><p>生产方对消息打上tag</p><p>消费方订阅带有指定tag的消息，实际上过滤是Broker做的</p><p>不适用复杂场景的过滤</p></blockquote></li><li><p>SQL表达式过滤</p><blockquote><p>生产方通过putUserProperty为消息设置各种键值对</p><p>消费方通过mq的sql表达式</p><p>同时设置<code>broker.conf</code>中的<code>enablePropertyFilter=true</code></p></blockquote></li></ul></li></ul><h3 id="消息的推和拉"><a href="#消息的推和拉" class="headerlink" title="消息的推和拉"></a>消息的推和拉</h3><ul><li><p>推模式</p><blockquote><p>推模式指的是broker将消息推给消费者，消费者通过监听器接收消息并消费；</p><p>大部分场景用的都是推模式</p><p>被动接收</p></blockquote></li><li><p>拉模式</p><blockquote><p>拉模式指的是消费者主动向broker拉取消息，编程起来相对复杂，但灵活性高，可以自定义拉去哪些消息</p><p>适用于消息的回溯，比如需要重新消费过去24小时的某些消息，可以使用拉模式</p><p>主动拉去</p></blockquote></li></ul><h3 id="消息幂等"><a href="#消息幂等" class="headerlink" title="消息幂等"></a>消息幂等</h3><p>当Broker或者客户端重启、扩缩容时，会触发Rebalance，重新进行负载均衡</p><p>通过业务唯一标识来保证幂等性</p><ul><li>将消费过的消息进行保存，每次消费之前去查一下，如已消费则直接丢弃</li><li>使用分布式锁，每次消费之前去获取锁，来判断是否已经消费过该消息</li></ul><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p><img src="https://s2.loli.net/2023/03/10/2Mftpvq8Wjzw53e.jpg" alt="rocketmq_architecture_1"></p><h4 id="NameServer作用"><a href="#NameServer作用" class="headerlink" title="NameServer作用"></a>NameServer作用</h4><blockquote><ul><li>Broker管理，集群中每一个NameServer节点都会保存一份完整Broker信息，同时，提供心跳检测Broker是否存活</li><li>RouteInfo管理，每个NameServer将保存关于Broker集群的整个路由信息和用于客户端查询的队列信息。</li></ul></blockquote><p><img src="https://s2.loli.net/2023/03/10/B6Rvt18AQrN9fhS.jpg" alt="rocketmq_architecture_2"></p><h4 id="BrokerServer作用"><a href="#BrokerServer作用" class="headerlink" title="BrokerServer作用"></a>BrokerServer作用</h4><blockquote><p>Broker主要负责消息的存储、投递和查询以及服务高可用保证</p></blockquote><h3 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h3><p><img src="https://s2.loli.net/2023/03/10/YSi9JgkOETop2tF.jpg" alt="rocketmq_architecture_3"></p><ul><li>NameServer是一个几乎无状态节点，可集群部署，节点之间无任何信息同步。</li><li>一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave 的对应关系通过指定相同的BrokerName</li><li>BrokerId为0表示Master，非0表示Slave</li><li>Broker与NameServer通过长连接定时注册RouteInfo到NameServer</li><li>&#x3D;&#x3D;<strong>当前RocketMQ版本在部署架构上支持一Master多Slave，但只有BrokerId&#x3D;1的从服务器才会参与消息的读负载。</strong>&#x3D;&#x3D;</li></ul><p>​<strong>Producer</strong></p><ul><li>Producer完全无状态</li><li>Producer与NameServer集群中的其中一个节点（随机选择）建立长连接</li><li>定期从NameServer获取Topic路由信息</li><li>Producer定期想Broker的Master节点发送心跳</li></ul><p>​<strong>Consumer</strong></p><ul><li>Consumer与NameServer集群中的其中一个节点（随机选择）建立长连接</li><li>定期从NameServer获取Topic路由信息</li><li>Consumer定期向Master、Slave发送心跳</li></ul><h3 id="消息存储"><a href="#消息存储" class="headerlink" title="消息存储"></a>消息存储</h3><p><img src="https://s2.loli.net/2023/03/10/OSrs3NIpVAaiLxX.jpg" alt="rocketmq_design_1"></p><p><strong>CommitLog</strong></p><ul><li>存放的是真正的消息内容</li><li>存储Producer端写入的消息主体内容</li><li>消息主要是顺序写入日志文件（文件长度20），00000000000000000000代表了第一个文件，起始偏移量为0，文件大小为1G&#x3D;1073741824；当第一个文件写满了，第二个文件为00000000001073741824，起始偏移量为1073741824，以此类推。</li></ul><p><strong>ConsumeQueue</strong></p><ul><li>存放的是消息的偏移量信息</li><li>ConsumeQueue是逻辑消费队列</li><li>Consumer可根据ConsumeQueue来查找待消费的消息</li><li>具体存储路径为：$HOME&#x2F;store&#x2F;consumequeue&#x2F;{topic}&#x2F;{queueId}&#x2F;{fileName}</li><li>文件中每一个条目共20个字节，分别为8字节的commitlog物理偏移量、4字节的消息长度、8字节tag hashcode</li><li>每个ConsumeQueue文件大小约5.72M</li></ul><p><strong>IndexFile</strong></p><ul><li>IndexFile（索引文件）**&#x3D;&#x3D;提供了一种可以通过key或时间区间来查询消息的方法&#x3D;&#x3D;**</li><li>Index文件的存储位置是：$HOME&#x2F;store&#x2F;index&#x2F;{fileName}，文件名fileName是以创建时的时间戳命名的</li><li>单个IndexFile文件大小约为400M</li><li>IndexFile的底层存储设计为HashMap结构</li></ul><p>Broker端的后台服务线程—ReputMessageService不停地分发请求并异步构建ConsumeQueue（逻辑消费队列）和IndexFile（索引文件）数据。</p><h3 id="页缓存与内存映射"><a href="#页缓存与内存映射" class="headerlink" title="页缓存与内存映射"></a>页缓存与内存映射</h3><p><strong>页缓存 PageCache</strong></p><ul><li>对于数据的写入，OS会先写入至Cache内，随后通过异步的方式由pdflush内核线程将Cache内的数据刷盘至物理磁盘上。</li><li>对于数据的读取，如果一次读取文件时出现未命中PageCache的情况，OS从物理磁盘上访问读取文件的同时，会顺序对其他相邻块的数据文件进行预读取。</li></ul><p><strong>内存映射</strong></p><ul><li>RocketMQ主要通过MappedByteBuffer对文件进行读写操作。即零拷贝技术</li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h3><h4 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a>负载均衡</h4><blockquote><p><code>org.apache.rocketmq.client.latency.MQFaultStrategy#selectOneMessageQueue</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 生产者是如何选择将消息发送到哪个队列的</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> MessageQueue <span class="hljs-title function_">selectOneMessageQueue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> TopicPublishInfo tpInfo, <span class="hljs-keyword">final</span> String lastBrokerName)</span> &#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sendLatencyFaultEnable) &#123;<br>         <span class="hljs-keyword">try</span> &#123;<br>             <span class="hljs-comment">// 去threadLocal获取index，保证线程之间的数据隔离</span><br>             <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> tpInfo.getSendWhichQueue().incrementAndGet();<br>             <span class="hljs-comment">// 遍历需要发送的队列</span><br>             <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tpInfo.getMessageQueueList().size(); i++) &#123;<br>                 <span class="hljs-comment">// 对index与队列总数进行取模</span><br>                 <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> Math.abs(index++) % tpInfo.getMessageQueueList().size();<br>                 <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span>)<br>                     pos = <span class="hljs-number">0</span>;<br>                 <span class="hljs-comment">// 确定要发送到哪个队列</span><br>                 <span class="hljs-type">MessageQueue</span> <span class="hljs-variable">mq</span> <span class="hljs-operator">=</span> tpInfo.getMessageQueueList().get(pos);<br>                 <span class="hljs-keyword">if</span> (latencyFaultTolerance.isAvailable(mq.getBrokerName()))<br>                     <span class="hljs-keyword">return</span> mq;<br>             &#125;<br><br>             <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">notBestBroker</span> <span class="hljs-operator">=</span> latencyFaultTolerance.pickOneAtLeast();<br>             <span class="hljs-type">int</span> <span class="hljs-variable">writeQueueNums</span> <span class="hljs-operator">=</span> tpInfo.getQueueIdByBroker(notBestBroker);<br>             <span class="hljs-keyword">if</span> (writeQueueNums &gt; <span class="hljs-number">0</span>) &#123;<br>                 <span class="hljs-keyword">final</span> <span class="hljs-type">MessageQueue</span> <span class="hljs-variable">mq</span> <span class="hljs-operator">=</span> tpInfo.selectOneMessageQueue();<br>                 <span class="hljs-keyword">if</span> (notBestBroker != <span class="hljs-literal">null</span>) &#123;<br>                     mq.setBrokerName(notBestBroker);<br>                     mq.setQueueId(tpInfo.getSendWhichQueue().incrementAndGet() % writeQueueNums);<br>                 &#125;<br>                 <span class="hljs-keyword">return</span> mq;<br>             &#125; <span class="hljs-keyword">else</span> &#123;<br>                 latencyFaultTolerance.remove(notBestBroker);<br>             &#125;<br>         &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>             log.error(<span class="hljs-string">&quot;Error occurred when selecting message queue&quot;</span>, e);<br>         &#125;<br><br>         <span class="hljs-keyword">return</span> tpInfo.selectOneMessageQueue();<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> tpInfo.selectOneMessageQueue(lastBrokerName);<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Middleware</tag>
      
      <tag>RocketMq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程总结</title>
    <link href="/2023/03/10/interview/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2023/03/10/interview/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程面试题总结"><a href="#多线程面试题总结" class="headerlink" title="多线程面试题总结"></a>多线程面试题总结</h1><h2 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h2><h3 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h3><ol><li><p>保证可见性</p><p><code>volatile</code> 关键字可以保证变量的可见性，如果我们将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，<strong>每次使用它都到主存中进行读取</strong>。</p></li><li><p>禁指令重排序</p><p>如果我们将变量声明为 <strong><code>volatile</code></strong> ，在对这个变量进行读写操作的时候，会通过插入特定的 <strong>内存屏障</strong> 的方式来禁止指令重排序。此外，如下方法也可以实现内存屏障，但会麻烦一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadFence</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">storeFence</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fullFence</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>不保证原子性</p><p>可以通过锁或者Atomic类保证原子性</p></li></ol><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p><strong>1、修饰实例方法</strong> （锁当前对象实例）</p><p><strong>2、修饰静态方法</strong> （锁当前类）</p><p><strong>3、修饰代码块</strong> （锁指定对象&#x2F;类）</p><p>对括号里指定的对象&#x2F;类加锁：</p><ul><li><code>synchronized(object)</code> 表示进入同步代码库前要获得 <strong>给定对象的锁</strong>。</li><li><code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>给定 Class 的锁</strong></li></ul><h3 id="synchronized-底层原理"><a href="#synchronized-底层原理" class="headerlink" title="synchronized 底层原理"></a>synchronized 底层原理</h3><p>synchronized 关键字底层原理属于 JVM 层面。</p><p><strong><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</strong></p><p><img src="https://s2.loli.net/2023/03/10/n8P2fiHQjsCmVT6.jpg" alt="synchronized-get-lock-code-block"></p><p><img src="https://s2.loli.net/2023/03/10/7kos5TiYeCX9d1v.jpg" alt="synchronized-release-lock-block"></p><p>多线程下 synchronized 的加锁就是对同一个对象的对象头中的 MarkWord 中的变量进行CAS操作。</p><p>锁可以升级，但不能降级。即：无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁是单向的。</p><p>&#x3D;&#x3D;&#x2F;&#x2F;TODO 锁升级过程待完善&#x3D;&#x3D;</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p><strong>ThreadLocal作用</strong>：对数据进行线程之间的隔离，每个线程都会有这个变量的本地副本。</p><p><strong>内存泄漏问题</strong></p><p><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的弱引用，而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。</p><p>这样一来，<code>ThreadLocalMap</code> 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。<code>ThreadLocalMap</code> 实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 <code>ThreadLocal</code>方法后 最好手动调用<code>remove()</code>方法</p><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><h4 id="ThreadPoolExecutor构造函数重要参数分析"><a href="#ThreadPoolExecutor构造函数重要参数分析" class="headerlink" title="ThreadPoolExecutor构造函数重要参数分析"></a><code>ThreadPoolExecutor</code>构造函数重要参数分析</h4><p><strong><code>ThreadPoolExecutor</code> 3 个最重要的参数：</strong></p><ul><li><strong><code>corePoolSize</code> :</strong> 核心线程数定义了最小可以同时运行的线程数量。</li><li><strong><code>maximumPoolSize</code> :</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><strong><code>workQueue</code>:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code>其他常见参数:</p><ol><li><strong><code>keepAliveTime</code></strong>:当线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁；</li><li><strong><code>unit</code></strong> : <code>keepAliveTime</code> 参数的时间单位。</li><li><strong><code>threadFactory</code></strong> :executor 创建新线程的时候会用到。</li><li><strong><code>handler</code></strong> :饱和策略。关于饱和策略下面单独介绍一下。</li></ol><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，<code>ThreadPoolTaskExecutor</code> 定义一些策略:</p><ul><li><strong><code>ThreadPoolExecutor.AbortPolicy</code>：</strong> 抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</li><li><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code>：</strong> 调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。<strong>建议使用这个策略</strong></li><li><strong><code>ThreadPoolExecutor.DiscardPolicy</code>：</strong> 不处理新任务，直接丢弃掉。</li><li><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：</strong> 此策略将丢弃最早的未处理的任务请求。</li></ul><p><img src="https://s2.loli.net/2023/03/10/ornjYsC5Gp9LwSb.jpg" alt="图解线程池实现原理.2b9eb21a"></p><h3 id="Atomic-原子类"><a href="#Atomic-原子类" class="headerlink" title="Atomic 原子类"></a>Atomic 原子类</h3><p><strong>AtomicInteger常用方法，其他类型类似</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> <span class="hljs-comment">//获取当前的值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> newValue)</span><span class="hljs-comment">//获取当前的值，并设置新的值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndIncrement</span><span class="hljs-params">()</span><span class="hljs-comment">//获取当前的值，并自增</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndDecrement</span><span class="hljs-params">()</span> <span class="hljs-comment">//获取当前的值，并自减</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAdd</span><span class="hljs-params">(<span class="hljs-type">int</span> delta)</span> <span class="hljs-comment">//获取当前的值，并加上预期的值</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSet</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> <span class="hljs-comment">//如果输入的数值等于预期值，则以原子方式将该值设置为输入值（update）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lazySet</span><span class="hljs-params">(<span class="hljs-type">int</span> newValue)</span><span class="hljs-comment">//最终设置为newValue,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</span><br></code></pre></td></tr></table></figure><p><strong>原子类的实现原理</strong></p><blockquote><p>原子性操作的实现是基于CAS，CAS底层依赖于Unsafe和volatile的能力</p></blockquote><p><strong>CAS存在的问题</strong></p><blockquote><p>CAS存在ABA问题，Java 提供了 AtomicStampedReference 工具类，通过为引用建立类似版本号（stamp）的方式，来保证 CAS 的正确性。</p><p>除了ABA问题CAS还要考虑限制自旋的次数，以免过度消耗 CPU</p></blockquote><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><h4 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h4><p>AQS 的全称为（<code>AbstractQueuedSynchronizer</code>），这个类在<code>java.util.concurrent.locks</code>包下面。</p><p><strong>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</strong></p><blockquote><p>CLH(Craig,Landin and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。</p></blockquote><p><img src="https://s2.loli.net/2023/03/10/r4tGHmvDcuhXokq.jpg" alt="AQS原理图"></p><h4 id="AQS-定义两种资源共享方式"><a href="#AQS-定义两种资源共享方式" class="headerlink" title="AQS 定义两种资源共享方式"></a>AQS 定义两种资源共享方式</h4><ul><li><p>Exclusive</p><p>（独占）：只有一个线程能执行，如ReentrantLock。又可分为公平锁和非公平锁：</p><ul><li>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁</li><li>非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的</li></ul></li><li><p><strong>Share</strong>（共享）：多个线程可同时执行，如<code> CountDownLatch</code>、<code>Semaphore</code>、 <code>CyclicBarrier</code>、<code>ReadWriteLock</code> 我们都会在后面讲到。</p></li></ul><h4 id="自定义同步器"><a href="#自定义同步器" class="headerlink" title="自定义同步器"></a>自定义同步器</h4><ol><li>使用者继承 <code>AbstractQueuedSynchronizer</code> 并重写指定的方法。</li><li>将 AQS 组合在自定义同步组件的实现中，并重写如下模板方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span><span class="hljs-comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span><span class="hljs-comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span><span class="hljs-comment">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span><span class="hljs-comment">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span><span class="hljs-comment">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span><br></code></pre></td></tr></table></figure><h4 id="ReentrantLock流程"><a href="#ReentrantLock流程" class="headerlink" title="ReentrantLock流程"></a>ReentrantLock流程</h4><p>以 <code>ReentrantLock</code> 为例，state 初始化为 0，表示未锁定状态。A 线程 <code>lock()</code> 时，会调用 <code>tryAcquire()</code> 独占该锁并将 <code>state+1</code> 。此后，其他线程再 <code>tryAcquire()</code> 时就会失败，直到 A 线程 <code>unlock()</code> 到 <code>state=</code>0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多少次，这样才能保证 state 是能回到零态的。</p><h4 id="CountDownLatch流程"><a href="#CountDownLatch流程" class="headerlink" title="CountDownLatch流程"></a>CountDownLatch流程</h4><p>再以 <code>CountDownLatch</code> 以例，任务分为 N 个子线程去执行，state 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后<code> countDown()</code> 一次，state 会 CAS(Compare and Swap) 减 1。等到所有子线程都执行完后(即 <code>state=0</code> )，会 <code>unpark()</code> 主调用线程，然后主调用线程就会从 <code>await()</code> 函数返回，继续后余动作。不能循环使用</p><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p><strong><code>CyclicBarrier</code>(循环栅栏)：</strong> <code>CyclicBarrier</code> 和 <code>CountDownLatch</code> 非常类似，它也可以实现线程间的技术等待，但是它的功能比 <code>CountDownLatch</code> 更加复杂和强大。主要应用场景和 <code>CountDownLatch</code> 类似。可以通过reset方法循环使用</p><h3 id="JMM（Java-内存模型）详解"><a href="#JMM（Java-内存模型）详解" class="headerlink" title="JMM（Java 内存模型）详解"></a>JMM（Java 内存模型）详解</h3><h4 id="CPU缓存模型"><a href="#CPU缓存模型" class="headerlink" title="CPU缓存模型"></a>CPU缓存模型</h4><p><img src="https://s2.loli.net/2023/03/10/Rp2nqjQDhvaB4KA.jpg" alt="cpu-cache-protocol"></p><h4 id="JMM内存模型"><a href="#JMM内存模型" class="headerlink" title="JMM内存模型"></a>JMM内存模型</h4><blockquote><p>JMM 说白了就是定义了一些规范来解决这些问题，开发者可以利用这些规范更方便地开发多线程程序。主要目的是为了简化多线程编程，增强程序可移植性的。</p></blockquote><p><img src="https://s2.loli.net/2023/03/10/p8GyA3uQXfZSkMC.jpg" alt="jmm"></p>]]></content>
    
    
    <categories>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Interview</tag>
      
      <tag>MultiThread</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM总结</title>
    <link href="/2023/03/09/Java/JVM/JVM/"/>
    <url>/2023/03/09/Java/JVM/JVM/</url>
    
    <content type="html"><![CDATA[<h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><h4 id="多语言混合编程"><a href="#多语言混合编程" class="headerlink" title="多语言混合编程"></a>多语言混合编程</h4><blockquote><p>jvm不仅仅能解释运行java程序，只要是编译后的字节码文件遵循jvm规范的语言都能被jvm执行。</p><p>JVM正在从<strong>Java语言的虚拟机</strong>向<strong>多语言虚拟机</strong>的方向发展，不同语言解决自己擅长的领域，最后全部使用JVM解释执行。</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/gnI6OTfP1L4lECw.jpg" alt="image-20210926133526129"></p><h4 id="JVM种类"><a href="#JVM种类" class="headerlink" title="JVM种类"></a>JVM种类</h4><ul><li><p>HotSpot</p></li><li><p>JRockit</p></li><li><p>IBM的J9</p></li><li><p>Graal VM</p><blockquote><p><strong>未来有可能会替代HotSpot虚拟机</strong></p></blockquote></li></ul><p><img src="https://s2.loli.net/2023/03/09/ckEuPTBrbQO1FsG.jpg" alt="image-20210926140425823"></p><ul><li>前端编译器</li><li>JIT后端编译器<ul><li>将热点代码的字节码编译为机器指令，并缓存起来，提升执行性能</li></ul></li><li>解释器<ul><li>逐行解释执行，保证程序的响应时间</li></ul></li></ul><h4 id="JVM的架构模型"><a href="#JVM的架构模型" class="headerlink" title="JVM的架构模型"></a>JVM的架构模型</h4><blockquote><p>JVM采用的是基于栈的指令集架构，另外一种架构是基于寄存器的指令集架构</p></blockquote><ul><li><p>基于栈式的架构特点</p><ul><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题，使用<strong>零地址</strong>指令方式分配</li><li>指令流中的指令大部分是零地址指令（每8位字节对齐），其执行过程依赖于操作栈。指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul></li><li><p>基于寄存器架构的特点</p><ul><li>指令集架构则完全依赖硬件，可移植性差</li><li>16位双字节的方式对齐</li><li>性能优秀和执行更高效</li><li>花费更少的指令去完成操作</li><li>指令集往往是一地址指令、二地址指令和三地址指令为主</li></ul></li></ul><p>&#x3D;&#x3D;由于跨平台性的设计，Java的指令都是根据栈来设计的。&#x3D;&#x3D;不同平台CPU架构不同，所以不能设计为基于寄存器的。</p><h4 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h4><ul><li><p>虚拟机的启动</p><blockquote><p>Java虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类来完成的，这个类是由虚拟机的具体实现指定的。</p></blockquote></li><li><p>虚拟机的执行</p><blockquote><p>执行一个所谓的Java程序的时候，真正执行的是一个叫做Java虚拟机的进程。</p></blockquote></li><li><p>虚拟机的退出</p><blockquote><ol><li>正常退出</li><li>异常退出</li></ol></blockquote></li></ul><h4 id="类加载器子系统"><a href="#类加载器子系统" class="headerlink" title="类加载器子系统"></a>类加载器子系统</h4><blockquote><ul><li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由执行引擎Execution Engine决定。</li><li>加载的类信息存放于一块称为&#x3D;&#x3D;方法区&#x3D;&#x3D;的内存空间。除了类的信息外，方法区中还会存放运行时常量池，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射），即将磁盘上的class文件加载到内存中，生成对应的运行时数据。</li><li>class文件通过二进制流的方式加载到JVM中，被称为DNA元数据模板，放在方法区。</li></ul></blockquote><pre><code class=" mermaid">graph LR字节码文件 .-&gt; 加载 --&gt; 验证subgraph 链接验证 --&gt; 准备 --&gt; 解析end解析 --&gt; 初始化</code></pre><ul><li><p>加载 Loading</p><blockquote><ol><li>通过一个类的全限定名获取定义此类的二进制流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ol></blockquote></li><li><p>链接</p><ul><li>验证 Verify：验证class文件的合法性</li><li>准备 Prepare<ul><li>为类变量初始化零值（int就是0，boolean就是FALSE…）</li><li>final修饰类变量在编译的时候就会隐式初始化了，在准备阶段会显示初始化为具体的值</li><li>这里<font color=red>不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量会随着对象一起分配到Java堆中；<strong>1.7以后都放入到堆中了</strong></font></li></ul></li><li>解析 Resolve<ul><li>将常量池内的符号引用转换为直接引用的过程</li><li><font color=red>通常情况下解析动作都是在初始化之后完成的</font></li></ul></li></ul></li><li><p>初始化</p><ul><li><font color=red>初始化阶段就是执行类构造器方法<code>&lt;clinit&gt;()</code>的过程</font></li><li>此方法不需要定义，是javac编译器自动收集类中的所有<strong>类变量的赋值动作</strong>和<strong>静态代码块中的语句</strong>合并而来</li><li>构造器方法中指令按语句在源文件中出现的<strong>顺序执行</strong></li><li><code>&lt;clinit&gt;()</code>不同于类的构造器（<font color=red>类构造器在字节码中对应<code>&lt;init&gt;()</code></font>）。它是虚拟机视角下的<code>&lt;init&gt;()</code></li><li>若存在父类，JVM保证父类的clinit先执行完</li><li>虚拟机保证clinit在多线程下被同步加锁</li></ul></li></ul><blockquote><p>总结：</p><p>编译期：隐式初始化final修饰类变量</p><p>链接阶段：</p><ul><li>准备：</li></ul></blockquote><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><pre><code class=" mermaid">graph BT自定义类加载器1[User Defined Class Loader1] --&gt; 系统类加载器自定义类加载器2[User Defined Class Loader2] --&gt; 系统类加载器自定义类加载器3[User Defined Class Loader3] --&gt; 系统类加载器系统类加载器[System Class Loader] --&gt; 扩展类加载器[Extension Class Loader] --&gt; 引导类加载器[Bootstrap Class Loader]  </code></pre><p><font color=red>这里的的四者之间的关系是包含。不是上下层也不是继承关系</font></p><ul><li>引导类加载器<ul><li><font color=red>使用C&#x2F;C++语言实现</font>，嵌套在JVM内部</li><li><strong>只</strong>用来加载Java的核心类库，加载包名为java、javax、sun等开头的类</li><li>并不继承java.lang.ClassLoader，没有父加载器</li><li>负责加载扩展类和系统类加载器，并指定为他们的父加载器</li></ul></li><li>扩展类加载器（Extension ClassLoader）<ul><li>java语言编写，继承于ClassLoader类</li><li>主要加载jre&#x2F;lib&#x2F;ext子目录下的类库，<strong>如果用户创建的jar放在此目录，也会由扩展类加载器加载</strong></li></ul></li><li>系统类加载器（APPClassLoader）<ul><li><strong>是自定义类的默认类加载器</strong></li></ul></li><li>自定义类加载器<ul><li>为什么需要自定义加载器？<ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul></li><li>如何自定义类加载器<ul><li>继承抽象类java.lang.ClassLoader并重写findClass()</li><li><strong>如果没有过于复杂的需求，可以直接继承URLClassLoader类</strong>，这样就不用去编写findClass方法了</li></ul></li></ul></li></ul><h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><blockquote><p>Java虚拟机对class文件采用的是<font color=red>按需加载</font>的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是<font color=red>双亲委派机制</font>，即把请求交由父类处理，它是一种任务委派模式。</p></blockquote><p><strong>工作原理</strong></p><blockquote><p>如果一个类的加载器收到了类加载请求，它并不会立即去加载，而是一直向上委托，一直到系统类加载器，如果属于系统类加载器管辖的范畴，则系统类来加载，如果不是，则会继续向下委托，直到找到合适的类加载器为止</p></blockquote><p><strong>好处</strong></p><ul><li>避免类的重复加载</li><li>防止核心API被随意篡改</li></ul><pre><code class=" mermaid">graph BT自定义类加载器1[User Defined Class Loader1] &amp; 自定义类加载器2[User Defined Class Loader2] &amp; 自定义类加载器3[User Defined Class Loader3] --&gt;|向上委托| 系统类加载器--&gt;|向上委托| 扩展类加载器[Extension Class Loader] --&gt;|向上委托| 引导类加载器[Bootstrap Class Loader] --&gt;|向下加载| 扩展类加载器[Extension Class Loader]--&gt;|向下加载|系统类加载器[System Class Loader] </code></pre><p>在JVM中表示两个class对象是否为同一个类存在两个必要条件：</p><ul><li>类的完整类名必须一直，包括包名</li><li>加载这个类的ClassLoader必须相同</li></ul><p>JVM必须知道一个类是由启动类加载器加载的还是由用户类加载器加载的。&#x3D;&#x3D;如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。&#x3D;&#x3D;当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p><h4 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h4><h4 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h4><p>虚拟机在加载Class文件时才会进行动态链接，也就是说，Class文件中不会保存各个方法和字段的最终内存布局信息，因此，这些字段和方法的符号引用不经过转换是无法直接被虚拟机使用的。&#x3D;&#x3D;当虚拟机运行时，需要从常量池中获得对应的符号引用，再在类加载过程中的<font color=red>解析阶段</font>将其替换为直接引用，并翻译到具体的内存地址中。&#x3D;&#x3D;</p><ul><li>符号引用：符号引用以一组符号来描述所引用的目标，符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到了内存中</li><li>直接引用：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用与虚拟机实现的内存布局相关，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定已经存在于内存之中了。</li></ul><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><h4 id="PC计数器"><a href="#PC计数器" class="headerlink" title="PC计数器"></a>PC计数器</h4><blockquote><p>Program Counter Register，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。</p><p><strong>PC寄存器用于存储指向下一条指令的地址</strong>，即即将要执行的指令代码。由执行引擎读取下一条指令。</p><p>它是一块很小的内存空间，几乎可以忽略不计，也是运行速度最快的存储区域。</p><p>每个线程都有自己的程序计数器，是<strong>线程私有的</strong>，生命周期与线程的生命周期保持一致</p><p>它是唯一一个不存在OOM的区域。</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/1vWIqFaYSOHkt5C.jpg" alt="pcregister"></p><p>面试题：</p><ol><li><p>为什么使用PC寄存器记录当前线程的执行地址呢？</p><blockquote><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪里开始继续执行</p></blockquote></li><li><p>PC寄存器为什么是线程私有的？</p><blockquote><p>为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法就是为每一个线程都分配一个PC寄存器。</p></blockquote></li></ol><h4 id="虚拟机栈-Stack"><a href="#虚拟机栈-Stack" class="headerlink" title="虚拟机栈 Stack"></a>虚拟机栈 Stack</h4><p>&#x3D;&#x3D;栈式运行时的单位，而堆是存储的单位。&#x3D;&#x3D;</p><p>每个线程在创建的过程中都会创建一个虚拟机栈，其内部保存着一个一个的栈帧（Stack Frame），每个栈帧对应着一个方法，线程私有的，生命周期与线程一致。栈是一种快速有效的分配存储地址，访问速度仅次于程序计数器。只有入栈和出栈操作。主管程序运行，它保存方法的局部变量（8种基本数据类型和对象的引用地址）和部分结果，并参与方法的调用与返回。局部变量 VS 成员变量（属性）基本类型变量 VS 引用类型变量（类&#x2F;数组&#x2F;接口）栈不存在GC，存在StackOverFlow，当系统内存满了会出现OOM。-Xss 设置栈的大小</p><p>Java方法有两种返回函数的形式，一种是正常的函数返回，使用return指令；另外一种是抛出异常，不管哪种方式都会导致栈帧被弹出。LV Local Variables 局部变量表主要存储方法参数和定义在方法体内的局部变量，这些数据类型包括8种基本数据类型，对象引用（reference），以及returnAddress类型局部变量表存储结构是一个存储数字的数组，所以大小在编译期就确定下来了局部变量表中的变量只在当前方法调用中有效。当方法调用结束后，随着方法栈帧的销毁而销毁。存储在栈上，不存在线程安全的问题Slot（槽）是局部变量表最基本的存储单元，32位占一个槽（int byte 引用类型等），64位占两个槽（long double）非静态方法的局部变量表的第0位存储的是thisOS Operand Stack 操作数栈操作数栈指的是在方法执行过程中，根据字节码指令向栈中写入数据或提取数据，即入栈Push&#x2F;出栈Pop<strong>主要存放计算过程中的中间结果，作为计算过程中的临时存储空间</strong>。比如push操作就是将数据压入到操作数栈，然后通过store操作将操作数栈中的数据存储到局部变量表中，load操作就是把局部变量表的值加载到操作数栈中用于计算使用数组结构实现，但是只能通过入栈出栈的方式来访问数据，不能直接通过索引访问数据操作数栈栈的深度在编译期就确定好了如果被调用的方法存在返回值，其返回值也会压入到当前栈帧的操作数栈中，并更新PC寄存器下一条需要执行的字节码指令偏移量。JVM的解释引擎是基于栈的执行引擎，其中的栈指的是操作数栈。DL Dynamic Linking 动态链接 指向运行时常量池的方法引用RA Return Address 方法返回地址  当某方法执行结束后会出栈，出栈的同时将PC存放寄存器的值存放到方法返回地址中一些附加信息<br>栈空间不存在GC，当栈空间是固定值时，栈内存用完后会出现内存溢出，会报异常StackOverFlow；当栈的空间是可扩展的情况，所有内存被用光后会出现OutofMemery；</p><h5 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h5><ul><li><p>静态链接</p><p>当一个字节码文件被装载进JVM内部时，如果<strong>被调用的目标方法在编译期可知，且运行期保持不变</strong>。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p></li><li><p>动态链接</p><p>如果被调用的方法在编译期无法确定下来，称之为动态链接</p></li></ul><p>绑定是一个字段、方法或者类的符号引用被替换为直接引用的过程，这<strong>仅仅发生一次</strong>。分为早起绑定（对应静态链接）和晚期绑定（对应动态链接）</p><h5 id="JVM中的线程种类"><a href="#JVM中的线程种类" class="headerlink" title="JVM中的线程种类"></a>JVM中的线程种类</h5><ul><li>虚拟机线程</li><li>周期任务线程</li><li>GC线程</li><li>编译线程：这种线程会在运行时会将字节码编译成本地代码</li><li>信号调度线程</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM——执行引擎</title>
    <link href="/2023/03/09/Java/JVM/JVM%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    <url>/2023/03/09/Java/JVM/JVM%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM——执行引擎"><a href="#JVM——执行引擎" class="headerlink" title="JVM——执行引擎"></a>JVM——执行引擎</h1><p><img src="https://s2.loli.net/2023/03/09/LH9vR7l5rtcWXQs.jpg" alt="Screen Shot 2021-01-20 at 8.50.29 PM"></p><p><strong>本地方法接口（JNI）</strong></p><p>本地方法：非Java语言编写的方法</p><p>为什么要使用本地方法？</p><ul><li>Java需要与外面的环境进行交互</li><li>有些层次的任务用Java实现起来不容易，或者对效率很在意</li><li>与操作系统交互，操作系统用c语言实现</li><li>Sun’s Java，Sun的解释器使用c语言实现的</li></ul><p>本地方法库：C语言编写的</p><p>为什么Java是半解释半编译型语言？</p><p>JVM可以自由选择是通过解释器或者JIT编译器去执行程序。现在JVM在执行Java代码通常会将解释执行与编译执行结合起来进行。</p><p>什么是解释器（Interpreter），什么是JIT编译器？</p><p>解释器：对字节码采用逐行解释的方式执行</p><p>JIT（Just In Time Compiler）编译器：虚拟机将源代码直接编译成和本地机器平台相关的机器语言，将机器指令缓存起来一次性执行。</p><p><strong>JIT编译器效率高，为什么还需要解释器呢？</strong></p><p>他们各有所长，解释器响应速度快，编译器执行效率高。</p><p>当虚拟机启动时，解释器首先发挥作用，而不必等待及时编译器全部编译完成再执行，这样可以省去许多不必要的编译时间。并且随着程序运行时间的推移，及时编译器逐渐发挥作用，根据热点探测功能，将有价值的字节码编译为本地机器指令，以换取更高的程序执行效率。</p><p>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。</p><p><strong>Hotspot VM设置执行方式</strong></p><ul><li>-Xint：完全采用解释器执行</li><li>-Xcomp：完全采用JIT编译器执行</li><li>-Xmixed：采用混合模式</li></ul><p>如何选择采用解释器还是JIT编译器？</p><ul><li>JIT编译器</li><li><ul><li>执行频率高的热点代码</li><li>基于计数器的热点探测</li><li><ul><li>方法调用计数器，用于统计方法调用次数，默认阈值：client模式下是1500次，server模式下是10000次，可以通过-XX:CompileThreshold设置</li><li>回边计数器，用于统计循环体执行的循环次数</li></ul></li><li>热度衰减</li><li><ul><li></li></ul></li></ul></li><li></li></ul><p>JIT编译器分为Client Compiler和Server Compiler和Graal</p><ul><li>-client：C1编译器会对字节码进行简单可靠的优化，耗时短。</li><li>-server：C2对字节码优化的更深，耗时长，以及激进化。主要基于逃逸分析（标量替换，栈上分配，同步消除）的基础进行优化。</li><li>自JDK10起，HotSpot加入了Graal模式。</li></ul><p><strong>JDK9引入了AOT编译器（静态编译器，Ahead Of Time Compiler），与JIT是同类</strong></p><ul><li>优点：AOT编译器是在Java代码编译class字节码之后，通过jaotc工具将class文件进行提前编译，大大降低了程序启动时候的时间（.java—&gt;.class—&gt;.so）</li><li>缺点：破坏了Java“一次编译，到处运行”；降低了Java链接过程的动态性</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka学习笔记</title>
    <link href="/2023/03/09/Middleware/MessageQueue/Kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/09/Middleware/MessageQueue/Kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Kafka学习笔记"><a href="#Kafka学习笔记" class="headerlink" title="Kafka学习笔记"></a>Kafka学习笔记</h1><ul><li><p>安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install kafka<br></code></pre></td></tr></table></figure></li><li><p>启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动zk 脚本位于/usr/local/opt/kafka/bin/</span><br>zookeeper-server-start -daemon /usr/local/etc/kafka/zookeeper.properties<br><br><span class="hljs-comment"># 启动kafka 脚本位于/usr/local/opt/kafka/bin/ </span><br>kafka-server-start -daemon  /usr/local/etc/kafka/server.properties<br></code></pre></td></tr></table></figure></li><li><p>创建topic与查看主题信息</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建topic</span><br>kafka-topics --create --topic quickstart-events --bootstrap-server localhost:9092<br><br><span class="hljs-comment"># 2.2以下使用 如下命令，基本已弃用</span><br>kafka-topics --create --topic test-events --zookeeper localhost:2181<br><br><span class="hljs-comment"># 参数说明</span><br><span class="hljs-comment"># kafka节点，集群用逗号隔开</span><br>--bootstrap-server localhost:9092<br><span class="hljs-comment"># 副本数</span><br>--replication-factor 1 <br><span class="hljs-comment"># 指定分区</span><br>--partitions 1<br><br><span class="hljs-comment"># 查看topic信息</span><br>kafka-topics --describe --topic quickstart-events --bootstrap-server localhost:9092<br><br><span class="hljs-comment"># topic信息如下</span><br>Topic: quickstart-eventsTopicId: ldMRGNAoQGOcN0xwH9iZkQPartitionCount: 1ReplicationFactor: 1Configs: segment.bytes=1073741824<br>Topic: quickstart-eventsPartition: 0Leader: 0Replicas: 0Isr: 0<br><br><span class="hljs-comment"># 查看主题列表</span><br>kafka-topics --list --bootstrap-server localhost:9092<br><br><span class="hljs-comment"># 删除主题，不能直接在zk客户端删除，删除后，通过命令还是查询到主题，而且用下面的命令删除会出现异常</span><br>kafka-topics --bootstrap-server localhost:9092 --topic mytest --delete<br></code></pre></td></tr></table></figure></li><li><p>生产消息</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Ctrl+C 取消生产</span><br>➜  ~ kafka-console-producer --topic quickstart-events --bootstrap-server localhost:9092<br>&gt;This is my first event<br>&gt;This is my second event<br><br><br>kafka-console-producer --topic quickstart-events --bootstrap-server 10.60.0.65:6667<br></code></pre></td></tr></table></figure><blockquote><p>当topic存在多个分区时，同时发送的时候没有指定分区，则根据hash算法计算投递到哪个分区，hash(key)%partitionNum，因此保证消息有序性可以通过相同的key来保证</p><p>也可以通过指定partition保证有序性</p></blockquote></li><li><p>生产者同步发送与异步发送</p><p>同步发送，需要等待kafka的ack通知</p><p>异步发送，kafka收到消息后会通过callback通知生产者，&#x3D;&#x3D;<strong>会存在消息丢失</strong>&#x3D;&#x3D;</p><ul><li><p>同步发送的ack配置</p><blockquote><p>ack&#x3D;0 无需任何Broker接收到消息，立刻返回ack</p><p>ack&#x3D;1 多副本的Leader已经收到消息并且数据已经写到本地磁盘，返回ack</p><p>ack&#x3D;-1 集群中所有的Broker都收到了消息并写入磁盘，返回ack</p></blockquote><p>同步的副本数据配置：min.insync.replicas(默认是1，推荐配置大于等于2)，Leader和Follower都算副本</p></li></ul></li><li><p>生产者将消息发送到Broker，并保存到磁盘<code>/usr/local/var/lib/kafka-logs/topic-partition/00000000000000000000.log</code></p></li><li><p>消费消息</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 该命令不会删除消息</span><br><span class="hljs-comment"># 从头消费</span><br>kafka-console-consumer --topic quickstart-events --from-beginning --bootstrap-server localhost:9092<br><br><span class="hljs-comment"># 从offset+1开始消费</span><br>kafka-console-consumer --topic quickstart-events --bootstrap-server localhost:9092<br></code></pre></td></tr></table></figure></li><li><p>消费者自动提交和手动提交offset</p><ol><li>自动提交：消息被消费者poll下来就立即提交offset，会丢消息</li><li>手动提交：消费者消费消息时&#x2F;后，手动提交offset<ul><li>手动同步提交：提交offset后，需要等到Broker确认后返回ack，才能继续向下执行</li><li>手动异步提交：提分offset后，无需等待Broker确认，Broker会通过回调onComplete通知消费者</li></ul></li></ol></li></ul><p>&#x3D;&#x3D;<strong>前者是老版本的用法，0.8以前的kafka，消费的进度(offset)是写在zk中的，所以consumer需要知道zk的地址。后来的版本都统一由broker管理，所以就用bootstrap-server了。</strong>&#x3D;&#x3D;</p><h3 id="单播消息"><a href="#单播消息" class="headerlink" title="单播消息"></a>单播消息</h3><blockquote><p>同一个消费者组中的消费者，只能有一个能接收到同一个topic生产者发送过来的消息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kafka-console-consumer --topic quickstart-events --bootstrap-server localhost:9092 --consumer-property group.id=testGroup <br></code></pre></td></tr></table></figure><h3 id="多播消息"><a href="#多播消息" class="headerlink" title="多播消息"></a>多播消息</h3><blockquote><p>不同的消费者组订阅同一个topic，那么不同的消费者组中只有一个消费者能收到消息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">kafka-console-consumer --topic quickstart-events --bootstrap-server localhost:9092 --consumer-property group.id=testGroup1 <br><br>kafka-console-consumer --topic quickstart-events --bootstrap-server localhost:9092 --consumer-property group.id=testGroup2 <br></code></pre></td></tr></table></figure><h3 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看消费者组列表</span><br>kafka-consumer-groups --bootstrap-server localhost:9092 --list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出如下</span><br>testGroup<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看某个消费者组的信息</span><br>kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group testGroup<br><span class="hljs-meta prompt_"># </span><span class="language-bash">输出如下</span><br>GROUP           TOPIC             PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID                                           HOST            CLIENT-ID<br>testGroup       quickstart-events 0          28              28              0               console-consumer-e63230ea-d567-4a2a-8b9c-eb7e0636d9e4 /127.0.0.1      console-consumer<br><span class="hljs-meta prompt_"># </span><span class="language-bash">消费者宕掉的输出</span><br>GROUP           TOPIC             PARTITION  CURRENT-OFFSET  LOG-END-OFFSET  LAG             CONSUMER-ID     HOST            CLIENT-ID<br>testGroup       quickstart-events 0          28              37              9               -               -               -<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">CURRENT-OFFSET 当前已消费的offset位置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">LOG-END-OFFSET 最新消息所在的offset位置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">LAG 有多少条消费未消费</span><br></code></pre></td></tr></table></figure><h3 id="主题和分区"><a href="#主题和分区" class="headerlink" title="主题和分区"></a>主题和分区</h3><ol><li>主题topic的作用是将消息分类，根据不同的场景将消息分类存储</li><li>因为kafka的消息时存储在log文件中，如果不进行分区，文件会越来越大，会导致查询和迁移数据十分困难，分区的作用是为了拆分文件，同时分区还能提高读写的吞吐量</li></ol><h3 id="kafka默认主题"><a href="#kafka默认主题" class="headerlink" title="kafka默认主题"></a>kafka默认主题</h3><p>kafka会自动创建一个<code>__consumer_offsets</code>的主题，该主题的作用是记录其他主题的offset</p><ul><li>默认50个分区（可修改），提高并发</li><li>消费者消费消息后会上报offset</li><li>提交到哪个分区是根据hash算法实现，hash(consumerGroupId)%__consumer_offsets分区数</li><li>提交的内容是，key:consumerGroupId+topic+partition，value:当前offset的值</li></ul><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><h4 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h4><p>监控到 Lag 越来越大，说明消费者程序变得越来越慢了，至少是追不上生产者程序了</p><p>一旦你监测到 Lead 越来越小，甚至是快接近于 0 了，你就一定要小心了，这可能预示着消费者端要丢消息了（因为消息保存有时限，说明消息最近一直未被消费）。</p><p><img src="https://s2.loli.net/2023/03/09/7FOBbu4iAZQ5R9f.jpg" alt="image-20220706193410314"></p><h4 id="Kafka-eagle"><a href="#Kafka-eagle" class="headerlink" title="Kafka-eagle"></a>Kafka-eagle</h4><ol><li><p>下载地址：<a href="http://download.kafka-eagle.org/">http://download.kafka-eagle.org/</a></p></li><li><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;export KE_HOME=/Users/unclebryan/DevTools/efak-web-2.1.0&#x27; &gt;&gt; ~/.zshrc<br>echo &#x27;export PATH=$PATH:$KE_HOME/bin&#x27; &gt;&gt; ~/.zshrc<br>source ~/.zshrc<br></code></pre></td></tr></table></figure></li><li><p>修改配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 修改zk配置</span><br><span class="hljs-attr">efak.zk.cluster.alias</span>=<span class="hljs-string">cluster1</span><br><span class="hljs-attr">cluster1.zk.list</span>=<span class="hljs-string">localhost:2181</span><br><span class="hljs-comment">#修改mysql配置 数据库会自动创建</span><br><span class="hljs-attr">efak.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">efak.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="hljs-attr">efak.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">efak.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ke.sh start<br><br>* EFAK Service has started success.<br>* Welcome, Now you can visit &#x27;http://192.168.0.172:8048&#x27;<br>* Account:admin ,Password:123456<br></code></pre></td></tr></table></figure></li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>kafka全局配置 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;kafka&#x2F;server.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">broker.id</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"># The address the socket server listens on. If not configured, the host name will be equal to the value of</span><br><span class="hljs-comment"># java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.</span><br><span class="hljs-comment">#   FORMAT:</span><br><span class="hljs-comment">#     listeners = listener_name://host_name:port</span><br><span class="hljs-comment">#   EXAMPLE:</span><br><span class="hljs-comment">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="hljs-comment">#listeners=PLAINTEXT://:9092</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The number of threads that the server uses for receiving requests from the network and sending responses to the network</span><br><span class="hljs-attr">num.network.threads</span>=<span class="hljs-string">3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The number of threads that the server uses for processing requests, which may include disk I/O</span><br><span class="hljs-attr">num.io.threads</span>=<span class="hljs-string">8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The send buffer (SO_SNDBUF) used by the socket server</span><br><span class="hljs-attr">socket.send.buffer.bytes</span>=<span class="hljs-string">102400</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The receive buffer (SO_RCVBUF) used by the socket server</span><br><span class="hljs-attr">socket.receive.buffer.bytes</span>=<span class="hljs-string">102400</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The maximum size of a request that the socket server will accept (protection against OOM)</span><br><span class="hljs-attr">socket.request.max.bytes</span>=<span class="hljs-string">104857600</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 消息存储目录</span><br><span class="hljs-attr">log.dirs</span>=<span class="hljs-string">/usr/local/var/lib/kafka-logs</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># the brokers.</span><br><span class="hljs-attr">num.partitions</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">num.recovery.threads.per.data.dir</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 副本数</span><br><span class="hljs-attr">offsets.topic.replication.factor</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">transaction.state.log.replication.factor</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">transaction.state.log.min.isr</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The number of messages to accept before forcing a flush of data to disk</span><br><span class="hljs-comment">#log.flush.interval.messages=10000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The maximum amount of time a message can sit in a log before we force a flush</span><br><span class="hljs-comment">#log.flush.interval.ms=1000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 消息保存的时间限制，超出后会删除</span><br><span class="hljs-attr">log.retention.hours</span>=<span class="hljs-string">168</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># A size-based retention policy for logs. Segments are pruned from the log unless the remaining</span><br><span class="hljs-comment"># segments drop below log.retention.bytes. Functions independently of log.retention.hours.</span><br><span class="hljs-comment"># 消息保存的容量限制，超出后会删除</span><br><span class="hljs-attr">log.retention.bytes</span>=<span class="hljs-string">1073741824</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</span><br><span class="hljs-attr">log.segment.bytes</span>=<span class="hljs-string">1073741824</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># The interval at which log segments are checked to see if they can be deleted according</span><br><span class="hljs-comment"># to the retention policies</span><br><span class="hljs-attr">log.retention.check.interval.ms</span>=<span class="hljs-string">300000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span><br><span class="hljs-comment"># You can also append an optional chroot string to the urls to specify the</span><br><span class="hljs-comment"># root directory for all kafka znodes.</span><br><span class="hljs-attr">zookeeper.connect</span>=<span class="hljs-string">localhost:2181</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Timeout in ms for connecting to zookeeper</span><br><span class="hljs-attr">zookeeper.connection.timeout.ms</span>=<span class="hljs-string">18000</span><br><br><span class="hljs-attr">group.initial.rebalance.delay.ms</span>=<span class="hljs-string">0</span><br><br></code></pre></td></tr></table></figure><p>zk配置 zookeeper.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># the directory where the snapshot is stored.</span><br><span class="hljs-attr">dataDir</span>=<span class="hljs-string">/usr/local/var/lib/zookeeper</span><br><span class="hljs-comment"># the port at which the clients will connect</span><br><span class="hljs-attr">clientPort</span>=<span class="hljs-string">2181</span><br><span class="hljs-comment"># disable the per-ip limit on the number of connections since this is a non-production config</span><br><span class="hljs-attr">maxClientCnxns</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"># Disable the adminserver by default to avoid port conflicts.</span><br><span class="hljs-comment"># Set the port to something non-conflicting if choosing to enable this</span><br><span class="hljs-attr">admin.enableServer</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># admin.serverPort=8080</span><br></code></pre></td></tr></table></figure><h3 id="Kafka整合SpringBoot"><a href="#Kafka整合SpringBoot" class="headerlink" title="Kafka整合SpringBoot"></a>Kafka整合SpringBoot</h3><p>&#x3D;&#x3D;<strong>下图的消费者，其实是poll了一批数据，针对的是每一条数据的操作</strong>&#x3D;&#x3D;</p><p><img src="https://s2.loli.net/2023/03/09/WsfPJFixeV1q8LA.jpg" alt="image-20220707010746932"></p><h3 id="开发环境KAFKA"><a href="#开发环境KAFKA" class="headerlink" title="开发环境KAFKA"></a>开发环境KAFKA</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh root@10.60.0.65<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">监控</span><br>http://10.60.0.65:8048<br><br>bootstrap-servers 10.60.0.65:6667,10.60.0.66:6667,10.60.0.67:6667<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MQ</category>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Middleware</tag>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA使用技巧</title>
    <link href="/2023/03/09/%E5%B7%A5%E5%85%B7/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/03/09/%E5%B7%A5%E5%85%B7/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="IDEA使用技巧"><a href="#IDEA使用技巧" class="headerlink" title="IDEA使用技巧"></a>IDEA使用技巧</h2><h3 id="Debug调试"><a href="#Debug调试" class="headerlink" title="Debug调试"></a>Debug调试</h3><ol><li><p>行断点</p></li><li><p>方法断点，在方法定义上打断点</p><blockquote><p>方法是实现类：会在方法第一行停顿，以及方法结束前停顿，便于查看方法体内部的值的变化</p><p>方法是接口：当接口有多个实现类，使用方法断点，会自动跳转到接口的实现类</p></blockquote></li><li><p>异常断点</p><blockquote><p>异常断点会在代码出现异常时，自动停在出现异常的行</p><p><img src="https://s2.loli.net/2023/03/09/FmGkYHuhtoa3rlC.jpg" alt="image-20220514194623601"></p></blockquote></li><li><p>详细断点</p><blockquote><p>按住Shift+左键</p><p><img src="https://s2.loli.net/2023/03/09/UTBsqLAWim62lap.jpg" alt="image-20220514195001731"></p></blockquote></li><li><p>值断点</p><blockquote><p>在属性定义的位置打断点，称为值断点；</p><p>作用：监控该属性的整个生命周期的变化</p></blockquote></li><li><p>Drop Frame</p><blockquote><p><img src="https://s2.loli.net/2023/03/09/eL7cNpUlqKg6dTD.jpg" alt="image-20220514200602048"></p><p>丢弃当前帧，重新进入方法；</p><p>作用：可以重复调试某个方法</p></blockquote></li><li><p>Force Return</p><blockquote><p>当代码出现异常，避免产生脏数据，不想让程序继续执行，可以通过Force Return</p><p>作用：避免操作资源</p><p><img src="https://s2.loli.net/2023/03/09/UQ4vPgfrAdSluME.jpg" alt="image-20220514200849689"></p></blockquote></li><li><p>Show Execution Point</p><blockquote><p>快速回到当前断点所在行</p><p><img src="https://s2.loli.net/2023/03/09/N1aL9FCPW6xkf72.jpg" alt="image-20220514201306251"></p></blockquote></li><li><p>Run to Cursor</p><blockquote><p>快速调转到光标所在行</p><p><img src="https://s2.loli.net/2023/03/09/p2o9HeIsyuCktdh.jpg" alt="image-20220514201538318"></p></blockquote></li><li><p>Trace Current Stream Chain</p><blockquote><p><img src="https://s2.loli.net/2023/03/09/iWXDOsJR8j1MKF4.jpg" alt="image-20220514202615570"></p></blockquote></li></ol><h3 id="IDEA-快捷键"><a href="#IDEA-快捷键" class="headerlink" title="IDEA 快捷键"></a>IDEA 快捷键</h3><blockquote><ol><li><p>多行编辑：Option+Shift 鼠标点击要编辑的行</p></li><li><p>Postfix Completion</p><p>xxx+(.)即可自动生成代码块，例如User.new 会生成 new User()，然后new User().var会生成 User user &#x3D; new User();</p><p><img src="https://s2.loli.net/2023/03/09/UtcO24KZnHGzfaR.jpg" alt="image-20220514230734112"></p><p>自定义postfix</p><p><img src="https://s2.loli.net/2023/03/09/Xt3w2pqV6Egmy8L.jpg" alt="image-20220514233853481"></p></li></ol></blockquote><h3 id="IDEA设置"><a href="#IDEA设置" class="headerlink" title="IDEA设置"></a>IDEA设置</h3><ol><li><p>自动导包</p><p><img src="https://s2.loli.net/2023/03/09/TXwBUYz9s5EieMl.jpg" alt="image-20220514234325636"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SBA集成Arthas</title>
    <link href="/2023/03/09/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/SpringBoot%20Admin/"/>
    <url>/2023/03/09/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/SpringBoot%20Admin/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot-Admin"><a href="#SpringBoot-Admin" class="headerlink" title="SpringBoot Admin"></a>SpringBoot Admin</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="创建SBA服务"><a href="#创建SBA服务" class="headerlink" title="创建SBA服务"></a>创建SBA服务</h4><p><img src="https://s2.loli.net/2023/03/09/nAJ9hetz1TyP2bI.jpg" alt="image-20220909110903187"></p><p><img src="https://s2.loli.net/2023/03/09/7CPkYQV9KiJArHO.jpg" alt="image-20220909111111148"></p><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sba-server</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="创建SBA客户端"><a href="#创建SBA客户端" class="headerlink" title="创建SBA客户端"></a>创建SBA客户端</h4><p><img src="https://s2.loli.net/2023/03/09/GLObm2JAQi6snwh.jpg" alt="image-20220909112146430"></p><p><img src="https://s2.loli.net/2023/03/09/ejlHNQRyIhZa3g1.jpg" alt="image-20220909112223386"></p><h4 id="新增依赖"><a href="#新增依赖" class="headerlink" title="新增依赖"></a>新增依赖</h4><blockquote><p>不加此依赖服务起不来 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 应用名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">sba-client</span><br>  <span class="hljs-attr">jmx:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">boot:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">client:</span><br>        <span class="hljs-comment"># 服务端 url</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">http://127.0.0.1:8888</span><br>        <span class="hljs-attr">instance:</span><br>          <span class="hljs-comment"># 客户端实例 url</span><br>          <span class="hljs-attr">service-url:</span> <span class="hljs-string">http://127.0.0.1:8080</span><br>          <span class="hljs-comment"># 客户端实例名称</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">sba-client</span><br>        <span class="hljs-comment"># 必须配置服务端认证账号密码，否则不会注册</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">admin</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-comment"># 暴漏的接口 - 所有接口</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">file:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">client.log</span><br>  <span class="hljs-attr">pattern:</span><br>    <span class="hljs-comment">#     日志高亮</span><br>    <span class="hljs-attr">file:</span> <span class="hljs-string">&#x27;%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr(%5p) %clr($&#123;PID&#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n%wEx&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="服务端SpringSecurity配置"><a href="#服务端SpringSecurity配置" class="headerlink" title="服务端SpringSecurity配置"></a>服务端SpringSecurity配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String adminContextPath;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ArthasProperties arthasProperties;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityConfig</span><span class="hljs-params">(AdminServerProperties adminServerProperties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.adminContextPath = adminServerProperties.getContextPath();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// @formatter:off</span><br>        <span class="hljs-type">SavedRequestAwareAuthenticationSuccessHandler</span> <span class="hljs-variable">successHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SavedRequestAwareAuthenticationSuccessHandler</span>();<br>        successHandler.setTargetUrlParameter(<span class="hljs-string">&quot;redirectTo&quot;</span>);<br>        successHandler.setDefaultTargetUrl(adminContextPath + <span class="hljs-string">&quot;/&quot;</span>);<br><br>        <span class="hljs-comment">// allow iframe</span><br>        <span class="hljs-keyword">if</span> (arthasProperties.isEnableIframeSupport()) &#123;<br>            http.headers().frameOptions().disable();<br>        &#125;<br><br>        http.authorizeRequests()<br>                .antMatchers(adminContextPath + <span class="hljs-string">&quot;/assets/**&quot;</span>).permitAll()<span class="hljs-comment">//Grants public access to all static assets and the login page.</span><br>                .antMatchers(adminContextPath + <span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<span class="hljs-comment">//Every other request must be authenticated.</span><br>                .and()<br>                .formLogin().loginPage(adminContextPath + <span class="hljs-string">&quot;/login&quot;</span>).successHandler(successHandler).and()<span class="hljs-comment">//Configures login and logout.</span><br>                .logout().logoutUrl(adminContextPath + <span class="hljs-string">&quot;/logout&quot;</span>).and()<br>                .httpBasic().and()<span class="hljs-comment">//Enables HTTP-Basic support. This is needed for the Spring Boot Admin Client to register.</span><br>                .csrf()<br>                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())<span class="hljs-comment">//Enables CSRF-Protection using Cookies</span><br>                .ignoringAntMatchers(<br>                        adminContextPath + <span class="hljs-string">&quot;/instances&quot;</span>,<span class="hljs-comment">//Disables CRSF-Protection the endpoint the Spring Boot Admin Client uses to register.</span><br>                        adminContextPath + <span class="hljs-string">&quot;/actuator/**&quot;</span><span class="hljs-comment">//Disables CRSF-Protection for the actuator endpoints.</span><br>                );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="集成Arthas-Web-Console"><a href="#集成Arthas-Web-Console" class="headerlink" title="集成Arthas Web Console"></a>集成Arthas Web Console</h4><blockquote><p>服务端配置</p></blockquote><ol><li><p>将Arthas源码中的tunnel-server中的类与文件拷贝到服务端，copy后如下</p><p><img src="https://s2.loli.net/2023/03/09/w6Sjpfvs1Ilxq8Q.jpg" alt="image-20220909194431907"></p></li><li><p>注释掉Arthas启动类<code>ArthasTunnelApplication</code>，使用SBA启动类来启动项目，SBA启动类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAdminServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OkSbaServerApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OkSbaServerApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>pom配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.taobao.arthas<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>arthas-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;arthas.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.taobao.arthas<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>arthas-tunnel-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;arthas.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 src/main/resources下所有文件及文件夹为资源文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>$&#123;project.build.directory&#125;/classes<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过 Maven Resource 的指定配置打入指定目录，实现 SBA 启动时的自定义加载 ，通过application配置 外链--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources/static<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>$&#123;project.build.directory&#125;/classes/META-INF/spring-boot-admin-server-ui/extensions/arthas<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>客户端配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">arthas.version</span>&gt;</span>3.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">arthas.version</span>&gt;</span>        <br><span class="hljs-comment">&lt;!--arthas starter--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.taobao.arthas<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;arthas.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#arthas配置</span><br><span class="hljs-attr">arthas:</span><br>  <span class="hljs-attr">tunnel-server:</span> <span class="hljs-string">ws://localhost:7777/ws</span><br>  <span class="hljs-comment">#客户端id,应用名@随机值，js会截取前面的应用名</span><br>  <span class="hljs-attr">agent-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;_$&#123;random.value&#125;</span><br>  <span class="hljs-comment">#如果是防止一个机器上启动多个 arthas端口冲突。可以配置为随机端口(配置为0)，或者配置为 -1，并且通过tunnel server来使用arthas。</span><br>  <span class="hljs-attr">telnet-port:</span> <span class="hljs-number">-1</span><br>  <span class="hljs-attr">http-port:</span> <span class="hljs-number">-1</span><br><br></code></pre></td></tr></table></figure><h4 id="服务端最终配置"><a href="#服务端最终配置" class="headerlink" title="服务端最终配置"></a>服务端最终配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ok-sba-server</span><br>  <span class="hljs-comment">## 集成了spring security安全组件，定义登录SBA的账号密码，</span><br>  <span class="hljs-comment">## 后期注册到SBA的客户端也要设置此权限才能注册进来</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">user:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">admin</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">boot:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-comment"># SBA添加外链扩展页面，此处外链跳转Arthas控制台</span><br>      <span class="hljs-attr">ui:</span><br>        <span class="hljs-attr">external-views:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;Arthas Console&quot;</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;./extensions/arthas/index.html&quot;</span><br>            <span class="hljs-attr">order:</span> <span class="hljs-number">1900</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">label:</span> <span class="hljs-string">&quot;AgentInfo&quot;</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;./extensions/arthas/apps.html&quot;</span><br>            <span class="hljs-attr">order:</span> <span class="hljs-number">1901</span><br>  <span class="hljs-comment"># Arthas的缓存策略</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">caffeine</span><br>    <span class="hljs-attr">cache-names:</span> <span class="hljs-string">inMemoryClusterCache</span><br>    <span class="hljs-attr">caffeine:</span><br>      <span class="hljs-attr">spec:</span> <span class="hljs-string">maximumSize=3000,expireAfterAccess=3600s</span><br><br><span class="hljs-comment"># 监控所有页面</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attr">metrics:</span><br>    <span class="hljs-attr">tags:</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br>  <span class="hljs-comment">## 关闭rabbitmq，redis，es 健康检查</span><br>  <span class="hljs-attr">health:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">rabbit:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 总是显示服务健康细节</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br><span class="hljs-comment"># arthas tunnel-server监听地址端口</span><br><span class="hljs-attr">arthas:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;PORT:7777&#125;</span><br>  <span class="hljs-attr">enableDetailPages:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Arthas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Arthas</tag>
      
      <tag>SBA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arthas常用命令</title>
    <link href="/2023/03/09/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/Arthas/"/>
    <url>/2023/03/09/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/Arthas/</url>
    
    <content type="html"><![CDATA[<h1 id="Arthas常用命令"><a href="#Arthas常用命令" class="headerlink" title="Arthas常用命令"></a>Arthas常用命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><ol><li>安装 <code>curl -O https://arthas.aliyun.com/arthas-boot.jar</code></li><li>启动 <code>java -jar arthas-boot.jar</code></li></ol></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>jad + 全类名 + 方法名(可选)，反编译代码</p><blockquote><p><code>jad com.bsj.studentcard.location.service.impl.WeatherServiceImpl</code></p></blockquote></li><li><p>watch+全类名+方法名，监听返回值</p><blockquote><p> <code>watch com.bsj.studentcard.location.config.forest.ForestWeatherServiceImpl getWeather -bf -x 2</code></p><table><thead><tr><th align="right">参数名称</th><th align="left">参数说明</th></tr></thead><tbody><tr><td align="right"><em>class-pattern</em></td><td align="left">类名表达式匹配</td></tr><tr><td align="right"><em>method-pattern</em></td><td align="left">函数名表达式匹配</td></tr><tr><td align="right"><em>express</em></td><td align="left">观察表达式，默认值：<code>&#123;params, target, returnObj&#125;</code></td></tr><tr><td align="right"><em>condition-express</em></td><td align="left">条件表达式</td></tr><tr><td align="right">[b]</td><td align="left">在<strong>函数调用之前</strong>观察</td></tr><tr><td align="right">[e]</td><td align="left">在<strong>函数异常之后</strong>观察</td></tr><tr><td align="right">[s]</td><td align="left">在<strong>函数返回之后</strong>观察</td></tr><tr><td align="right">[f]</td><td align="left">在<strong>函数结束之后</strong>(正常返回和异常返回)观察   <strong>f&#x3D;e+s</strong></td></tr><tr><td align="right">[E]</td><td align="left">开启正则表达式匹配，默认为通配符匹配</td></tr><tr><td align="right">[x:]</td><td align="left">指定输出结果的属性遍历深度，默认为 1，最大值是 4</td></tr></tbody></table></blockquote></li><li><p>stack +全类名+方法名，输出当前方法调用栈，<font color=red><strong>确定该方法是被谁调用的</strong></font></p><blockquote><p><code>stack com.bsj.studentcard.location.service.impl.WeatherServiceImpl getWeather</code></p></blockquote></li><li><p>在线更新代码</p><blockquote><ol><li><p>将代码反编译到某个目录</p><p><code>jad --source-only com.bsj.studentcard.location.service.impl.WeatherServiceImpl &gt; /tmp/WeatherServiceImpl.java</code></p></li><li><p>vim修改代码后通过mc命令编译为class文件</p><p><code>mc -d /tmp/output  /tmp/WeatherServiceImpl.java</code></p></li><li><p>通过retransform命令加载class文件到JVM内存</p><p><code>retransform /tmp/output/com/bsj/studentcard/location/service/impl/WeatherServiceImpl.class</code></p></li></ol><p>ps:</p><p><strong>如果不清除掉所有的 retransform entry，并重新触发 retransform ，则 arthas stop 时，retransform 过的类仍然生效。重启服务则失效</strong></p></blockquote></li><li><p>retransform使用</p><blockquote><ol><li><code>retransform /tmp/output/com/bsj/studentcard/location/service/impl/WeatherServiceImpl.class</code>  加载指定类到JVM </li><li>retransform -l 查看retransform entry</li><li>retransform -d 1 删除指定retransform entry，1是entry的编号</li><li>retransform –deleteAll  删除所有retransform entry</li></ol></blockquote></li><li><h3 id="上传-class-文件到服务器的技巧"><a href="#上传-class-文件到服务器的技巧" class="headerlink" title="上传 .class 文件到服务器的技巧"></a>上传 .class 文件到服务器的技巧</h3><p>使用<code>mc</code>命令来编译<code>jad</code>的反编译的代码有可能失败。可以在本地修改代码，编译好后再上传到服务器上。有的服务器不允许直接上传文件，可以使用<code>base64</code>命令来绕过。</p><p>在本地先转换<code>.class</code>文件为 base64，再保存为 result.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">base64</span> &lt; Test.class &gt; result.txt<br></code></pre></td></tr></table></figure><p>到服务器上，新建并编辑<code>result.txt</code>，复制本地的内容，粘贴再保存</p><p>把服务器上的 <code>result.txt</code>还原为<code>.class</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">base64 -d &lt; result.txt &gt; Test.class<br></code></pre></td></tr></table></figure><p>用 md5 命令计算哈希值，校验是否一致</p></li><li><p>查看JVM内存对象</p><blockquote><ol><li><p>查看内存对象</p><p><code>vmtool --action getInstances --className java.lang.String --limit 10&#39;</code></p></li><li><p>强制GC</p><p><code>vmtool --action forceGc</code></p></li></ol></blockquote></li></ol><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><blockquote><p>thread</p><table><thead><tr><th align="right">参数名称</th><th align="left">参数说明</th></tr></thead><tbody><tr><td align="right"><em>id</em></td><td align="left">线程 id</td></tr><tr><td align="right">[n:]</td><td align="left">指定最忙的前 N 个线程并打印堆栈</td></tr><tr><td align="right">[b]</td><td align="left">找出当前阻塞其他线程的线程</td></tr><tr><td align="right">[i <code>&lt;value&gt;</code>]</td><td align="left">指定 cpu 使用率统计的采样间隔，单位为毫秒，默认值为 200</td></tr><tr><td align="right">[–all]</td><td align="left">显示所有匹配的线程</td></tr></tbody></table></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有线程 不带参数时查看的是第一页的线程</span><br>thread --all<br><br><span class="hljs-comment"># 查看最忙的3个线程</span><br>thread -n 3 <br><br><span class="hljs-comment"># 查看指定线程 148为线程ID</span><br>thread 148 <br><br><span class="hljs-comment"># 查看当前阻塞其他线程的线程   目前只支持找出 synchronized 关键字阻塞住的线程， 如果是java.util.concurrent.Lock， 目前还不支持</span><br>thread -b<br><br><span class="hljs-comment"># 统计近1分钟内的线程CPU使用率</span><br>thread -i 6000 <br><br><span class="hljs-comment"># 查询指定状态的线程</span><br>thread --state WAITING<br></code></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看logger信息</span><br>logger<br></code></pre></td></tr></table></figure><p>logger信息输出如下：</p><p><img src="https://s2.loli.net/2023/03/09/iwE8Ljf7NITF36H.jpg" alt="image-20220916151517598"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置日志级别</span><br><span class="hljs-comment"># -c + classloader的ID</span><br><span class="hljs-comment"># --name + name</span><br>logger -c 2a139a55 --name ROOT --level debug<br></code></pre></td></tr></table></figure><h4 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开始采样</span><br>profiler start<br><br><span class="hljs-comment"># 获取已经采样的数量</span><br>profiler getSamples<br><br><span class="hljs-comment"># 查询profiler状态</span><br>profiler status<br><br><span class="hljs-comment"># 停止采样并输出</span><br>profiler stop --format html<br><br><span class="hljs-comment"># 查看路径 例如</span><br>http://localhost:8563/arthas-output/20220916-153518.html<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Command</tag>
      
      <tag>Arthas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>认证授权</title>
    <link href="/2023/03/09/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    <url>/2023/03/09/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-Cookie"><a href="#什么是-Cookie" class="headerlink" title="什么是 Cookie"></a>什么是 Cookie</h3><blockquote><ul><li><p><strong>HTTP 是无状态的协议</strong>，每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪，就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 cookie 或者 session 去实现。</p></li><li><p><strong>cookie 存储在客户端：</strong> cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p></li><li><p><strong>cookie 是不可跨域的：</strong> 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，<strong>一级域名和二级域名之间是允许共享使用的</strong>（<strong>靠的是 domain）</strong>。</p></li></ul></blockquote><h3 id="什么是-Session"><a href="#什么是-Session" class="headerlink" title="什么是 Session"></a>什么是 Session</h3><ul><li><p><strong>session 是另一种记录服务器和客户端会话状态的机制</strong></p></li><li><p><strong>session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的cookie 中</strong></p></li></ul><p><img src="https://s2.loli.net/2023/03/09/hLmIsP4zjieU5wB.jpg" alt="16f523a04d0b3cf5_tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0"></p><h3 id="什么是-Token（令牌）"><a href="#什么是-Token（令牌）" class="headerlink" title="什么是 Token（令牌）"></a>什么是 Token（令牌）</h3><h4 id="Acesss-Token"><a href="#Acesss-Token" class="headerlink" title="Acesss Token"></a>Acesss Token</h4><p><img src="/../../../Desktop/16f523a04d9c745f_tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0.png" alt="16f523a04d9c745f_tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0"></p><h4 id="Refresh-Token"><a href="#Refresh-Token" class="headerlink" title="Refresh Token"></a>Refresh Token</h4><p><img src="/../../../Desktop/16f523a04d1c887b_tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0.png" alt="16f523a04d1c887b_tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0"></p><h3 id="Token-和-Session-的区别"><a href="#Token-和-Session-的区别" class="headerlink" title="Token 和 Session 的区别"></a>Token 和 Session 的区别</h3><ul><li>Session 是一种<strong>记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息</strong>。而 Token 是<strong>令牌</strong>，<strong>访问资源接口（API）时所需要的资源凭证</strong>。Token <strong>使服务端无状态化，不会存储会话信息。</strong></li></ul><h3 id="什么是-JWT"><a href="#什么是-JWT" class="headerlink" title="什么是 JWT"></a>什么是 JWT</h3><blockquote><p>JSON Web Token（简称 JWT）是目前最流行的<strong>跨域认证</strong>解决方案。</p><p>客户端将 token 保存到本地（通常使用 localstorage，也可以使用 cookie）</p><p>验证网站 <a href="https://jwt.io/">https://jwt.io/</a></p></blockquote><p><img src="https://s2.loli.net/2023/03/09/fOb1VGHc5p2lN3K.jpg" alt="image-20220827223204570"></p><p><img src="https://s2.loli.net/2023/03/09/O7KUJaIzlZEf2Rh.jpg" alt="16f523a04e881087_tplv-t2oaga2asx-zoom-in-crop-mark_3024_0_0_0"></p><p><img src="https://s2.loli.net/2023/03/09/gLeJy5u2rIjhCiw.jpg" alt="image-20220827223334149"></p><h3 id="Token-和-JWT-的区别"><a href="#Token-和-JWT-的区别" class="headerlink" title="Token 和 JWT 的区别"></a>Token 和 JWT 的区别</h3><p><strong>相同：</strong></p><ul><li>都是访问资源的令牌</li><li>都可以记录用户的信息</li><li>都是使服务端无状态化</li><li>都是只有验证成功后，客户端才能访问服务端上受保护的资源</li></ul><p><strong>区别：</strong></p><ul><li>Token：服务端验证客户端发送过来的 Token 时，还&#x3D;&#x3D;<strong>需要查询数据库（一般存在redis中）获取用户信息，然后验证 Token 是否有效</strong>&#x3D;&#x3D;。</li><li>JWT： 将 Token 和 Payload 加密后存储于客户端，&#x3D;&#x3D;<strong>服务端只需要使用密钥解密进行校验</strong>&#x3D;&#x3D;（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码总结</title>
    <link href="/2023/03/09/%E6%A1%86%E6%9E%B6/Spring/Spring%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/"/>
    <url>/2023/03/09/%E6%A1%86%E6%9E%B6/Spring/Spring%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring源码总结"><a href="#Spring源码总结" class="headerlink" title="Spring源码总结"></a>Spring源码总结</h2><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><h4 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h4><pre><code class=" mermaid">graph LRBean创建--&gt;初始化--&gt;销毁</code></pre><h5 id="Bean的创建"><a href="#Bean的创建" class="headerlink" title="Bean的创建"></a>Bean的创建</h5><ul><li>单实例Bean：容器启动时创建</li><li>多实例Bean：第一次获取时创建</li></ul><h5 id="Bean初始化"><a href="#Bean初始化" class="headerlink" title="Bean初始化"></a>Bean初始化</h5><h6 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 给属性赋值</span><br>populateBean(beanName, mbd, instanceWrapper);<br></code></pre></td></tr></table></figure><h6 id="初始化之前"><a href="#初始化之前" class="headerlink" title="初始化之前"></a>初始化之前</h6><p>​调用BeanPostProcessor的postProcessBeforeInitialization方法</p><h6 id="自定义初始化方法"><a href="#自定义初始化方法" class="headerlink" title="自定义初始化方法"></a>自定义初始化方法</h6><ul><li><p>使用JSR250@PostConstruct注解，标注在初始化方法上（由于该注解的解析是通过BeanPostProcessor解析执行的，所以这种方式的初始化方法先执行）</p></li><li><p>实现InitializingBean接口，重写afterPropertiesSet方法</p></li><li><p>通过@Bean指定init方法</p><p>初始化执行顺序</p><pre><code class=" mermaid">graph LRPostConstruct注解--&gt;InitializingBean--&gt;Bean注解的init方法</code></pre></li></ul><h6 id="初始化之后"><a href="#初始化之后" class="headerlink" title="初始化之后"></a>初始化之后</h6><p>​调用BeanPostProcessor的postProcessAfterInitialization方法</p><h5 id="Bean销毁"><a href="#Bean销毁" class="headerlink" title="Bean销毁"></a>Bean销毁</h5><h6 id="销毁的方式"><a href="#销毁的方式" class="headerlink" title="销毁的方式"></a>销毁的方式</h6><ul><li><p>使用JSR250@PreDestroy注解，标注在销毁方法上</p></li><li><p>实现DisposableBean接口，重新destroy方法</p></li><li><p>通过@Bean指定destroy方法</p><p>销毁执行的顺序</p><pre><code class=" mermaid">graph LRPreDestroy注解--&gt;DisposableBean--&gt;Bean注解的destroy方法</code></pre></li></ul><p>容器关闭时销毁，多实例Bean不会销毁，容器不管理多实例Bean</p><h4 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h4><p>应用：</p><p>解析注解，并实现注解的功能，比如@Autowired、@Async等</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><h4 id="核心注解"><a href="#核心注解" class="headerlink" title="核心注解"></a>核心注解</h4><blockquote><p><code>@EnableAspectJAutoProxy</code></p></blockquote><p>Tips: EnableXXX注解，关注该注解给容器注册了什么组件，研究组件是如何工作的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(AspectJAutoProxyRegistrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAspectJAutoProxy &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AspectJAutoProxyRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Register, escalate, and configure the AspectJ auto proxy creator based on the value</span><br><span class="hljs-comment"> * of the @&#123;<span class="hljs-doctag">@link</span> EnableAspectJAutoProxy#proxyTargetClass()&#125; attribute on the importing</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> <span class="hljs-doctag">@Configuration</span>&#125; class.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(</span><br><span class="hljs-params">AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br><br>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);<br>    <br>    ......<br>  &#125;<br></code></pre></td></tr></table></figure><p>给容器中注册一个名字为<code>org.springframework.aop.config.internalAutoProxyCreator</code>,类型为<code>AnnotationAwareAspectJAutoProxyCreator</code>的bean的定义信息，加入到<code>BeanDefinitionRegistry</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTO_PROXY_CREATOR_BEAN_NAME</span> <span class="hljs-operator">=</span><br>      <span class="hljs-string">&quot;org.springframework.aop.config.internalAutoProxyCreator&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BeanDefinition <span class="hljs-title function_">registerOrEscalateApcAsRequired</span><span class="hljs-params">(</span><br><span class="hljs-params">Class&lt;?&gt; cls, BeanDefinitionRegistry registry, <span class="hljs-meta">@Nullable</span> Object source)</span> &#123;<br>......<br><span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(cls);<br>beanDefinition.setSource(source);<br>beanDefinition.getPropertyValues().add(<span class="hljs-string">&quot;order&quot;</span>, Ordered.HIGHEST_PRECEDENCE);<br>beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);<br>registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);<br><span class="hljs-keyword">return</span> beanDefinition;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/dDypexYAtmzPB3j.jpg" alt="image-20220403205011466"></p><h4 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h4><blockquote><p><code>AnnotationAwareAspectJAutoProxyCreator</code></p></blockquote><p><code>AnnotationAwareAspectJAutoProxyCreator</code>继承关系</p><ul><li>实现了<code>BeanPostProcessor</code>接口</li><li>实现了<code>BeanFActionyAware</code>接口</li></ul><p><img src="https://s2.loli.net/2023/03/09/AQOczCB7tRLlqog.jpg" alt="AnnotationAwareAspectJAutoProxyCreator"></p><p>BeanPostProcessor创建流程</p><pre><code class=" mermaid">sequenceDiagram    autonumberAction--&gt;&gt;AnnotationConfigApplicationContext: register  Note right of Action: 注册配置类 Action--&gt;&gt;AnnotationConfigApplicationContext: refresh Note right of Action: 刷新容器AnnotationConfigApplicationContext--&gt;&gt;AbstractApplicationContext: refreshAbstractApplicationContext--&gt;&gt;PostProcessorRegistrationDelegate: registerBeanPostProcessorsNote right of AbstractApplicationContext: 注册bean的后置处理器，拦截bean的创建PostProcessorRegistrationDelegate--&gt;&gt;DefaultListableBeanFActiony: getBeanNamesForTypeNote right of PostProcessorRegistrationDelegate: 根据类型获取BeanPostProcessor的名字PostProcessorRegistrationDelegate--&gt;&gt;AbstractBeanFActiony: getBeanNote right of PostProcessorRegistrationDelegate: 根据BeanPostProcessor的名字获取Bean  AbstractBeanFActiony--&gt;&gt;AbstractBeanFActiony: doGetBean  AbstractBeanFActiony--&gt;&gt;DefaultSingletonBeanRegistry: getSingleton  DefaultSingletonBeanRegistry--&gt;&gt;DefaultSingletonBeanRegistry:singletonObjectsNote right of DefaultSingletonBeanRegistry: 首次调用为空，调用下面的方法AbstractBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: createBeanAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: createBeanInstanceNote right of AbstractBeanFActiony: 创建BeanAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: populateBeanNote right of AbstractAutowireCapableBeanFActiony: 给属性赋值AbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: initializeBeanNote right of AbstractAutowireCapableBeanFActiony: 创建初始化beanAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: invokeAwareMethods Note right of AbstractAutowireCapableBeanFActiony: 处理实现Aware接口的Bean（设置BeanName、ClassLoader、BeanFActiony）AbstractAutowireCapableBeanFActiony--&gt;&gt;AnnotationAwareAspectJAutoProxyCreator: initBeanFActionyNote right of AbstractAutowireCapableBeanFActiony: 初始化Bean工厂AbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: applyBeanPostProcessorsBeforeInitialization Note right of AbstractAutowireCapableBeanFActiony: 执行所有BeanPostProcessor前置处理方法AbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: invokeInitMethodsNote right of AbstractAutowireCapableBeanFActiony: 执行bean的初始化方法AbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: applyBeanPostProcessorsAfterInitialization  Note right of AbstractAutowireCapableBeanFActiony: 执行所有BeanPostProcessor后置处理方法AbstractAutowireCapableBeanFActiony--&gt;&gt;PostProcessorRegistrationDelegate: addBeanPostProcessor Note left of AbstractAutowireCapableBeanFActiony: 在bean工厂中加入BeanPostProcessor实例</code></pre><h4 id="代理对象的创建流程"><a href="#代理对象的创建流程" class="headerlink" title="代理对象的创建流程"></a>代理对象的创建流程</h4><blockquote><p><code>createBean</code>创建代理对象或者真正的Bean对象</p></blockquote><pre><code class=" mermaid">sequenceDiagramautonumberAction--&gt;&gt;AbstractAutowireCapableBeanFActiony:createBeanAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony:resolveBeforeInstantiationAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony:applyBeanPostProcessorsBeforeInstantiationAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutoProxyCreator:postProcessBeforeInstantiationAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony:applyBeanPostProcessorsAfterInitializationAbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutoProxyCreator:postProcessAfterInitializationAbstractAutoProxyCreator--&gt;&gt;AbstractAutoProxyCreator:wrapIfNecessaryNote right of AbstractAutoProxyCreator: 获取当前Bean可用的增强器，即切面方法AbstractAutoProxyCreator--&gt;&gt;AbstractAutoProxyCreator: getAdvicesAndAdvisorsForBeanNote right of AbstractAutoProxyCreator: 获取可用的增强器并排序，返回一个拦截器数组AbstractAdvisorAutoProxyCreator--&gt;&gt;AbstractAdvisorAutoProxyCreator:findEligibleAdvisorsNote right of AbstractAdvisorAutoProxyCreator: 找到可用的增强器AspectJAwareAdvisorAutoProxyCreator--&gt;&gt;AbstractAdvisorAutoProxyCreator:findCandidateAdvisorsNote right of AspectJAwareAdvisorAutoProxyCreator: 找到所有候选的增强器AbstractAdvisorAutoProxyCreator--&gt;&gt;AbstractAdvisorAutoProxyCreator:findAdvisorsThatCanApplyNote right of AbstractAdvisorAutoProxyCreator: 过滤增强器并返回AbstractAutoProxyCreator--&gt;&gt;AbstractAutoProxyCreator:createProxyNote right of AbstractAutoProxyCreator: 创建代理对象ProxyFActiony--&gt;&gt;DefaultAopProxyFActiony:createAopProxyNote right of ProxyFActiony: 用代理工厂创建代理对象DefaultAopProxyFActiony--&gt;&gt;JdkDynamicAopProxy:JdkDynamicAopProxyNote right of DefaultAopProxyFActiony:创建JDK代理DefaultAopProxyFActiony--&gt;&gt;ObjenesisCglibAopProxy:ObjenesisCglibAopProxyNote right of DefaultAopProxyFActiony:创建Cglib代理AbstractAutowireCapableBeanFActiony--&gt;&gt;AbstractAutowireCapableBeanFActiony: doCreateBeanNote right of AbstractAutowireCapableBeanFActiony: 创建真正的Bean对象</code></pre><h4 id="代理对象的执行流程"><a href="#代理对象的执行流程" class="headerlink" title="代理对象的执行流程"></a>代理对象的执行流程</h4><pre><code class=" mermaid">sequenceDiagramautonumberAction--&gt;&gt;代理对象:xxx方法代理对象--&gt;&gt;DynamicAdvisedInterceptor:interceptNote right of 代理对象: 拦截代理对象的目标方法（DynamicAdvisedInterceptor是CglibAopProxy的内部类）DynamicAdvisedInterceptor--&gt;&gt;AdvisedSupport:getInterceptorsAndDynamicInterceptionAdviceNote right of DynamicAdvisedInterceptor: 根据代理工厂获取目标方法的拦截器链DynamicAdvisedInterceptor--&gt;&gt;MethodProxy:invokeNote right of DynamicAdvisedInterceptor: 如果没有拦截器链，则直接执行目标方法DynamicAdvisedInterceptor--&gt;&gt;CglibMethodInvocation:CglibMethodInvocation:proceedNote right of DynamicAdvisedInterceptor: 如果存在拦截器链，则创建一个CglibMethodInvocation对象并调用proceed方法</code></pre><h3 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h3><blockquote><ol><li>在配置类中开启事务管理 @EnableTransactionManagement</li><li>在配置类中注册事务管理器 PlatformTransactionManager</li><li>在需要事务的service上加上Transactional注解</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>source</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="/2023/03/09/%E8%BF%90%E7%BB%B4/nginx/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/09/%E8%BF%90%E7%BB%B4/nginx/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Nginx学习笔记"><a href="#Nginx学习笔记" class="headerlink" title="Nginx学习笔记"></a>Nginx学习笔记</h3><h4 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h4><p>正向代理：代理客户端，代理软件安装在客户端，比如vpn翻墙</p><p><img src="https://s2.loli.net/2023/03/09/bTsBjU8Q1XMnV2H.jpg" alt="Screen Shot 2022-04-10 at 11.27.49"></p><p>反向代理：代理服务端，代理软件安装在服务端，比如Nginx做服务器端的负载均衡，请求转发。</p><p><img src="https://s2.loli.net/2023/03/09/DxfKtBNZhjoAuiz.jpg" alt="Screen Shot 2022-04-10 at 11.28.08"></p><h4 id="iphash"><a href="#iphash" class="headerlink" title="iphash"></a>iphash</h4><blockquote><p>iphash对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发到同一台服务器进行处理，可以解决session不共享的问题。</p><p>但是一般不用上述方式做session共享，因为一旦某一台服务器挂了，session信息会丢失，通常情况下是通过redis做session共享</p></blockquote><h4 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h4><blockquote><p>下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将下载好的Nginx上传到服务器并解压</span><br>tar -zxvf nginx-1.20.2.tar.gz<br><br><span class="hljs-comment"># 进入到文件目录编译安装nginx</span><br>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --without-http_rewrite_module<br><br>make &amp;&amp; make install<br><br><span class="hljs-comment">#编译Stream模块</span><br>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-stream=dynamic --without-http_rewrite_module<br><br>make<br>不需要执行make install<br><br><span class="hljs-comment"># 在Nginx的安装目录创建modules目录，并执行下面命令</span><br><span class="hljs-built_in">cp</span> /usr/local/software/nginx-1.20.2/objs/ngx_stream_module.so    /usr/local/nginx/modules/<br><br><span class="hljs-comment"># 修改nginx.conf配置文件，载入模块</span><br>load_module  modules/ngx_stream_module.so;<br><br>stream &#123;<br>   ....<br>&#125;<br><br><span class="hljs-comment"># 查看nginx安装目录</span><br>whereis nginx<br><br><span class="hljs-comment"># 进入到安装目录下的sbin目录执行启动命令</span><br><span class="hljs-built_in">cd</span> /usr/local/nginx/sbin<br>./nginx<br><br><br><span class="hljs-comment"># 停止</span><br>./nginx -s stop<br><br><span class="hljs-comment"># 安全退出</span><br>./nginx -s quit<br><br><span class="hljs-comment"># 重新加载配置文件</span><br>./nginx -s reload<br><br><br><span class="hljs-comment"># 软连接配置</span><br><span class="hljs-built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx<br><br></code></pre></td></tr></table></figure><h4 id="nginx配置nacos集群"><a href="#nginx配置nacos集群" class="headerlink" title="nginx配置nacos集群"></a>nginx配置nacos集群</h4><p>配置nacos</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">```</span><br><br><br><br><span class="hljs-attr">nginx.conf</span><br><br><span class="hljs-attr">```properties</span><br><span class="hljs-attr">load_module</span>  <span class="hljs-string">modules/ngx_stream_module.so;</span><br><span class="hljs-attr">worker_processes</span>  <span class="hljs-string">1;</span><br><span class="hljs-attr">events</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">worker_connections</span>  <span class="hljs-string">1024;</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">http</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">include</span>       <span class="hljs-string">mime.types;</span><br>    <span class="hljs-attr">default_type</span>  <span class="hljs-string">application/octet-stream;</span><br>    <span class="hljs-attr">sendfile</span>        <span class="hljs-string">on;</span><br>    <span class="hljs-attr">upstream</span> <span class="hljs-string">nacos-server&#123;</span><br>            <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan01:8848 weight=1;</span><br>            <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan02:8848 weight=1;</span><br>            <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan03:8848 weight=1;</span><br>    <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">listen</span>       <span class="hljs-string">80;</span><br>        <span class="hljs-attr">server_name</span>  <span class="hljs-string">localhost;</span><br>        <span class="hljs-attr">location</span> <span class="hljs-string">/nacos &#123;</span><br>                <span class="hljs-attr">proxy_pass</span>  <span class="hljs-string">http://nacos-server;</span><br>                <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host $host;</span><br>                <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Real-Ip $remote_addr;</span><br>                <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For $remote_addr;</span><br>     <span class="hljs-attr">&#125;</span><br> <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">stream</span> <span class="hljs-string">&#123;</span><br> <span class="hljs-attr">include</span> <span class="hljs-string">/usr/local/nginx/tcp.d/*.conf;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><p>  </p><p>tcp.d&#x2F;nacos.conf  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">upstream</span> <span class="hljs-string">erp-nacos-grpc&#123;</span><br>          <span class="hljs-attr">hash</span> <span class="hljs-string">$remote_addr consistent;</span><br>          <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan01:9848 weight=1;</span><br>          <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan02:9848 weight=1;</span><br>          <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan03:9848 weight=1;</span><br>  <span class="hljs-attr">&#125;</span><br>  <span class="hljs-attr">upstream</span> <span class="hljs-string">erp-nacos-grpc9&#123;</span><br>          <span class="hljs-attr">hash</span> <span class="hljs-string">$remote_addr consistent;</span><br>          <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan01:9849 weight=1;</span><br>          <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan02:9849 weight=1;</span><br>          <span class="hljs-attr">server</span> <span class="hljs-string">unclebryan03:9849 weight=1;</span><br>  <span class="hljs-attr">&#125;</span><br>  <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">listen</span> <span class="hljs-string">1080; # grpc方式对外暴露端口</span><br>      <span class="hljs-attr">proxy_connect_timeout</span> <span class="hljs-string">10s;</span><br>      <span class="hljs-attr">proxy_timeout</span> <span class="hljs-string">10s;</span><br>      <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">erp-nacos-grpc;</span><br>  <span class="hljs-attr">&#125;</span><br><br>  <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">listen</span> <span class="hljs-string">1081; # grpc方式对外暴露端口</span><br>      <span class="hljs-attr">proxy_connect_timeout</span> <span class="hljs-string">10s;</span><br>      <span class="hljs-attr">proxy_timeout</span> <span class="hljs-string">10s;</span><br>      <span class="hljs-attr">proxy_pass</span> <span class="hljs-string">erp-nacos-grpc9;</span><br>  <span class="hljs-attr">&#125;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;start&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> unclebryan01 unclebryan02 unclebryan03<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> -----------nacos <span class="hljs-variable">$i</span> 启动----------------<br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;sh /usr/local/software/nacos/bin/startup.sh&quot;</span><br><span class="hljs-keyword">done</span><br>&#125;<br>;;<br><br><span class="hljs-string">&quot;stop&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> unclebryan01 unclebryan02 unclebryan03<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> -----------nacos <span class="hljs-variable">$i</span> 停止----------------<br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;sh /usr/local/software/nacos/bin/shutdown.sh&quot;</span><br><span class="hljs-keyword">done</span><br>&#125;<br>;;<br><br><br><span class="hljs-string">&quot;status&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> unclebryan01 unclebryan02 unclebryan03<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> -----------nacos <span class="hljs-variable">$i</span> 启动中----------------<br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;tail -f /usr/local/software/nacos/logs/start.out&quot;</span><br><span class="hljs-keyword">done</span><br>&#125;<br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>PS. 如果出现JAVA_HOME is not set and java could not be found in PATH，请修改startup.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在文件的最前面增加javahome路径</span><br><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-string">&quot;/usr/local/software/jdk1.8.0_311&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis总结</title>
    <link href="/2023/03/09/interview/Redis%E6%80%BB%E7%BB%93/"/>
    <url>/2023/03/09/interview/Redis%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="Redis面试总结"><a href="#Redis面试总结" class="headerlink" title="Redis面试总结"></a>Redis面试总结</h2><h3 id="Redis-为什么这么快？"><a href="#Redis-为什么这么快？" class="headerlink" title="Redis 为什么这么快？"></a>Redis 为什么这么快？</h3><p>Redis 内部做了非常多的性能优化，比较重要的主要有下面 3 点：</p><ul><li>Redis 基于内存，内存的访问速度是磁盘的上千倍；</li><li>Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用；</li><li>Redis 内置了多种优化过后的数据结构实现，性能非常高。</li></ul><p><img src="https://s2.loli.net/2023/03/09/Xjw3cvGn9LtrCI2.jpg" alt="why-redis-so-fast.d3507ae8"></p><h3 id="Redis-常用的数据结构有哪些？"><a href="#Redis-常用的数据结构有哪些？" class="headerlink" title="Redis 常用的数据结构有哪些？"></a>Redis 常用的数据结构有哪些？</h3><ul><li><strong>5 种基础数据结构</strong> ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</li><li><strong>3 种特殊数据结构</strong> ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。</li></ul><h3 id="String-还是-Hash-存储对象数据更好呢？"><a href="#String-还是-Hash-存储对象数据更好呢？" class="headerlink" title="String 还是 Hash 存储对象数据更好呢？"></a>String 还是 Hash 存储对象数据更好呢？</h3><ul><li>String 存储的是序列化后的对象数据，存放的是整个对象，String 消耗的内存约是 Hash 的一半，存储具有多层嵌套的对象时也方便很多。</li><li>Hash 是对对象的每个字段单独存储，适用于部分数据经常变动的对象。</li></ul><h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p><img src="https://s2.loli.net/2023/03/09/1eEVNpFQSGlOm7w.jpg" alt="IO多路复用"></p><h3 id="Redis-内存淘汰机制了解么？"><a href="#Redis-内存淘汰机制了解么？" class="headerlink" title="Redis 内存淘汰机制了解么？"></a>Redis 内存淘汰机制了解么？</h3><blockquote><p>相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?</p></blockquote><p>Redis 提供 6 种数据淘汰策略：</p><ol><li><strong>volatile-lru（least recently used）</strong>：从<strong>已设置过期时间</strong>的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li><strong>volatile-ttl</strong>：从<strong>已设置过期时间</strong>的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li><strong>volatile-random</strong>：从<strong>已设置过期时间</strong>的数据集（server.db[i].expires）中任意选择数据淘汰</li><li><strong>allkeys-lru（least recently used）</strong>：当<strong>内存不足</strong>以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</li><li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li></ol><p>4.0 版本后增加以下两种：</p><ol><li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最不经常使用的数据淘汰</li><li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key</li></ol><h3 id="Redis-持久化机制"><a href="#Redis-持久化机制" class="headerlink" title="Redis 持久化机制"></a>Redis 持久化机制</h3><h4 id="什么是-RDB-持久化？"><a href="#什么是-RDB-持久化？" class="headerlink" title="什么是 RDB 持久化？"></a>什么是 RDB 持久化？</h4><p>Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。类似MySQL的全量备份。</p><p><code>redis.conf</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">save 900 1           <span class="hljs-comment">#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><br>save 300 10          <span class="hljs-comment">#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><br>save 60 10000        <span class="hljs-comment">#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><br></code></pre></td></tr></table></figure><h4 id="什么是-AOF-持久化？"><a href="#什么是-AOF-持久化？" class="headerlink" title="什么是 AOF 持久化？"></a>什么是 AOF 持久化？</h4><p>与快照持久化相比，AOF 持久化的实时性更好，类似MySQL的binlog，<code>redis.conf</code> 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">appendonly yes<br>appendfsync always    #每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度<br>appendfsync everysec  #每秒钟同步一次，显式地将多个写命令同步到硬盘<br>appendfsync no        #让操作系统决定何时进行同步<br></code></pre></td></tr></table></figure><p>通过<code>aof-use-rdb-preamble</code>开启RDB+AOF</p><h3 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h3><h4 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h4><p><strong>加锁与释放锁</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加锁成功</span><br>127.0.0.1:6379&gt; setnx lock 1<br>(integer) 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">加锁失败</span><br>127.0.0.1:6379&gt; setnx lock 1<br>(integer) 0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">释放锁</span><br>127.0.0.1:6379&gt; del lock<br>(integer) 1<br></code></pre></td></tr></table></figure><p><strong>存在的问题</strong></p><blockquote><p>当客户端 1 拿到锁后，如果发生下面的场景，就会造成「死锁」：</p></blockquote><ol><li>程序处理业务逻辑异常，没及时释放锁</li><li>进程挂了，没机会释放锁</li></ol><h4 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h4><p>加锁的同时为锁设置有效期，避免因redis服务宕机而导致的死锁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加锁并设置有效期</span><br>127.0.0.1:6379&gt; set lock 1 ex 10 nx<br>OK<br><span class="hljs-meta prompt_"># </span><span class="language-bash">释放锁</span><br>127.0.0.1:6379&gt; del lock<br>(integer) 1<br></code></pre></td></tr></table></figure><p><strong>存在的问题</strong></p><ol><li><strong>锁过期</strong>：客户端 1 操作共享资源耗时太久，导致锁被自动释放，之后被客户端 2 持有</li><li><strong>释放别人的锁</strong>：客户端 1 操作共享资源完成后，却又释放了客户端 2 的锁</li></ol><h4 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h4><p><strong>解决释放别人的锁的问题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加锁的时候为每个线程设置一个唯一标识或者业务标识，保证只有自己才能释放自己的锁</span><br>127.0.0.1:6379&gt; SET lock $uuid EX 20 NX<br>OK<br></code></pre></td></tr></table></figure><p>使用lua脚本保证获取锁和删除锁为原子性操作</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">// 判断锁是自己的，才释放<br><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&quot;GET&quot;</span>,KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&quot;DEL&quot;</span>,KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p><strong>解决锁过期问题</strong></p><blockquote><p>使用Redisson的自动续期功能来避免锁过期</p></blockquote><p><strong>存在的问题</strong></p><ol><li>客户端 1 在主库上执行 SET 命令，加锁成功</li><li>此时，主库异常宕机，SET 命令还未同步到从库上（主从复制是异步的）</li><li>从库被哨兵提升为新主库，这个锁在新的主库上，丢失了！</li></ol><h4 id="方案4"><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h4><p>使用RedLock，但也存在时钟问题，成本收益不成正比</p><p>Redlock 的方案基于 2 个前提：</p><ol><li>不再需要部署<strong>从库</strong>和<strong>哨兵</strong>实例，只部署<strong>主库</strong></li><li>但主库要部署多个，官方推荐至少 5 个实例</li></ol><p><strong>也就是说，想用使用 Redlock，你至少要部署 5 个 Redis 实例，而且都是主库，它们之间没有任何关系，都是一个个孤立的实例。</strong></p><blockquote><p><strong>注意：不是部署 Redis Cluster，就是部署 5 个简单的 Redis 实例。</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Interview</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖使用、frp内网穿透等</title>
    <link href="/2023/03/09/Synology/%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/09/Synology/%E7%BE%A4%E6%99%96%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>浏览器输入：<a href="http://192.168.1.15:5000/web_index.html">http://192.168.1.15:5000/web_index.html</a></li></ol><p><img src="https://s2.loli.net/2023/03/09/VI4Q9cOi1KnoF5W.jpg" alt="image-20220929220207185"></p><p><img src="https://s2.loli.net/2023/03/09/6nwUO42qIHM9BNi.jpg" alt="image-20220929220237445"></p><p><img src="https://s2.loli.net/2023/03/09/2ISmzAZ75pn9RWk.jpg" alt="image-20220929220642771"></p><p><img src="https://s2.loli.net/2023/03/09/JicDVr3Bv2QhK4P.jpg" alt="image-20220929220748440"></p><ol start="2"><li><p>基础设置</p><p><img src="https://s2.loli.net/2023/03/09/hmcCZr3UP9eG4uN.jpg" alt="image-20220929221015542"></p><p><img src="https://s2.loli.net/2023/03/09/p38c2YdjIQgSHhn.jpg" alt="image-20220929221053072"></p><p><img src="https://s2.loli.net/2023/03/09/YbOnC48G6ucUXov.jpg" alt="image-20220929221233555"></p><p><img src="https://s2.loli.net/2023/03/09/IdnFbei1zTyraXN.jpg" alt="image-20220929221408325"></p></li><li><p>设置磁盘格式</p><blockquote><p>SHR会做备份，比如有两块4T硬盘，使用该格式，整体可用空间为4T</p><p>Basic是硬盘实际总和，不会做备份</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/zKw7mV4Nqnf2WSc.jpg" alt="image-20220929221649354"></p><p><img src="https://s2.loli.net/2023/03/09/57hCKvpViL4reXj.jpg" alt="image-20220929221751265"></p><p><img src="https://s2.loli.net/2023/03/09/t17j6rkBvZ5UzId.jpg" alt="image-20220929221833125"></p></li></ol><p><img src="https://s2.loli.net/2023/03/09/ePW2OGC5Kdh1gLU.jpg" alt="image-20220929223215068"></p><h3 id="安装套件"><a href="#安装套件" class="headerlink" title="安装套件"></a>安装套件</h3><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><p>开启AFP服务，用于mac连接</p><p><img src="https://s2.loli.net/2023/03/09/kBFrmOsZ19nhKHj.jpg" alt="image-20220929224328737"></p><p>开启SSH</p><p><img src="https://s2.loli.net/2023/03/09/ftnkQgyRUv8CID1.jpg" alt="image-20220929225258920"></p><h2 id="群晖使用"><a href="#群晖使用" class="headerlink" title="群晖使用"></a>群晖使用</h2><h3 id="客户端连接群晖"><a href="#客户端连接群晖" class="headerlink" title="客户端连接群晖"></a>客户端连接群晖</h3><p>DSM 支持最常用的协议，可从 Windows、Mac 和 Linux 设备提供无缝文件访问：</p><p>• 对于 Windows：SMB&#x2F;CIFS</p><p>• 对于 Mac：AFP、SMB</p><p>• 对于 Linux：NFS、SMB</p><p>&#x3D;&#x3D;SMB 支持所有三种类型的操作系统，但可能比 NFS 和 AFP 更慢。&#x3D;&#x3D;</p><h3 id="监控存储"><a href="#监控存储" class="headerlink" title="监控存储"></a>监控存储</h3><p>Surveillance Station都可以来监控存储</p><h3 id="Transmission安装"><a href="#Transmission安装" class="headerlink" title="Transmission安装"></a>Transmission安装</h3><p>玩物下载——Nas版迅雷</p><p>docker安装v2ray</p><p>音乐插件</p><p>网易云音乐歌词插件</p><h3 id="官方套件"><a href="#官方套件" class="headerlink" title="官方套件"></a>官方套件</h3><ol><li>Audio Station</li><li>Note Station</li><li>Video Station</li><li>File Station</li><li>Synology Photos</li><li>WebDav Server</li><li>Surveillance Station 家里监控视频备份</li><li>Synology Office</li><li>Synology Drive Server</li><li>媒体服务器</li><li>Universal Search 搜索软件</li><li>Hyper Backup  将nas系统中的重要文件备份到多个地方</li><li>Cloud Sync</li><li>Docker</li><li>Synology Contacts</li></ol><h3 id="三方套件来源"><a href="#三方套件来源" class="headerlink" title="三方套件来源"></a>三方套件来源</h3><ol><li><a href="http://packages.synocommunity.com/">http://packages.synocommunity.com/</a>  </li><li>spk7 <a href="https://spk7.imnks.com/">https://spk7.imnks.com/</a> <ol><li>下载ffmpeg快</li></ol></li></ol><h4 id="Docker安装Transmission"><a href="#Docker安装Transmission" class="headerlink" title="Docker安装Transmission"></a>Docker安装Transmission</h4><ol><li><p>打开docker</p><p><img src="https://s2.loli.net/2023/03/09/eBnjqDyRpL5GP17.jpg" alt="Install-Docker-Synology-DSM-7"></p></li><li><p>创建文件夹</p><p><img src="https://s2.loli.net/2023/03/09/aR5fdcTuAy2GYhV.jpg" alt="Transmission-Synology-NAS-Set-up-1"></p><p><img src="https://s2.loli.net/2023/03/09/tNfyaHFXIsTqKQl.jpg" alt="Transmission-Synology-NAS-Set-up-2"></p></li><li><p>ssh连接到nas并执行下面的命令</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name=transmission \<br>-p 9091:9091 \<br>-p 51413:51413 \<br>-p 51413:51413/udp \<br>-e PUID=1026 \<br>-e PGID=100 \<br>-e TZ=EAsia/Shanghai \<br>-e USER=用户名 \<br>-e PASS=密码 \<br>-e TRANSMISSION_WEB_HOME=/combustion-release/ \<br>-v /volume1/docker/transmission/data:/config \<br>-v /volume1/docker/transmission/downloads:/downloads \<br>-v /volume1/docker/transmission/incomplete:/watch \<br>--restart always \<br>ghcr.io/linuxserver/transmission<br></code></pre></td></tr></table></figure><ol start="4"><li>打开网址：<a href="http://192.168.1.15:9091/">http://192.168.1.15:9091/</a></li></ol><p>PS. 时区的查看方式 <a href="https://timezone.mariushosting.com/">https://timezone.mariushosting.com/</a></p><h3 id="用户权限分配"><a href="#用户权限分配" class="headerlink" title="用户权限分配"></a>用户权限分配</h3><p>video<br>photo<br>music</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>kodi + plex插件</p><h3 id="音乐格式转换"><a href="#音乐格式转换" class="headerlink" title="音乐格式转换"></a>音乐格式转换</h3><p>QQ音乐mflac转flac插件：<a href="https://github.com/unlock-music/unlock-music">https://github.com/unlock-music/unlock-music</a></p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>照片</p><p>手机号</p><p>文档</p><p>音乐</p><p>电影</p><p>图书</p><h3 id="群晖shell命令"><a href="#群晖shell命令" class="headerlink" title="群晖shell命令"></a>群晖shell命令</h3><p><a href="https://zhuanlan.zhihu.com/p/459751737">https://zhuanlan.zhihu.com/p/459751737</a></p><h2 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h2><blockquote><p>前置条件：需要一台云服务器</p><p>官方文档：<a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a></p></blockquote><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol><li><p>在云服务器上安装frp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br>wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz<br><span class="hljs-comment"># 解压</span><br>tar -zxvf frp_0.44.0_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>进入目录修改<code>frps.ini</code>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[common]<br><span class="hljs-comment"># 服务端监听的端口</span><br>bind_port = 7000<br><span class="hljs-comment"># 服务端token</span><br>token = xxxxx<br><br><span class="hljs-comment"># 可视化界面端口</span><br>dashboard_port = 7500<br>dashboard_user = xxxxx<br>dashboard_pwd = xxxxxx<br>enable_prometheus = <span class="hljs-literal">true</span><br><br>log_file = /var/log/frps.log<br>log_level = info<br>log_max_days = 3<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><blockquote><p>&#x3D;&#x3D;PS. 最开始在nas上使用docker安装，并未成功！现象是客户端连接服务端，无限重启！&#x3D;&#x3D;</p></blockquote><ol><li><p>在nas或者其他设备上安装frp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br>wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz<br><span class="hljs-comment"># 解压</span><br>tar -zxvf frp_0.44.0_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>进入目录修改<code>frpc.ini</code>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash">[common]<br><span class="hljs-comment"># 服务端IP</span><br>server_addr = 185.239.68.162<br><span class="hljs-comment"># 服务端监听的端口</span><br>server_port = 7000<br><span class="hljs-comment"># 服务端token</span><br>token = xxxxx<br>[ssh]<br><span class="hljs-comment"># 协议类型</span><br><span class="hljs-built_in">type</span> = tcp<br><span class="hljs-comment"># 本地IP</span><br>local_ip = 192.168.1.15<br><span class="hljs-comment"># 本地端口</span><br>local_port = 22<br><span class="hljs-comment"># 远程端口</span><br>remote_port = 2222<br>[dsm]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = 192.168.1.15<br>local_port = 5000<br>remote_port = 5443<br>[ds_file]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = 192.168.1.15<br>local_port = 5001<br>remote_port = 5001<br>[https_webdav]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = 192.168.1.15<br>local_port = 5006<br>remote_port = 5007<br>[http_webdav]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = 192.168.1.15<br>local_port = 5004<br>remote_port = 5005<br>[emby]<br><span class="hljs-built_in">type</span> = tcp<br>local_ip = 192.168.1.15<br>local_port = 8097<br>remote_port = 8096<br></code></pre></td></tr></table></figure></li></ol><h3 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h3><blockquote><p><a href="http://frps服务器ip:7500/">http://frps服务器ip:7500/</a></p></blockquote><p><img src="https://s2.loli.net/2023/03/09/YSrPX61LbNclUzV.jpg" alt="image-20220930234641198"></p><h3 id="配置域名映射"><a href="#配置域名映射" class="headerlink" title="配置域名映射"></a>配置域名映射</h3><blockquote><p>待完善</p></blockquote><h3 id="迅雷内侧版"><a href="#迅雷内侧版" class="headerlink" title="迅雷内侧版"></a>迅雷内侧版</h3><p>邀请码：<a href="https://docs.qq.com/form/page/DQUJXZUdtRlNGWkxr?_w_tencentdocx_form=1#/fill">https://docs.qq.com/form/page/DQUJXZUdtRlNGWkxr?_w_tencentdocx_form=1#/fill</a></p><h3 id="video-station-TMDB连接测试失败"><a href="#video-station-TMDB连接测试失败" class="headerlink" title="video station TMDB连接测试失败"></a>video station TMDB连接测试失败</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改nas的host</span><br>vi /etc/hosts<br><br><span class="hljs-comment">#host内容如下</span><br>13.226.238.76 api.themoviedb.org<br>13.224.161.90 api.themoviedb.org<br>13.35.7.102 api.themoviedb.org<br>13.225.103.26 api.themoviedb.org<br>13.226.191.85 api.themoviedb.org<br>13.225.103.110 api.themoviedb.org<br>52.85.79.89 api.themoviedb.org<br>13.225.41.40 api.themoviedb.org<br>13.226.251.88 api.themoviedb.org<br>13.225.89.239 api.thetvdb.com<br>13.249.175.212 api.thetvdb.com<br>13.35.161.120 api.thetvdb.com<br></code></pre></td></tr></table></figure><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p><img src="https://s2.loli.net/2023/03/09/5foK7YnhW1rm3vw.jpg" alt="image-20221001221621534"></p><blockquote><p>选择对应的系统并下载解码包</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/KWaFvNd3xYQpJ2j.jpg" alt="image-20221001222141017"></p><h3 id="Video-Station不支持音轨"><a href="#Video-Station不支持音轨" class="headerlink" title="Video Station不支持音轨"></a>Video Station不支持音轨</h3><ol><li><p>下载ff</p></li><li><p>执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到root权限，回车后输入管理员密码即可</span><br>sudo -i <br><br><span class="hljs-comment"># 保存 Video Station 使用的 ffmpeg</span><br><span class="hljs-built_in">mv</span> -n /var/packages/VideoStation/target/bin/ffmpeg /var/packages/VideoStation/target/bin/ffmpeg.orig<br><br><span class="hljs-comment"># 注入脚本</span><br>wget -O - https://gist.githubusercontent.com/BenjaminPoncet/bbef9edc1d0800528813e75c1669e57e/raw/ffmpeg-wrapper &gt; /var/packages/VideoStation/target/bin/ffmpeg<br><br><span class="hljs-comment"># 更改脚本的所有权和模式</span><br><span class="hljs-built_in">chown</span> root:VideoStation /var/packages/VideoStation/target/bin/ffmpeg<br><span class="hljs-built_in">chmod</span> 750 /var/packages/VideoStation/target/bin/ffmpeg<br><span class="hljs-built_in">chmod</span> u+s /var/packages/VideoStation/target/bin/ffmpeg<br><br><span class="hljs-comment"># 保存 Video Station 的 libsynovte.so</span><br><span class="hljs-built_in">cp</span> -n /var/packages/VideoStation/target/lib/libsynovte.so /var/packages/VideoStation/target/lib/libsynovte.so.orig<br><span class="hljs-built_in">chown</span> VideoStation:VideoStation /var/packages/VideoStation/target/lib/libsynovte.so.orig<br><br><span class="hljs-comment"># 使libsynovte.so 支持 DTS, EAC3, TrueHD</span><br>sed -i -e <span class="hljs-string">&#x27;s/eac3/3cae/&#x27;</span> -e <span class="hljs-string">&#x27;s/dts/std/&#x27;</span> -e <span class="hljs-string">&#x27;s/truehd/dheurt/&#x27;</span> /var/packages/VideoStation/target/lib/libsynovte.so<br><br><br><br><span class="hljs-comment"># 适用于DMS6</span><br><span class="hljs-built_in">mv</span> /var/packages/CodecPack/target/bin/ffmpeg33  /var/packages/CodecPack/target/bin/ffmpeg33.orig   <br><span class="hljs-built_in">cp</span> /var/packages/VideoStation/target/bin/ffmpeg /var/packages/CodecPack/target/bin/ffmpeg33<br><br><br><span class="hljs-comment"># 适用于DMS7.0</span><br><span class="hljs-built_in">mv</span> /var/packages/CodecPack/target/bin/ffmpeg41  /var/packages/CodecPack/target/bin/ffmpeg41.orig<br><span class="hljs-built_in">cp</span> /var/packages/VideoStation/target/bin/ffmpeg /var/packages/CodecPack/target/bin/ffmpeg41<br></code></pre></td></tr></table></figure></li><li><p>重启Video Station</p></li></ol><p>后续更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O - https://gist.githubusercontent.com/BenjaminPoncet/bbef9edc1d0800528813e75c1669e57e/raw/ffmpeg-wrapper &gt; /var/packages/VideoStation/target/bin/ffmpeg<br></code></pre></td></tr></table></figure><h3 id="Kodi使用"><a href="#Kodi使用" class="headerlink" title="Kodi使用"></a>Kodi使用</h3><ol><li><p>中文乱码</p><blockquote><p>先将字体修改为Arial based，然后再切换语言为中文</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/M2pY8XQbs1WLder.jpg" alt="image-20221004003819369"></p></li></ol><p>​<img src="https://s2.loli.net/2023/03/09/W8617Ll9f2PQVgj.jpg" alt="image-20221004004101610"></p><h3 id="群晖Webdav"><a href="#群晖Webdav" class="headerlink" title="群晖Webdav"></a>群晖Webdav</h3><ol><li><p>在套件中心安装Webdav Server并开启Webdav服务</p><p><img src="https://s2.loli.net/2023/03/09/qePXn9lGSTjHbms.jpg" alt="image-20221004102504079"></p></li><li></li></ol><h3 id="用户头像设置"><a href="#用户头像设置" class="headerlink" title="用户头像设置"></a>用户头像设置</h3><p>在Synology Photos右上角的配置文件菜单项里设置</p><p><img src="https://s2.loli.net/2023/03/09/XPMbG6BlJx9K3hm.jpg" alt="image-20221006183559273"></p>]]></content>
    
    
    <categories>
      
      <category>Synology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Synology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InnoDB存储引擎浅析</title>
    <link href="/2023/03/09/DB/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <url>/2023/03/09/DB/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h1><p><img src="https://s2.loli.net/2023/03/09/dEr83xjVP4TfhMB.jpg" alt="image-20221010141141713"></p><h2 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h2><ol><li><p>Master Thread</p><blockquote><p>Master Thread是一个非常核心的后台线程，主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新、合并插入缓冲（INSERT BUFFER）、UNDO页的回收等。</p><p>我的理解是身兼数职。</p></blockquote></li><li><p>IO Thread</p><blockquote><p>在InnoDB存储引擎中大量使用了AIO（Async IO）来处理写IO请求，这样可以极大提高数据库的性能。而IO Thread的工作主要是负责这些IO请求的回调（call back）处理。</p></blockquote></li><li><p>Purge Thread</p><blockquote><p>事务被提交后，其所使用的undolog可能不再需要，因此需要PurgeThread来<strong>回收已经使用并分配的undo页</strong>。减轻Master Thread的压力</p></blockquote></li><li><p>Page Cleaner Thread</p><blockquote><p>其作用是将之前版本中<strong>脏页的刷新操作</strong>都放入到单独的线程中来完成。减轻Master Thread的压力</p></blockquote></li></ol><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="内存结构图"><a href="#内存结构图" class="headerlink" title="内存结构图"></a>内存结构图</h3><p><img src="https://s2.loli.net/2023/03/09/GZQpewW9BDT2Xmj.jpg" alt="image-20221010144248273"></p><h3 id="缓冲池"><a href="#缓冲池" class="headerlink" title="缓冲池"></a>缓冲池</h3><blockquote><p>缓冲池 innodb_buffer_pool</p><p>缓冲池中缓存的数据页类型有：索引页、数据页、undo页、插入缓冲（insert buffer）、自适应哈希索引（adaptive hash index）、InnoDB存储的锁信息（lock info）、数据字典信息（data dictionary）等。不能简单地认为，缓冲池只是缓存索引页和数据页，它们只是占缓冲池很大的一部分而已。</p><p>Innodb允许有多个缓冲池实例。每个页根据哈希值平均分配到不同缓冲池实例中。这样做的好处是减少数据库内部的资源竞争，增加数据库的并发处理能力。可以通过参数<code>innodb_buffer_pool_instances</code>来进行配置，该值默认为1。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 缓冲池的总大小 </span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_buffer_pool_size&#x27;</span>;<br><span class="hljs-comment">-- 缓冲池的总大小 单位是byte   -- 134217728/1024/1024=128M</span><br><span class="hljs-comment">-- 缓冲池实例个数</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_buffer_pool_instances&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/OoIHa1P4UnZVzTc.jpg" alt="image-20221010163151463"></p><h4 id="缓冲池状态信息"><a href="#缓冲池状态信息" class="headerlink" title="缓冲池状态信息"></a>缓冲池状态信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看缓冲池的状态</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_BUFFER_POOL_STATS;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/JyfcFo4LuGMAIX2.jpg" alt="image-20221010165055392"></p><ul><li>POOL_SIZE：表示当前缓冲池的页数为8191，8191*16kb&#x2F;1024≈128M</li><li>FREE_BUFFERS：Free List空闲列表剩余页数</li><li>DATABASE_PAGES：LRU所管理的页数</li><li>OLD_DATABASE_PAGES：LRU列表OLD区数据页数</li><li>PAGES_MADE_YOUNG：当页从LRU列表的old部分加入到new部分时，称此时发生的操作为page made young</li><li>PAGES_NOT_MADE_YOUNG：因为innodb_old_blocks_time的<font color=red><strong>变更</strong></font>而导致页没有从old部分移动到new部分的操作称为page not made young。</li><li>HIT_RATE：缓冲池命中率，通常该值不应该小于95%</li></ul><blockquote><p>FREE_BUFFERS+DATABASE_PAGES&lt;&#x3D;POOL_SIZE，因为缓冲池中的页还可能会被分配给自适应哈希索引、Lock信息、Insert Buffer等页，而这部分页不需要LRU算法进行维护，因此不存在于LRU列表中。</p></blockquote><h4 id="LRU-List、Free-List和Flush-List"><a href="#LRU-List、Free-List和Flush-List" class="headerlink" title="LRU List、Free List和Flush List"></a>LRU List、Free List和Flush List</h4><h5 id="Innodb读取Page页"><a href="#Innodb读取Page页" class="headerlink" title="Innodb读取Page页"></a>Innodb读取Page页</h5><blockquote><p>在每个Buffer Pool Instance中都会包含一个独立的Page_hash，其作用主要是为了避免对LRU List的全链表扫描，通过使用space_id和page_no就能快速找到已经被读入Buffer Pool的Page。</p></blockquote><p>当InnoDB读取Page时，首先会从当前Buffer Pool Instance的page_hash查找，并分为三种情况来处理：</p><ol><li><font color=red>如果在page_hash找到，即Page在LRU List中，则会判断Page是在Old区还是Young区，如果是在Old区，在读取完Page后会把它添加到Young区的链表头部，发生的操作为page made young</font></li><li><font color=red>如果在page_hash找到，并且Page在Young区，需要判断Page所在Young区的位置，只有Page处于Young区总长度大约1&#x2F;4的位置之后，才会将其添加到Young区的链表头部</font></li><li><font color=red>如果未能在page_hash找到，则需要去数据文件中读取Page，并将其添加到Old区的头部</font></li></ol><blockquote><p>当页从LRU列表的old部分加入到new部分时，称此时发生的操作为page made young</p><p>因为innodb_old_blocks_time的<font color=red><strong>变更</strong></font>而导致页没有从old部分移动到new部分的操作称为page not made young。</p></blockquote><h5 id="LRU-List"><a href="#LRU-List" class="headerlink" title="LRU List"></a>LRU List</h5><blockquote><p>数据库中的缓冲池是通过LRU（Latest Recent Used，最近最少使用）算法来进行管理的。即最频繁使用的页在LRU列表的前端，而最少使用的页在LRU列表的尾端。当缓冲池不能存放新读取到的页时，将首先释放LRU列表中尾端的页。</p><p>当某些操作需要访问的数据比较分散同时涉及的页数很多的时候，会导致大量的页被放入LRU缓存，如果直接使用传统的LRU算法，有可能导致热点数据被刷出，而这些页通常来说又仅在这次查询操作中需要，并不是活跃的热点数据，为了解决这个问题Innodb引入了midpoint概念</p><p>在InnoDB的存储引擎中，LRU列表中还加入了midpoint位置。新读取到的页，虽然是最新访问的页，但并不是直接放入到LRU列表的首部，而是放入到LRU列表的midpoint位置。这个算法在InnoDB存储引擎下称为midpoint insertion strategy。在默认配置下，该位置在LRU列表长度的5&#x2F;8处。midpoint位置可由参数<code>innodb_old_blocks_pct</code>控制；</p></blockquote><p>可以通过调整下列参数，尽可能地保护热点数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- InnodbLRU算法midpoint的位置</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_old_blocks_pct&#x27;</span>;<br><span class="hljs-comment">-- midpoint位置的数据多久放入LRU热点数据位置  单位：毫秒</span><br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_old_blocks_time&#x27;</span>;<br><br><span class="hljs-comment">-- 查询LRU页的使用情况</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_BUFFER_PAGE_LRU;<br><br><span class="hljs-comment">-- 查询LRU页数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> information_schema.INNODB_BUFFER_PAGE_LRU;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/kjDMS6G7pvbtaOY.jpg" alt="image-20221011001228695"></p><h5 id="Free-List"><a href="#Free-List" class="headerlink" title="Free List"></a>Free List</h5><blockquote><p>Free List中存放的都是未曾使用的空闲Page，InnoDB需要Page时从Free List中获取，如果Free List为空，即没有任何空闲Page，则会从LRU List和Flush List中通过淘汰旧Page和Flush脏Page来回收Page。在InnoDB初始化时，会将Buffer chunks中的所有Page加入到Free List中。</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/F8uxSL5Xl3UCPZJ.jpg" alt="image-20221011001325067"></p><h5 id="Flush-List"><a href="#Flush-List" class="headerlink" title="Flush List"></a>Flush List</h5><blockquote><p>所有被修改过且还没来得及被flush到磁盘上的Page（脏页），都会被保存在这个链表中。所有保存在Flush List上的数据都会在LRU List中，但在LRU List中的数据不一定都在Flush List中。在Flush List上的每个Page都会保存其最早修改的lsn，即oldest_modification，虽然一个Page可能被修改多次，但只记录最早的修改。Flush List上的Page会按照其各自的oldest_modification进行降序排序，链表尾部保存oldest_modification最小的Page，在需要从Flush List中回收Page时，从尾部开始回收。</p><p> Innodb存储引擎会将脏页的控制块放入一个flush list的链表中，<font color=red>注意，这里链表中不是真实的缓存数据页，而是数据页对应的控制块。</font></p></blockquote><p><img src="https://s2.loli.net/2023/03/09/9OWfAghpnMxmlLw.jpg" alt="bh1ocl8tjo"></p><h4 id="Insert-Buffer"><a href="#Insert-Buffer" class="headerlink" title="Insert Buffer"></a>Insert Buffer</h4><blockquote><p>当进行插入操作时，表中只有一个自增主键（<font color=red><strong>插入时不能指定主键值，指定值就不是顺序插入了</strong></font>），没有其他二级索引，此时，只需要顺序插入主键索引树，不会出现随机访问多个页的情况，速度很快</p><p>但，实际情况下，一个表中很可能还有其他二级索引，插入非聚簇索引一定会涉及随机访问多个页，同时插入也不是顺序的</p></blockquote><h4 id="Change-Buffer"><a href="#Change-Buffer" class="headerlink" title="Change Buffer"></a>Change Buffer</h4><blockquote><p>InnoDB从1.0.x版本开始引入了Change Buffer，可将其视为Insert Buffer的升级。从这个版本开始，InnoDB存储引擎可以对DML操作——INSERT、DELETE、UPDATE都进行缓冲，他们分别是：Insert Buffer、Delete Buffer、Purge buffer。</p><p>Insert&#x2F;Change Buffer是一棵B+树</p><p>当然和之前Insert Buffer一样，Change Buffer适用的对象依然是非唯一的辅助索引。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment">-- changebuffer大小 innodb_change_buffer_max_size值默认为25，表示最多使用1/4的缓冲池内存空间。而需要注意的是，该参数的最大有效值为50</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_change_buffer_max_size&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="Double-Write"><a href="#Double-Write" class="headerlink" title="Double Write"></a>Double Write</h4><blockquote><p>双写主要作用就是防止刷新脏页时，脏页未完全写入磁盘出现系统故障，同时系统故障又导致了<strong>磁盘数据页的损坏</strong>，由于数据页的损坏系统重启后无法使用redolog进行恢复数据。</p><p>如果操作系统在将页写入磁盘的过程中发生了崩溃，在恢复过程中，InnoDB存储引擎可以从共享表空间中的doublewrite中找到该页的一个副本，将其复制到表空间文件，再应用重做日志。</p><p>在对缓冲池的脏页进行刷新时，并不直接写磁盘，而是会通过memcpy函数将脏页先复制到内存中的doublewrite buffer，之后通过doublewrite buffer再分两次，每次1MB顺序地写入共享表空间的物理磁盘上，然后马上调用fsync函数，同步磁盘，避免缓冲写带来的问题。</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/aAnpBrXKW46ZL8u.jpg" alt="image-20221011221835132"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 双写<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> STATUS <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_dblwr%&#x27;</span>;<br>innodb_dblwr_pages_written 写入的页数<br>innodb_dblwr_writes 写入次数<br></code></pre></td></tr></table></figure><h4 id="自适应哈希"><a href="#自适应哈希" class="headerlink" title="自适应哈希"></a>自适应哈希</h4><blockquote><p>（Adaptive Hash Index，AHI）是通过缓冲池的B+树页构造而来，因此建立的速度很快，而且不需要对整张表构建哈希索引。InnoDB存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引。</p><p><strong>自适应hash要求比较苛刻，个人觉得用处不大；用redis不香吗</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询是否开启自适应哈希</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_adaptive_hash_index&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="启动、关闭与恢复"><a href="#启动、关闭与恢复" class="headerlink" title="启动、关闭与恢复"></a>启动、关闭与恢复</h4><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;innodb_fast_shutdown&#x27;</span>;<br></code></pre></td></tr></table></figure><p>0表示在MySQL数据库关闭时，InnoDB需要完成所有的full purge和merge insert buffer，并且将所有的脏页刷新回磁盘。这需要一些时间，有时甚至需要几个小时来完成。如果在进行InnoDB升级时，必须将这个参数调为0，然后再关闭数据库。</p><p>1是参数innodb_fast_shutdown的默认值，表示不需要完成上述的full purge和merge insert buffer操作，但是在缓冲池中的一些数据脏页还是会刷新回磁盘。</p><p>2表示不完成full purge和merge insert buffer操作，也不将缓冲池中的数据脏页写回磁盘，而是将日志都写入日志文件。这样不会有任何事务的丢失，但是下次MySQL数据库启动时，会进行恢复操作（recovery）。</p></blockquote><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;innodb_force_recovery&#x27;</span>;<br></code></pre></td></tr></table></figure><p>该参数值默认为0，代表当发生需要恢复时，进行所有的恢复操作;</p><p>1(SRV_FORCE_IGNORE_CORRUPT)：忽略检查到的corrupt页。</p><p>2(SRV_FORCE_NO_BACKGROUND)：阻止Master Thread线程的运行，如Master Thread线程需要进行full purge操作，而这会导致crash。</p><p>3(SRV_FORCE_NO_TRX_UNDO)：不进行事务的回滚操作。</p><p>4(SRV_FORCE_NO_IBUF_MERGE)：不进行插入缓冲的合并操作。</p><p>5(SRV_FORCE_NO_UNDO_LOG_SCAN)：不查看撤销日志（Undo Log），InnoDB存储引擎会将未提交的事务视为已提交。</p><p>6(SRV_FORCE_NO_LOG_REDO)：不进行前滚的操作。</p><p>需要注意的是，在设置了参数innodb_force_recovery大于0后，用户可以对表进行select、create和drop操作，但insert、update和delete这类DML操作是不允许的。</p></blockquote><h3 id="重做日志缓冲"><a href="#重做日志缓冲" class="headerlink" title="重做日志缓冲"></a>重做日志缓冲</h3><blockquote><p>重做日志缓冲（redo log buffer）</p><p>InnoDB存储引擎首先将重做日志信息先放入到这个缓冲区，然后按一定频率将其刷新到重做日志文件。重做日志缓冲一般不需要设置得很大，因为一般情况下每一秒钟会将重做日志缓冲刷新到日志文件，因此用户只需要保证每秒产生的事务量在这个缓冲大小之内即可。该值可由配置参数<code>innodb_log_buffer_size</code>控制，默认为8MB</p></blockquote><p>Redo log落盘时机：</p><ul><li><p>Master Thread每一秒将重做日志缓冲刷新到重做日志文件；</p></li><li><p>每个事务提交时会将重做日志缓冲刷新到重做日志文件；</p></li><li><p>当重做日志缓冲池剩余空间小于1&#x2F;2时，重做日志缓冲刷新到重做日志文件。</p></li></ul><h3 id="额外的内存池"><a href="#额外的内存池" class="headerlink" title="额外的内存池"></a>额外的内存池</h3><blockquote><p>每个缓冲池(innodb_buffer_pool)中的帧缓冲（frame buffer）对应缓冲控制对象（buffer control block），这些对象记录了一些诸如LRU、锁、等待等信息，而这个对象的内存需要从额外内存池中申请。因此，在申请了很大的InnoDB缓冲池时，也应考虑相应地增加这个值。</p></blockquote><h2 id="CheckPoint"><a href="#CheckPoint" class="headerlink" title="CheckPoint"></a>CheckPoint</h2><blockquote><p><font color=red><strong>checkpoint指的是当前要擦除的位置，主要作用是刷新脏页</strong></font></p><p>为了避免发生数据丢失的问题，当前事务数据库系统普遍都采用了Write Ahead Log策略，即当事务提交时，先写重做日志，再修改页。当由于发生宕机而导致数据丢失时，通过重做日志来完成数据的恢复。这也是事务ACID中D（Durability持久性）的要求。</p></blockquote><p>在InnoDB存储引擎内部，有两种Checkpoint，分别为：</p><ul><li><p>Sharp Checkpoint</p><blockquote><p>Sharp Checkpoint发生在数据库关闭时将所有的脏页都刷新回磁盘，这是默认的工作方式，即参数innodb_fast_shutdown&#x3D;1。</p></blockquote></li><li><p>Fuzzy Checkpoint</p><blockquote><p>InnoDB存储引擎内部使用Fuzzy Checkpoint进行页的刷新，即只刷新一部分脏页，而不是刷新所有的脏页回磁盘。在InnoDB存储引擎中可能发生如下几种情况的Fuzzy Checkpoint</p></blockquote><ul><li><p>Master Thread Checkpoint</p><blockquote><p>Master Thread差不多以<strong>每秒或每十秒的速度从缓冲池的脏页列表中刷新一定比例的页回磁盘</strong>。这个过程是异步的，即此时InnoDB存储引擎可以进行其他的操作，用户查询线程不会阻塞。</p></blockquote></li><li><p>FLUSH_LRU_LIST Checkpoint</p><blockquote><p><strong>Page Cleaner线程</strong>会检查<strong>LRU列表中是否小于1024个空闲页</strong>，如果小于，则将LRU列表尾端的页移除。如果这些页中有脏页，那么需要进行Checkpoint，而此时脏页是从LRU列表中选取的。</p><p><code>innodb_lru_scan_depth</code>设置LRU空闲页的个数，默认1024</p></blockquote></li><li><p>Dirty Page too much Checkpoint</p><blockquote><p>当缓冲池的脏页占据一定比例时，会强制CheckPoint</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 脏页比例默认<span class="hljs-number">90</span><span class="hljs-operator">%</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;innodb_max_dirty_pages_pct&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>Async&#x2F;Sync Flush Checkpoint</p><blockquote><p>Async&#x2F;Sync Flush Checkpoint指的是<strong>重做日志文件不可用</strong>的情况，这时<strong>Page Cleaner线程</strong>强制将一些页刷新回磁盘，而此时脏页是从脏页列表中选取的。</p><p><font color=red>redo log采用的是循环写模式，当到达一定的阈值就会触发此类checkpoint，导致用户线程暂时阻塞</font></p></blockquote></li></ul></li></ul><p>​</p><blockquote><p>对于InnoDB存储引擎而言，其是通过LSN（Log Sequence Number）来标记版本的。而LSN是8字节的数字，其单位是字节。每个页有LSN，重做日志中也有LSN，Checkpoint也有LSN。</p></blockquote><p>参考：</p><ol><li>MySQL技术内幕：Innodb存储引擎第二版</li><li><a href="http://mysql.taobao.org/monthly/2020/02/">http://mysql.taobao.org/monthly/2020/02/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>Innodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown图片图床迁移</title>
    <link href="/2023/03/09/%E5%B7%A5%E5%85%B7/markdown%E5%9B%BE%E7%89%87%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/"/>
    <url>/2023/03/09/%E5%B7%A5%E5%85%B7/markdown%E5%9B%BE%E7%89%87%E5%9B%BE%E5%BA%8A%E8%BF%81%E7%A7%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown图片图床迁移"><a href="#markdown图片图床迁移" class="headerlink" title="markdown图片图床迁移"></a>markdown图片图床迁移</h1><blockquote><p>由于新浪图床失效，需要将markdown图片迁移到其他图床</p></blockquote><ol><li><p>临时解决新浪图床失效</p><p>在https后加入cdn路径<code>cdn.cdnjson.com/</code></p><p>失效地址：<a href="https://tva1.sinaimg.cn/large/006y8mN6ly1h6vn6q61xyj317x0u00xj.jpg">https://tva1.sinaimg.cn/large/006y8mN6ly1h6vn6q61xyj317x0u00xj.jpg</a></p><p>修复后地址：<a href="https://cdn.cdnjson.com/tva1.sinaimg.cn/large/006y8mN6ly1h6vn6q61xyj317x0u00xj.jpg">https://cdn.cdnjson.com/tva1.sinaimg.cn/large/006y8mN6ly1h6vn6q61xyj317x0u00xj.jpg</a></p></li><li><p>批量修改markdown图片的图床</p><blockquote><p>参考picgo的插件<code>picgo-plugin-pic-migrater</code></p><p><a href="https://github.com/PicGo/picgo-plugin-pic-migrater/blob/master/README_CN.md">https://github.com/PicGo/picgo-plugin-pic-migrater/blob/master/README_CN.md</a></p></blockquote><p>安装插件</p><p><img src="https://s2.loli.net/2023/03/09/MW3Ymv6nsjLEr7P.png" alt="image-20230309184349369"></p></li></ol><p>​</p><p>插件配置<img src="https://s2.loli.net/2023/03/10/DchBqblmYI9evHg.png" alt="image-20230310113926284"></p><p><img src="https://s2.loli.net/2023/03/10/nl45jLw8x9uV2OI.png" alt="image-20230310114049127"></p><p>插件使用，对指定文件或文件夹进行批量迁移到smms图床</p><p><img src="https://s2.loli.net/2023/03/10/2YR4Q1v3qjxdXcn.png" alt="image-20230310114143841"></p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>picbed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数式编程</title>
    <link href="/2023/03/09/Java/CleanCode/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/03/09/Java/CleanCode/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><p>格式：只关注方法参数与方法体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(参数列表) -&gt; &#123;代码&#125;<br></code></pre></td></tr></table></figure><p>省略规则：</p><blockquote><ul><li>参数类型可以省略</li><li>方法体只有一句代码，大括号return和唯一一句代码的分号可以省略</li><li>方法只有一个参数时，小括号可以省略</li></ul></blockquote><h4 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h4><p>单列集合：<code>集合对象</code>.stream()</p><p>数组：Arrays.stream(数组)或者使用Stream.of()</p><p>双列集合：转换成单列集合再创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; stream = map.entrySet().stream();<br></code></pre></td></tr></table></figure><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><blockquote><p>filter() 过滤</p></blockquote><blockquote><p>map() 类型转换或计算</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/S1i6rYDewvRn9yb.jpg" alt="image-20220331232607054"></p><blockquote><p>distinct() 去重，去重的依据是Object的equals方法</p></blockquote><blockquote><p>sorted() 排序</p></blockquote><blockquote><p>limit() 限制流中元素的长度</p></blockquote><blockquote><p>skip() 跳过</p></blockquote><blockquote><p>flatMap() 将一个元素转换为多个元素，即目标类型仍然是Stream</p></blockquote><h4 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h4><blockquote><p>forEach() 遍历</p><p>count() 统计数量</p><p>max&amp;min 最大值 最小值</p><p>collect() 将流中的元素转换为集合</p><ul><li>转换为List: collect(Collectors.toList());</li><li>转换为Set: collect(Collectors.toSet());</li><li>转换为Map: collect(Collectors.toMap());其中参数时两个Function，即key和value的转换规则</li></ul><p>anyMatch: 任意一个匹配到就返回TRUE</p><p>allMatch: 所有的都匹配则返回TRUE</p><p>noneMatch: 都不匹配返回TRUE</p><p>findAny: 获取任意一个元素，随机匹配</p><p>findFirst: 查找流中的第一个元素</p><p>reduce(): 将Stream中的元素归并为一个结果，思想来源于Google的MapReduce</p></blockquote><h4 id="Stream流的特性"><a href="#Stream流的特性" class="headerlink" title="Stream流的特性"></a>Stream流的特性</h4><ul><li>惰性求值</li><li>不能重复使用同一个流对象</li><li>不会影响原数据</li><li>短路</li></ul><h4 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h4><h5 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实际使用过程中，不会这样操作，而是将方法返回值定义为Optional对象，直接拿过来用Optional对象就可以了</span><br>Optional&lt;User&gt; user = Optional.ofNullable(user);<br><span class="hljs-comment">//of方法会出现空指针，不建议使用</span><br>Optional&lt;User&gt; user = Optional.of(user);<br><span class="hljs-comment">//注：在mybatis3.5中返回的对象就已经被封装成Optional对象了</span><br></code></pre></td></tr></table></figure><h5 id="安全消费"><a href="#安全消费" class="headerlink" title="安全消费"></a>安全消费</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">user.ifPresent(u -&gt; System.out.println(user));<br></code></pre></td></tr></table></figure><h5 id="安全获取值"><a href="#安全获取值" class="headerlink" title="安全获取值"></a>安全获取值</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//get()不推荐使用，不存在值会抛出NoSuchElementException</span><br>user.get();<br><span class="hljs-comment">//如果不存在返回一个默认值</span><br>user.orElseGet(()-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br><span class="hljs-comment">//用于统一异常处理</span><br>user.orElseThrow(()-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(<span class="hljs-string">&quot;空对象&quot;</span>));<br><br></code></pre></td></tr></table></figure><h5 id="安全过滤"><a href="#安全过滤" class="headerlink" title="安全过滤"></a>安全过滤</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//过滤姓名长度大于10的进行输出</span><br>user.filter(u-&gt;u.getName().length()&gt;<span class="hljs-number">10</span>).ifPresent(u -&gt; System.out.println(user));<br></code></pre></td></tr></table></figure><h5 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">user.map(u -&gt; u.getPets()).isPresent(pets -&gt; System.out.println(pets));<br></code></pre></td></tr></table></figure><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>格式</p><blockquote><p>类名或对象名::方法名</p></blockquote><h4 id="基本数据类型的优化"><a href="#基本数据类型的优化" class="headerlink" title="基本数据类型的优化"></a>基本数据类型的优化</h4><blockquote><p>直接使用mapToInt, matToLong,flatMatToInt等，将数据转换为基本数据类型，尽量避免在流操作的过程中频繁的自动拆箱和装箱</p></blockquote><h4 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h4><blockquote><p>线程安全</p><p>使用：</p><p>通过调用Stream对象的parallel方法转换为并行流</p><p>或者直接对集合对象调用parallelStream方法直接获取并行流</p></blockquote><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><blockquote><p>当需要对流进行断点调试时，可以在任意中间操作中直接调用peek方法，进行调试</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java开发工具类</title>
    <link href="/2023/03/09/Java/CleanCode/Java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2023/03/09/Java/CleanCode/Java%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Java开发工具类"><a href="#Java开发工具类" class="headerlink" title="Java开发工具类"></a>Java开发工具类</h2><h3 id="对象与Map转换"><a href="#对象与Map转换" class="headerlink" title="对象与Map转换"></a>对象与<code>Map</code>转换</h3><ol><li>对象转<code>Map&lt;String, String&gt;</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-keyword">try</span> &#123;<br>  Map&lt;String, String&gt; map = org.apache.commons.beanutils.BeanUtils.describe(student);<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>  e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>  e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>  e.printStackTrace();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ol start="2"><li>对象转<code>Map&lt;String, Object&gt;</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; map = cn.hutool.core.bean.BeanUtil.beanToMap(Student);<br></code></pre></td></tr></table></figure><h3 id="字符串与JSON转换"><a href="#字符串与JSON转换" class="headerlink" title="字符串与JSON转换"></a>字符串与JSON转换</h3><h3 id="Git远程仓库回滚"><a href="#Git远程仓库回滚" class="headerlink" title="Git远程仓库回滚"></a>Git远程仓库回滚</h3><blockquote><ol><li>通过IDEA将本地分支重置到要回滚到的记录，已提交的代码会恢复到未提交状态</li></ol><p><img src="https://s2.loli.net/2023/03/09/7GjkrAbPWvVimRB.jpg" alt="image-20220516214045177"></p><p><img src="https://s2.loli.net/2023/03/09/SnOCF5ay4QXPr7W.jpg" alt="image-20220516222259269"></p><ol start="2"><li>然后<code>git push -f</code> 强制覆盖远程的分支，随后可以将本地未提交的代码回滚或者修改后再提交</li></ol></blockquote><h3 id="Spring静态注入Bean"><a href="#Spring静态注入Bean" class="headerlink" title="Spring静态注入Bean"></a>Spring静态注入Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AllScData</span> &#123;<br>    <span class="hljs-comment">// 先正常注入</span><br>  <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JedisClusterBSJ jedisClusterBSJ;<br><br>    <span class="hljs-comment">// 定义一个静态变量用于接收注入的Bean</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisClusterBSJ jedis;<br><br>  <span class="hljs-comment">// 通过PostConstruct初始化</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        AllScData.jedis = jedisClusterBSJ;<br>    &#125;<br><br>  <span class="hljs-comment">// 在各种坑爹的静态方法中愉快的使用静态注入的Bean</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(String terminalNo, BaseScData baseScData)</span> &#123;<br>      <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(terminalNo) &amp;&amp; ObjectUtil.isNotNull(baseScData)) &#123;<br>        jedis.set(terminalNo, JSONObject.toJSONString(baseScData));<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        log.warn(<span class="hljs-string">&quot;push的学生卡数据为空!&quot;</span>);<br>      &#125;<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装软件</title>
    <link href="/2023/03/09/CloudNative/Docker/Docker%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    <url>/2023/03/09/CloudNative/Docker/Docker%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="安装Rocketmq"><a href="#安装Rocketmq" class="headerlink" title="安装Rocketmq"></a>安装Rocketmq</h2><p>官方文档</p><blockquote><p><a href="https://github.com/apache/rocketmq-docker">https://github.com/apache/rocketmq-docker</a></p></blockquote><ol><li>克隆镜像仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/apache/rocketmq-docker.git<br></code></pre></td></tr></table></figure><ol start="2"><li>构建docker镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> image-build<br>sh build-image.sh RMQ-VERSION BASE-IMAGE<br><span class="hljs-comment"># 例子</span><br>sh build-image.sh 4.9.4 centos<br></code></pre></td></tr></table></figure><blockquote><p>RMQ-VERSION:即rocketmq的版本号  </p><p>参考 <a href="https://archive.apache.org/dist/rocketmq/">https://archive.apache.org/dist/rocketmq/</a></p><p>Dashborad版本 <a href="https://archive.apache.org/dist/rocketmq/rocketmq-dashboard/">https://archive.apache.org/dist/rocketmq/rocketmq-dashboard/</a></p><p>BASE-IMAGE:基础镜像 可选centos或者alpine</p></blockquote><ol start="3"><li>生成运行脚本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh stage.sh RMQ-VERSION<br><span class="hljs-comment"># 例如</span><br>sh stage.sh 4.9.4<br></code></pre></td></tr></table></figure><ol start="4"><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> stages/4.9.4<br>./play-docker.sh centos<br></code></pre></td></tr></table></figure><p>5. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> stages/4.5.0<br>./play-docker-tls.sh<br><br><span class="hljs-comment"># Once nameserver and broker startup correctly, you still can use the following script to test produce/consume in SSL mode, why, due to they still use the SSL setting which exists in JAVA-OPT of the docker rmqbroker container. </span><br>./play-producer.sh<br>./play-consumer.sh<br></code></pre></td></tr></table></figure><p>Dashboard安装</p><p>方案1</p><ol><li>构建镜像</li></ol><blockquote><p>构建镜像可能会失败，我失败了好几次都没成功</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/hCVZyofwQ5j3rlb.jpg" alt="image-20220914193603866"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> image-build<br>sh build-image-dashboard.sh `VERSION` centos<br><span class="hljs-comment"># 例子</span><br>sh build-image-dashboard.sh 1.0.0 centos<br></code></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh product/start-dashboard.sh `VERSION`<br><span class="hljs-comment"># 例子</span><br>sh product/start-dashboard.sh 1.0.0<br></code></pre></td></tr></table></figure><p>方案2</p><ol><li>拉去镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull apacherocketmq/rocketmq-dashboard:latest<br></code></pre></td></tr></table></figure><ol start="2"><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name rocketmq-dashboard -e <span class="hljs-string">&quot;JAVA_OPTS=-Drocketmq.namesrv.addr=localhost:9876&quot;</span> -p 8080:8080 -t apacherocketmq/rocketmq-dashboard:latest<br></code></pre></td></tr></table></figure><h2 id="安装nacos"><a href="#安装nacos" class="headerlink" title="安装nacos"></a>安装nacos</h2><ol><li>克隆镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/nacos-group/nacos-docker.git<br><span class="hljs-built_in">cd</span> nacos-docker<br></code></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 单机模式 Derby</span><br>docker-compose -f example/standalone-derby.yaml up<br><br><span class="hljs-comment"># 单机模式 MySQL5.7</span><br>docker-compose -f example/standalone-mysql-5.7.yaml up<br><br><span class="hljs-comment"># 单机模式 MySQL8</span><br>docker-compose -f example/standalone-mysql-8.yaml up<br><br><span class="hljs-comment"># 集群</span><br>docker-compose -f example/cluster-hostname.yaml up <br><br></code></pre></td></tr></table></figure><ol start="3"><li>坑</li></ol><blockquote><p>官方镜像目前还不支持mac M1</p><p>需要将compose文件<code>example/standalone-derby.yaml</code>中的镜像替换为<code>nacos/nacos-server:v2.0.4-slim</code>，如下</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server:v2.0.4-slim</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nacos-standalone</span><br>    <span class="hljs-attr">environment:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">PREFER_HOST_MODE=hostname</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">MODE=standalone</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./standalone-logs/:/home/nacos/logs</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">./init.d/custom.properties:/home/nacos/init.d/custom.properties</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8848:8848&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9848:9848&quot;</span><br>  <span class="hljs-attr">prometheus:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">prometheus</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">prom/prometheus:latest</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./prometheus/prometheus-standalone.yaml:/etc/prometheus/prometheus.yml</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9090:9090&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br>  <span class="hljs-attr">grafana:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">grafana</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">grafana/grafana:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3000</span><span class="hljs-string">:3000</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">on-failure</span><br><br></code></pre></td></tr></table></figure><ol start="4"><li>坑</li></ol><blockquote><p>Mysql一直报错，后来换成Derby就起来了</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CloudNative</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多台电脑的虚拟机互联</title>
    <link href="/2023/03/09/%E8%BF%90%E7%BB%B4/%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%92%E8%81%94/"/>
    <url>/2023/03/09/%E8%BF%90%E7%BB%B4/%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%92%E8%81%94/</url>
    
    <content type="html"><![CDATA[<h3 id="多台电脑的虚拟机互联"><a href="#多台电脑的虚拟机互联" class="headerlink" title="多台电脑的虚拟机互联"></a>多台电脑的虚拟机互联</h3><ol><li>虚拟机网络连接方式设置为桥接</li><li>查看宿主机网络信息</li></ol><p><img src="https://s2.loli.net/2023/03/09/APEX7OiFHZmuk1b.jpg" alt="xxx"></p><ol start="3"><li>配置虚拟机网络</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/jOTJD29FRIuCMxf.jpg" alt="yyy"></p><ol start="4"><li>重启虚拟机网络</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service network restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Terminal快速打开文件</title>
    <link href="/2023/03/09/%E8%BF%90%E7%BB%B4/Terminal%20%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/"/>
    <url>/2023/03/09/%E8%BF%90%E7%BB%B4/Terminal%20%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="Terminal-快速打开文件"><a href="#Terminal-快速打开文件" class="headerlink" title="Terminal 快速打开文件"></a>Terminal 快速打开文件</h3><h4 id="typora配置"><a href="#typora配置" class="headerlink" title="typora配置"></a>typora配置</h4><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这种方式是通用的</span><br><span class="hljs-comment"># 在zshrc中加入下面配置，并通过source使其生效</span><br><span class="hljs-built_in">alias</span> ty=<span class="hljs-string">&quot;open -a typora&quot;</span><br><br><span class="hljs-comment"># 使用</span><br>在terminal中输入‘ty 文件名’，即可打开并编辑指定文件<br>在terminal中输入‘ty .’，即可打开整个文件夹并新建一个新的文件<br></code></pre></td></tr></table></figure></blockquote><h4 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h4><blockquote><ol><li><p>打开 VSCode</p></li><li><p>打开控制面板(<code>⇧⌘P</code>), 输入 <code>shell command</code>, 在提示里看到  <code>Shell Command: Install &#39;code&#39; command in PATH</code>, 运行它就可以了。</p><p><img src="https://s2.loli.net/2023/03/09/wlhXTxWEZa45Gi7.jpg" alt="img"></p></li></ol><p>使用</p><p>输入code 文件名或者code .</p></blockquote><h4 id="Sublime配置"><a href="#Sublime配置" class="headerlink" title="Sublime配置"></a>Sublime配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用Sublime提供的命令行工具subl并创建软链接即可</span><br><br>sudo <span class="hljs-built_in">ln</span> -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl<br><br><span class="hljs-comment"># 使用</span><br>输入subl 文件名 或者 subl .<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring源码总结</title>
    <link href="/2023/03/09/%E6%A1%86%E6%9E%B6/SpringSecurity/"/>
    <url>/2023/03/09/%E6%A1%86%E6%9E%B6/SpringSecurity/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h3><p> WebSecurityConfigurerAdapter</p><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><h4 id="Oauth2-0"><a href="#Oauth2-0" class="headerlink" title="Oauth2.0"></a>Oauth2.0</h4><p>主要解决第三方登录问题，并获取用户资源</p><h4 id="SpringSecurityOauth2"><a href="#SpringSecurityOauth2" class="headerlink" title="SpringSecurityOauth2"></a>SpringSecurityOauth2</h4><p><img src="E:\我的\学习文档\md-pic\image-20210831083150466.png" alt="image-20210831083150466"></p><p><img src="E:\我的\学习文档\md-pic\image-20210831083420274.png" alt="image-20210831083420274"></p><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p><img src="https://s2.loli.net/2023/03/09/VqUmPOsMlKaL4Xk.jpg" alt="image-20220831221658375"></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringSecurity</tag>
      
      <tag>source</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自动装配</title>
    <link href="/2023/03/09/%E6%A1%86%E6%9E%B6/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <url>/2023/03/09/%E6%A1%86%E6%9E%B6/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="自动装配流程"><a href="#自动装配流程" class="headerlink" title="自动装配流程"></a>自动装配流程</h3><pre><code class=" mermaid">flowchart LRSpringBootApplication --&gt; EnableAutoConfiguration --&gt; AutoConfigurationImportSelector --&gt; selectImports</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;<br>  <span class="hljs-comment">// 判断自动装配开关是否打开</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isEnabled(annotationMetadata)) &#123;<br>            <span class="hljs-keyword">return</span> NO_IMPORTS;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 加载自动配置类</span><br>            AutoConfigurationImportSelector.<span class="hljs-type">AutoConfigurationEntry</span> <span class="hljs-variable">autoConfigurationEntry</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);<br><span class="hljs-keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>自动装配的具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> AutoConfigurationImportSelector.AutoConfigurationEntry <span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AnnotationMetadata annotationMetadata)</span> &#123;<br>       <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isEnabled(annotationMetadata)) &#123;<br>           <span class="hljs-keyword">return</span> EMPTY_ENTRY;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-comment">// 获取EnableAutoConfiguration注解中的 exclude 和 excludeName</span><br>           <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getAttributes(annotationMetadata);<br>         <span class="hljs-comment">// 获取需要自动装配的所有配置类，读取META-INF/spring.factories</span><br>           List&lt;String&gt; configurations = <span class="hljs-built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);<br>         <span class="hljs-comment">// 移除需要排除的配置类</span><br>           configurations = <span class="hljs-built_in">this</span>.removeDuplicates(configurations);<br>           Set&lt;String&gt; exclusions = <span class="hljs-built_in">this</span>.getExclusions(annotationMetadata, attributes);<br>           <span class="hljs-built_in">this</span>.checkExcludedClasses(configurations, exclusions);<br>         <span class="hljs-comment">// 移除需要排除的配置类</span><br>           configurations.removeAll(exclusions);<br>         <span class="hljs-comment">// 根据@ConditionalOnXXX过滤配置类</span><br>           configurations = <span class="hljs-built_in">this</span>.getConfigurationClassFilter().filter(configurations);<br>           <span class="hljs-built_in">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationImportSelector</span>.AutoConfigurationEntry(configurations, exclusions);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="自定义Starter"><a href="#自定义Starter" class="headerlink" title="自定义Starter"></a>自定义Starter</h3><ol><li><p>创建threadpool-spring-boot-starter工程</p><p><img src="https://s2.loli.net/2023/03/09/b35nmHou8XBrf7Y.jpg" alt="1ff0ebe7844f40289eb60213af72c5a6_tplv-k3u1fbpfcp-watermark"></p></li><li><p>引入 Spring Boot 相关依赖</p><p><img src="https://s2.loli.net/2023/03/09/4fW1XNUoG8wMdYb.jpg" alt="5e14254276604f87b261e5a80a354cc0_tplv-k3u1fbpfcp-watermark"></p></li><li><p>创建ThreadPoolAutoConfiguration</p><p><img src="https://s2.loli.net/2023/03/09/8LkhCtreRMUNvyT.jpg" alt="1843f1d12c5649fba85fd7b4e4a59e39_tplv-k3u1fbpfcp-watermark"></p></li><li><p>在threadpool-spring-boot-starter工程的 resources 包下创建META-INF&#x2F;spring.factories文件</p><p><img src="https://s2.loli.net/2023/03/09/H231u8yARTVOzBF.jpg" alt="97b738321f1542ea8140484d6aaf0728~tplv-k3u1fbpfcp-watermark"></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度云数据同步到群晖</title>
    <link href="/2023/03/09/Synology/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%88%B0%E7%BE%A4%E6%99%96/"/>
    <url>/2023/03/09/Synology/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%88%B0%E7%BE%A4%E6%99%96/</url>
    
    <content type="html"><![CDATA[<h1 id="百度云数据同步到群晖"><a href="#百度云数据同步到群晖" class="headerlink" title="百度云数据同步到群晖"></a>百度云数据同步到群晖</h1><ol><li>在群晖套件中打开Cloud Sync，没有安装请自行安装</li></ol><p><img src="https://s2.loli.net/2023/03/09/SCDHtwAF4TufXj9.jpg" alt="image-20221008234249452"></p><ol start="2"><li>授权百度云权限并设置同步信息</li></ol><p><img src="https://s2.loli.net/2023/03/09/C8hK4SwVldDGkmR.jpg" alt="image-20221008232956173"></p><blockquote><p>本地路径：要同步到群晖系统的路径</p><p>远程路径：根文件夹指的是百度云-我的应用数据-Cloud Sync，默认会创建该文件夹</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/KRA4QTodbymN6qf.jpg" alt="image-20221008233522611"></p><ol start="3"><li>将要同步的文件移动到Cloud Sync文件夹，即可自动向群晖同步数据。</li></ol><p><img src="https://s2.loli.net/2023/03/09/n95GdE3bTsrAXU8.jpg" alt="image-20221008233837673"></p><p><img src="https://s2.loli.net/2023/03/09/JDUlwuie8M6vfVL.jpg" alt="image-20221008234200184"></p>]]></content>
    
    
    <categories>
      
      <category>Synology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Synology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zookeeper学习笔记</title>
    <link href="/2023/03/09/Middleware/Zookeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/09/Middleware/Zookeeper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Zookeeper学习笔记"><a href="#Zookeeper学习笔记" class="headerlink" title="Zookeeper学习笔记"></a>Zookeeper学习笔记</h3><p><img src="https://s2.loli.net/2023/03/09/vmPEOeqA56Dsx1H.jpg" alt="image-20220404211140955"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># The number of milliseconds of each tick</span><br><span class="hljs-comment"># 每次的心跳时间，指的是客户端与服务端或者服务端与服务端，如果超过2秒钟，说明连接断开</span><br><span class="hljs-attr">tickTime</span>=<span class="hljs-string">2000</span><br><span class="hljs-comment"># The number of ticks that the initial </span><br><span class="hljs-comment"># synchronization phase can take</span><br><span class="hljs-comment"># 初始化时的心跳个数，指的是第一次Leader与Follower建立连接时的通信心跳个数，即20秒，如果超过20秒则表示建立连接失败</span><br><span class="hljs-attr">initLimit</span>=<span class="hljs-string">10</span><br><span class="hljs-comment"># The number of ticks that can pass between </span><br><span class="hljs-comment"># sending a request and getting an acknowledgement</span><br><span class="hljs-comment"># 指的是非第一次通信时，Leader与Follower建立连接时的通信心跳个数</span><br><span class="hljs-attr">syncLimit</span>=<span class="hljs-string">5</span><br><span class="hljs-comment"># the directory where the snapshot is stored.</span><br><span class="hljs-comment"># do not use /tmp for storage, /tmp here is just </span><br><span class="hljs-comment"># example sakes.</span><br><span class="hljs-comment"># zookeeper数据目录，不能存在tmp目录，Linux会定期回收tmp里的文件</span><br><span class="hljs-attr">dataDir</span>=<span class="hljs-string">/Users/unclebryan/DevTools/apache-zookeeper-3.7.0-bin/data</span><br><span class="hljs-comment"># 日志文件</span><br><span class="hljs-attr">dataLogDir</span>=<span class="hljs-string">/Users/unclebryan/DevTools/apache-zookeeper-3.7.0-bin/logs</span><br><span class="hljs-comment"># the port at which the clients will connect</span><br><span class="hljs-comment"># 客户端与服务端通信端口</span><br><span class="hljs-attr">clientPort</span>=<span class="hljs-string">2181</span><br><span class="hljs-comment"># the maximum number of client connections.</span><br><span class="hljs-comment"># increase this if you need to handle more clients</span><br><span class="hljs-comment">#maxClientCnxns=60</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Be sure to read the maintenance section of the </span><br><span class="hljs-comment"># administrator guide before turning on autopurge.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># The number of snapshots to retain in dataDir</span><br><span class="hljs-comment">#autopurge.snapRetainCount=3</span><br><span class="hljs-comment"># Purge task interval in hours</span><br><span class="hljs-comment"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="hljs-comment">#autopurge.purgeInterval=1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## Metrics Providers</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># https://prometheus.io Metrics Exporter</span><br><span class="hljs-comment">#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span><br><span class="hljs-comment">#metricsProvider.httpPort=7000</span><br><span class="hljs-comment">#metricsProvider.exportJvmInfo=true</span><br><br></code></pre></td></tr></table></figure><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><blockquote><p>每一个节点都要修改</p><ol><li>在zk的数据目录新建一个myid文件，输入myid的值</li><li>在zoo.cfg中加入集群配置信息，如下</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 集群模式 1代表myid,2888是Follower与Leader的交换端口，3888是选举端口</span><br>server.1=unclebryan01:2888:3888<br>server.2=unclebryan02:2888:3888<br>server.3=unclebryan03:2888:3888<br><br><span class="hljs-comment"># ps. 记得关闭防火墙</span><br>1. firewall-cmd --reload                  <span class="hljs-comment">#重启firewall</span><br>2. firewall-cmd  --state                  <span class="hljs-comment">#查看防火墙状态</span><br>3. systemctl start firewalld.service      <span class="hljs-comment">#开启firewall</span><br>4. systemctl stop firewalld.service       <span class="hljs-comment">#停止firewall</span><br>5. systemctl <span class="hljs-built_in">disable</span> firewalld.service    <span class="hljs-comment">#禁止firewall开机启动</span><br><br><span class="hljs-comment"># 分别启动zk服务</span><br>zkServer.sh start<br>zkServer.sh status 查看状态<br></code></pre></td></tr></table></figure><h4 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动客户端</span><br>zkCli.sh -server unclebryan01:2181<br></code></pre></td></tr></table></figure><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -s /<br><br>[zookeeper]<br><span class="hljs-comment"># 创建节点时的事务id</span><br>cZxid = 0x0<br>ctime = Thu Jan 01 08:00:00 CST 1970<br><span class="hljs-comment"># 最后更新的事务id</span><br>mZxid = 0x0<br>mtime = Thu Jan 01 08:00:00 CST 1970<br><span class="hljs-comment"># 最后更新的子节点的事务id</span><br>pZxid = 0x0<br><span class="hljs-comment"># 子节点的版本号，即子节点的修改次数</span><br>cversion = -1<br><span class="hljs-comment"># 数据版本号</span><br>dataVersion = 0<br><span class="hljs-comment"># 访问控制列表的版本号</span><br>aclVersion = 0<br><span class="hljs-comment"># 临时节点的拥有者的sessionid，如果不是临时节点则为0</span><br>ephemeralOwner = 0x0<br><span class="hljs-comment"># 数据的长度</span><br>dataLength = 0<br><span class="hljs-comment"># 子节点个数</span><br>numChildren = 1<br><br><span class="hljs-comment"># 永久无序</span><br>create /node1 node1<br><span class="hljs-comment"># 永久有序，序号由父节点决定 真正的节点名为节点名+00000001....</span><br>create -s /node2 node2 <br><br><span class="hljs-comment"># 临时无序</span><br>create -e /node3 node3<br><span class="hljs-comment"># 临时有序，序号由父节点决定 真正的节点名为节点名+00000001....</span><br>create -e -s /node4 node4<br><br><br><span class="hljs-comment"># 获取节点信息</span><br>get -s /node1<br><br><br><span class="hljs-comment"># 单节点删除</span><br>delete /node1/n1<br><br><span class="hljs-comment"># 删除整个节点，包括子节点</span><br>deleteall /node1<br></code></pre></td></tr></table></figure><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h4><ul><li><p>持久的</p><blockquote><p>断开连接不删除</p></blockquote></li><li><p>临时的</p><blockquote><p>客户端与服务端断开连接就删除临时节点</p></blockquote></li><li><p>有序的</p></li><li><p>无序的</p></li></ul><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><blockquote><p>注意：监听是不能重复监听，需要重复监听就需要重复watch</p></blockquote><ul><li><p>监听节点值的变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过某个客户端设置监听的节点</span><br>get -w /node1<br><br><span class="hljs-comment">#在其他客户端修改节点值</span><br><span class="hljs-built_in">set</span> /node1 <span class="hljs-built_in">test</span><br><br><br><span class="hljs-comment"># 监听客户端收到如下通知</span><br>WATCHER::<br><br>WatchedEvent state:SyncConnected <span class="hljs-built_in">type</span>:NodeDataChanged path:/node1<br><br></code></pre></td></tr></table></figure></li><li><p>监听子节点节点数的变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过某个客户端设置监听的节点</span><br><span class="hljs-built_in">ls</span> -w /node1<br><br><span class="hljs-comment"># 当有新增或者删除节点时，客户端会收到如下通知</span><br>WATCHER::<br><br>WatchedEvent state:SyncConnected <span class="hljs-built_in">type</span>:NodeChildrenChanged path:/node1<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h4><ul><li><p>首次启动集群</p><blockquote><p>服务器1启动</p><ul><li>投自己一票</li><li>此时集群中只有一个节点，不进行选票传递</li><li>判断自己的选票有没有大于集群中的半数节点，即是否大于3，不大于进入LOOKING状态</li></ul><p>服务器2启动</p><ul><li>投自己一票</li><li>进行选票传递，服务器1的myid小于服务器2的myid，服务器1将选票传递给服务器2，此时服务器1的选票为0，服务器2的选票为2</li><li>判断自己的选票有没有大于集群中的半数节点，即是否大于3，不大于进入LOOKING状态</li></ul><p>服务器3启动</p><ul><li>投自己一票</li><li>进行选票传递，服务器2的myid小于服务器3的myid，服务器2将选票传递给服务器3，此时服务器1、2的选票均为0，服务器3的选票为3</li><li>判断自己的选票有没有大于集群中的半数节点，即是否大于3，大于3，选举成功，此时服务器3是Leader节点，状态由LOOKING变为LEADING；服务器1&#x2F;2自动变为Follower节点，状态由LOOKING变为FOLLOWING</li></ul><p>服务器4启动</p><ul><li>投自己一票</li><li>此时集群中1&#x2F;2&#x2F;3服务器已经不再是LOOKING状态，服务器4自动变为Follower</li></ul><p>服务器5启动</p><ul><li>投自己一票</li><li>此时集群中1&#x2F;2&#x2F;3&#x2F;4服务器已经不再是LOOKING状态，服务器5自动变为Follower</li></ul></blockquote></li><li><p>非第一次启动</p><blockquote><p>当服务器5无法与Leader保持连接时，会发起一次选举</p><ul><li><p>Leader正常，只是服务器5无法与Leader保持连接，则继续尝试连接Leader</p></li><li><p>Leader确实挂了，则进入选举</p><p>假如当前集群中SID分别为1、2、3、4、5，ZXID分别为8、8、8、7、7，并且SID为3的服务器为Leader；此时服务器3与5突然挂了，需要进行Leader重新选举，流程如下：</p><ul><li>1、2、4进行Leader选举，依次比较Epoch、ZXID、SID，大的成为Leader</li><li>此时1、2、4的数据分别为1 8 1、1 8 2、1 7 4，所以服务器2为新的Leader</li></ul></li></ul></blockquote></li></ul><h4 id="集群启动脚本"><a href="#集群启动脚本" class="headerlink" title="集群启动脚本"></a>集群启动脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;start&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> unclebryan01 unclebryan02 unclebryan03<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> -----------zk <span class="hljs-variable">$i</span> 启动----------------<br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;/usr/local/software/zookeeper-3.5.7/bin/zkServer.sh start&quot;</span><br><span class="hljs-keyword">done</span><br>&#125;<br>;;<br><br><span class="hljs-string">&quot;stop&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> unclebryan01 unclebryan02 unclebryan03<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> -----------zk <span class="hljs-variable">$i</span> 停止----------------<br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;/usr/local/software/zookeeper-3.5.7/bin/zkServer.sh stop&quot;</span><br><span class="hljs-keyword">done</span><br>&#125;<br>;;<br><br><br><span class="hljs-string">&quot;status&quot;</span>)&#123;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> unclebryan01 unclebryan02 unclebryan03<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> -----------zk <span class="hljs-variable">$i</span> 状态----------------<br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;/usr/local/software/zookeeper-3.5.7/bin/zkServer.sh status&quot;</span><br><span class="hljs-keyword">done</span><br>&#125;<br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><p>PS. 如果出现JAVA_HOME is not set and java could not be found in PATH，请修改zkEnv.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在文件的最前面增加javahome路径</span><br><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-string">&quot;/usr/local/software/jdk1.8.0_311&quot;</span><br></code></pre></td></tr></table></figure><h4 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h4><ul><li>客户端连接的是Leader节点</li></ul><p><img src="https://s2.loli.net/2023/03/09/G7pZqvu4PcSLeFo.jpg" alt="image-20220405213054290"></p><ul><li><p>客户端连接的是Follower节点</p><p><img src="https://s2.loli.net/2023/03/09/qVljK4hNSt2B6G5.jpg" alt="image-20220405213243774"></p></li></ul><h4 id="场景应用"><a href="#场景应用" class="headerlink" title="场景应用"></a>场景应用</h4><ul><li><p>服务的动态上下线</p><p><img src="https://s2.loli.net/2023/03/09/szf5ZRDmFKhQIJ7.jpg" alt="image-20220405213715307"></p></li><li><p>分布式锁</p><p><img src="https://s2.loli.net/2023/03/09/anipQrSvFq3cV9L.jpg" alt="image-20220405214256648"></p></li></ul><blockquote><p>zk实现的分布式锁请使用curator框架</p><p>官网地址：<a href="https://curator.apache.org/">https://curator.apache.org/</a></p></blockquote><h4 id="集群zk的节点数"><a href="#集群zk的节点数" class="headerlink" title="集群zk的节点数"></a>集群zk的节点数</h4><blockquote><ol><li>安装奇数台</li><li>生产经验值：<ol><li>10台服务器，安装3台zk</li><li>20台服务器，安装5台zk</li><li>100台服务器，安装11台zk</li><li>200台服务器，安装11台zk</li></ol></li><li>服务器台数多，好处是提高稳定性，坏处是通信延迟</li></ol></blockquote><h4 id="zookeeper一致性问题"><a href="#zookeeper一致性问题" class="headerlink" title="zookeeper一致性问题"></a>zookeeper一致性问题</h4><h5 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h5><p>角色：</p><p>Proposer（提案者），Acceptor（接收者）、Learner（学习者）；每个节点可以身兼数职</p><p>三个阶段：</p><ol><li>准备阶段<ul><li>Proposer向Acceptor发出Propose请求Promise（许可），无需携带提案内容</li><li>Acceptor向Proposer发送同意此提案</li></ul></li><li>Accept接收阶段<ul><li>Proposer收到超过半数的Acceptor许可后，向Acceptor发出正式Propose</li><li>Acceptor接收到提案后进行Accept处理</li></ul></li><li>Lean阶段<ul><li>Proposer将最终的提案发送给所有的Learners</li></ul></li></ol><p>存在的问题：多个提案者可能出现迟迟无法达成一致的问题，导致性能降低</p><h5 id="ZAB算法"><a href="#ZAB算法" class="headerlink" title="ZAB算法"></a>ZAB算法</h5><p>借鉴Paxos算法，只有一个提案者</p><p>包含两种模式：消息广播、崩溃恢复</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><ol><li><p>找到启动入口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">zkServer.sh start<br>ZOOMAIN=<span class="hljs-string">&quot;org.apache.zookeeper.server.quorum.QuorumPeerMain&quot;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Middleware</tag>
      
      <tag>Zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux配置已经软件安装</title>
    <link href="/2023/03/09/Linux/Linux%E9%85%8D%E7%BD%AE%E5%B7%B2%E7%BB%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/09/Linux/Linux%E9%85%8D%E7%BD%AE%E5%B7%B2%E7%BB%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux配置已经软件安装"><a href="#Linux配置已经软件安装" class="headerlink" title="Linux配置已经软件安装"></a>Linux配置已经软件安装</h3><h4 id="1-设置通过主机名访问"><a href="#1-设置通过主机名访问" class="headerlink" title="1.设置通过主机名访问"></a>1.设置通过主机名访问</h4><blockquote><p>修改&#x2F;etc&#x2F;hosts文件</p><p>在每个主机下分别加入本机与其他主机与ip的映射关系</p><p>10.211.55.4 unclebryan01<br>10.211.55.5 unclebryan02<br>10.211.55.6 unclebryan03</p></blockquote><h4 id="2-免密登录"><a href="#2-免密登录" class="headerlink" title="2.免密登录"></a>2.免密登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行下面命令一路回车</span><br>ssh-keygen -t rsa<br><span class="hljs-comment"># 将秘钥copy到想要免密登录的机器上(本机最好也执行一下，自己免密登录自己)</span><br>ssh-copy-id ip/主机名<br><span class="hljs-comment"># 免密登录后可以直接通过下面命令连接远程主机</span><br>ssh ip/主机名<br></code></pre></td></tr></table></figure><h4 id="3-编写文件分发脚本"><a href="#3-编写文件分发脚本" class="headerlink" title="3.编写文件分发脚本"></a>3.编写文件分发脚本</h4><blockquote><p>将文件分发到集群中的每一台机器上</p><p>在&#x2F;usr&#x2F;local&#x2F;bin路径下新建xsync文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#1. 判断参数个数</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -lt 1 ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> Not Enough Arguement!<br>    <span class="hljs-built_in">exit</span>;<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#2. 遍历集群所有机器</span><br><span class="hljs-keyword">for</span> host <span class="hljs-keyword">in</span> unclebryan02 unclebryan03<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> ==================== <span class="hljs-variable">$host</span> ====================<br>    <span class="hljs-comment">#3. 遍历所有目录，挨个发送</span><br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-variable">$@</span><br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-comment">#4. 判断文件是否存在</span><br>        <span class="hljs-keyword">if</span> [ -e <span class="hljs-variable">$file</span> ]<br>            <span class="hljs-keyword">then</span><br>                <span class="hljs-comment">#5. 获取父目录</span><br>                pdir=$(<span class="hljs-built_in">cd</span> -P $(<span class="hljs-built_in">dirname</span> <span class="hljs-variable">$file</span>); <span class="hljs-built_in">pwd</span>)<br>                <span class="hljs-comment">#6. 获取当前文件的名称</span><br>                fname=$(<span class="hljs-built_in">basename</span> <span class="hljs-variable">$file</span>)<br>                ssh <span class="hljs-variable">$host</span> <span class="hljs-string">&quot;mkdir -p <span class="hljs-variable">$pdir</span>&quot;</span><br>                rsync -av <span class="hljs-variable">$pdir</span>/<span class="hljs-variable">$fname</span> <span class="hljs-variable">$host</span>:<span class="hljs-variable">$pdir</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-variable">$file</span> does not exists!<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#设置脚本权限</span><br><span class="hljs-built_in">chmod</span> 777 xsync<br><span class="hljs-comment"># 执行测试</span><br>xsync + 文件夹 <br></code></pre></td></tr></table></figure><h4 id="4-编写批量命令执行脚本"><a href="#4-编写批量命令执行脚本" class="headerlink" title="4.编写批量命令执行脚本"></a>4.编写批量命令执行脚本</h4><p>在&#x2F;usr&#x2F;local&#x2F;bin路径下新建xcall文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#在集群的所有机器上批量执行同一条命令</span><br><span class="hljs-keyword">if</span>((<span class="hljs-variable">$#</span>==0))<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> 请输入您要操作的命令！<br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">echo</span> 要执行的命令是$*<br><br><span class="hljs-comment">#循环执行此命令</span><br><span class="hljs-keyword">for</span>((i=1;i&lt;=3;i++))<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">echo</span> ---------------------unclebryan0<span class="hljs-variable">$i</span>-----------------<br>ssh unclebryan0<span class="hljs-variable">$i</span> $*<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行命令时一定要带参数，否则会直接退出</span><br>xcall <span class="hljs-comment"># 会退出脚本</span><br>xcall <span class="hljs-built_in">ls</span> <span class="hljs-comment"># 不会退出脚本</span><br></code></pre></td></tr></table></figure><h4 id="5-删除自带的jdk"><a href="#5-删除自带的jdk" class="headerlink" title="5.删除自带的jdk"></a>5.删除自带的jdk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>sudo yum -y remove *openjdk*<br><br><span class="hljs-comment"># 配置自己安装的jdk</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;JAVA_HOME=/usr/local/software/jdk1.8.0_311&#x27;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/lib&#x27;</span> &gt;&gt; ~/.bash_profile<br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h4 id="6-安装zshell"><a href="#6-安装zshell" class="headerlink" title="6.安装zshell"></a>6.安装zshell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前主机的shell类型</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span> <br><br><span class="hljs-comment"># 查看是否已安装zshell</span><br><span class="hljs-built_in">cat</span> /etc/shells <br><br><span class="hljs-comment"># zsh安装</span><br><span class="hljs-comment">#CentOS： </span><br>yum -y install zsh git<br><span class="hljs-comment">#Ubuntu:  </span><br>sudo apt -y install zsh git<br><br><span class="hljs-comment"># 安装ohmyzsh</span><br>$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br>或者<br>$ sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span><br><br><span class="hljs-comment"># 切换zshell</span><br>chsh -s /bin/zsh<br><br><span class="hljs-comment"># 切换为bash</span><br>chsh -s /bin/bash<br><br><span class="hljs-comment"># ps. 切换后新开一个终端才会生效</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 如果安装ohmyzsh一直失败，有可能是网络原因，请替换国内镜像</span><br><span class="hljs-comment"># 下载码云安装包</span><br>wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh<br><br><span class="hljs-comment"># 修改install.sh中的下面两行</span><br>REPO=<span class="hljs-variable">$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span><br>REMOTE=<span class="hljs-variable">$&#123;REMOTE:-https://github.com/<span class="hljs-variable">$&#123;REPO&#125;</span>.git&#125;</span><br><span class="hljs-comment"># 为</span><br>REPO=<span class="hljs-variable">$&#123;REPO:-mirrors/oh-my-zsh&#125;</span><br>REMOTE=<span class="hljs-variable">$&#123;REMOTE:-https://gitee.com/<span class="hljs-variable">$&#123;REPO&#125;</span>.git&#125;</span><br><br><span class="hljs-comment">#运行install.sh</span><br>./install.sh<br><br><span class="hljs-comment"># 修改源码仓库地址</span><br><span class="hljs-built_in">cd</span> ~/.oh-my-zsh<br>git remote set-url origin https://gitee.com/mirrors/oh-my-zsh.git<br>git pull<br></code></pre></td></tr></table></figure><h4 id="7-安装mysql"><a href="#7-安装mysql" class="headerlink" title="7.安装mysql"></a>7.安装mysql</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载rpm</span><br>wget https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm<br><br><span class="hljs-comment"># 进行repo安装，会在/etc/yum.repos.d/目录下生成两个repo文件mysql-community.repo mysql-community-source.repo</span><br>rpm -ivh mysql80-community-release-el7-1.noarch.rpm<br><br><span class="hljs-comment"># 安装</span><br> yum install mysql-server -y<br><br><br><span class="hljs-comment"># mysql设置不区分大小写</span><br>vim /etc/my.cnf<br><span class="hljs-comment">#让MYSQL大小写敏感(1-不敏感，0-敏感)</span><br>lower_case_table_names=1<br><br><span class="hljs-comment"># 启动服务</span><br>systemctl start mysqld.service<br><br><span class="hljs-comment"># 查看状态</span><br>systemctl status mysqld.service<br><br><span class="hljs-comment"># 获取密码，有时候是空密码</span><br>grep <span class="hljs-string">&quot;password&quot;</span> /var/log/mysql/mysqld.log <br>或者<br>grep <span class="hljs-string">&quot;password&quot;</span> /var/log/mysqld.log<br><br><span class="hljs-comment"># 登录并修改密码</span><br>mysql -uroot -p <br>ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br><span class="hljs-comment"># 远程登录</span><br>use mysql;<br>update user  <span class="hljs-built_in">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user = <span class="hljs-string">&#x27;root&#x27;</span>; <br><br><span class="hljs-comment"># 设置后远程登录后，记得重启一下服务</span><br>systemctl restart mysqld.service<br></code></pre></td></tr></table></figure><p>安装中的问题</p><p>1. </p><blockquote><p>用Navicat连接mysql，报错如下：<br> <code>Client does not support authentication protocol requested by server；</code><br> 报错原因：<br> mysql8.0 引入了新特性 <code>caching_sha2_password</code>；这种密码加密方式Navicat 12以下客户端不支持；<br> Navicat 12以下客户端支持的是<code>mysql_native_password</code>这种加密方式；<br> 解决方案：<br> 1，用如下语句查看MySQL当前加密方式<br> <code>select host,user,plugin from user;</code><br> 查询结果</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">+-----------+------------------+-----------------------+<br>|<span class="hljs-params"> host      </span>| user             |<span class="hljs-params"> plugin                </span>|<br>+-----------+------------------+-----------------------+<br>|<span class="hljs-params"> %         </span>| root             |<span class="hljs-params"> caching_sha2_password </span>|<br>|<span class="hljs-params"> localhost </span>| mysql.infoschema |<span class="hljs-params"> mysql_native_password </span>|<br>|<span class="hljs-params"> localhost </span>| mysql.session    |<span class="hljs-params"> mysql_native_password </span>|<br>|<span class="hljs-params"> localhost </span>| mysql.sys        |<span class="hljs-params"> mysql_native_password </span>|<br>+-----------+------------------+-----------------------+<br></code></pre></td></tr></table></figure><p>看第一行，root加密方式为<code>caching_sha2_password</code>。<br> 使用命令将他修改成<code>mysql_native_password</code>加密模式：<br> <code>update user set plugin=&#39;mysql_native_password&#39; where user=&#39;root&#39;;</code><br> 再次连接</p></blockquote><p>2. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs log">安装mysql时报错：<br><br>warning: /var/cache/yum/x86_64/7/mysql80-community/packages/mysql-community-server-8.0.28-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID 3a79bd29: NOKEY<br>Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><br><br>The GPG keys listed for the &quot;MySQL 8.0 Community Server&quot; repository are already installed but they are not correct for this package.<br>Check that the correct key URLs are configured for this repository.<br><br><br> Failing package is: mysql-community-server-8.0.28-1.el7.x86_64<br> GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<br><br><br>解决方案：<br>这个key文件RPM-GPG-KEY-mysql不对，要替换成正确的文件。<br><br>我安装的是mysql 8，下载最新的key文件地址为：https://repo.mysql.com/<br><br>这个地址下的最新key文件是：<br><br>RPM-GPG-KEY-mysql-2022<br>将这个文件下载到本地的key文件夹。<br><br>cd /etc/pki/rpm-gpg/<br><br>wget https://repo.mysql.com/RPM-GPG-KEY-mysql-2022<br><br>然后需要修改yum repo文件来设置安装时，使用这个key文件<br><br>vi /etc/yum.repos.d/mysql-community.repo<br>修改为下面内容后重新安装<br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/Fz5SqIMhv2ZONBl.jpg" alt="Screen Shot 2022-04-10 at 15.48.56"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">http</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">include</span>       <span class="hljs-string">mime.types;</span><br>    <span class="hljs-attr">default_type</span>  <span class="hljs-string">application/octet-stream;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="hljs-comment">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="hljs-comment">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    #access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attr">sendfile</span>        <span class="hljs-string">on;</span><br><span class="hljs-comment">    #tcp_nopush     on;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    #keepalive_timeout  0;</span><br><span class="hljs-comment">    #keepalive_timeout  65;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    #gzip  on;</span><br><br><br><span class="hljs-attr">upstream</span> <span class="hljs-string">nacos-server&#123;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.64.2:8848 weight=1;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.64.3:8848 weight=1;</span><br>        <span class="hljs-attr">server</span> <span class="hljs-string">192.168.64.4:8848 weight=1;</span><br><span class="hljs-attr">&#125;</span><br> <span class="hljs-attr">server</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">      #  listen       80;</span><br>        <span class="hljs-attr">server_name</span>  <span class="hljs-string">localhost;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        #charset koi8-r;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        #access_log  logs/host.access.log  main;</span><br><br><br>        <span class="hljs-attr">location</span> <span class="hljs-string">/nacos &#123;</span><br>                <span class="hljs-attr">proxy_pass</span>  <span class="hljs-string">http://nacos-server;</span><br>                <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">Host $host;</span><br>                <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Real-Ip $remote_addr;</span><br>                <span class="hljs-attr">proxy_set_header</span> <span class="hljs-string">X-Forwarded-For $remote_addr;</span><br>        <span class="hljs-attr">&#125;</span><br> <span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="8-yum报错"><a href="#8-yum报错" class="headerlink" title="8. yum报错"></a>8. yum报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">CentOS Linux 8 - AppStream                                                                                                                                                                                            73  B/s |  38  B     00:00<br>Error: Failed to download metadata <span class="hljs-keyword">for</span> repo <span class="hljs-string">&#x27;appstream&#x27;</span>: Cannot prepare internal mirrorlist: No URLs <span class="hljs-keyword">in</span> mirrorlist<br></code></pre></td></tr></table></figure><p><strong>Step 1:</strong> Go to the <code>/etc/yum.repos.d/</code> directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@autocontroller ~]<span class="hljs-comment"># cd /etc/yum.repos.d/</span><br></code></pre></td></tr></table></figure><p><strong>Step 2:</strong> Run the below commands</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@autocontroller ~]<span class="hljs-comment"># sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br>[root@autocontroller ~]<span class="hljs-comment"># sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br></code></pre></td></tr></table></figure><p><strong>Step 3:</strong> Now run the yum update</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@autocontroller ~]<span class="hljs-comment"># yum update -y</span><br></code></pre></td></tr></table></figure><h4 id="9-vim中文乱码"><a href="#9-vim中文乱码" class="headerlink" title="9. vim中文乱码"></a>9. vim中文乱码</h4><blockquote><p>vim的设置一般放在&#x2F;etc&#x2F;vimrc文件中，不过，建议不要修改它。可以修改<del>&#x2F;.vimrc文件（默认不存在，可以自己新建一个），写入所希望的设置。</del>&#x2F;.vimrc内容如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936<br><span class="hljs-built_in">set</span> termencoding=utf-8<br><span class="hljs-built_in">set</span> encoding=utf-8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Config</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql文件</title>
    <link href="/2023/03/09/DB/mysql%E6%96%87%E4%BB%B6/"/>
    <url>/2023/03/09/DB/mysql%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql文件"><a href="#mysql文件" class="headerlink" title="mysql文件"></a>mysql文件</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><blockquote><p>可以直接查看<code>my.cnf</code>或者运行下面的sql</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看配置文件全部配置信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `performance_schema`.global_variables;<br><br><br><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_row_lock_%&#x27;</span>;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%isolation%&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `performance_schema`.data_locks;<br><br><span class="hljs-comment">-- 排序的单行长度，超过该值就会使用row_id算法排序</span><br><span class="hljs-keyword">show</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;max_length_for_sort_data&#x27;</span><br><br><span class="hljs-comment">-- 缓存池的总大小</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_buffer_pool_size&#x27;</span>;<br><br><br><br><span class="hljs-comment">-- 缓存池实例个数</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_buffer_pool_instances&#x27;</span>;<br><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_buffer_pool_chunk_size&#x27;</span>;<br> <br><br><span class="hljs-comment">-- InnodbLRU算法midpoint的位置</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_old_blocks_pct&#x27;</span>;<br><span class="hljs-comment">-- midpoint位置的数据多久放入LRU热点数据位置</span><br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_old_blocks_time&#x27;</span>;<br><br><span class="hljs-comment">-- 查看缓存池的状态</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_BUFFER_POOL_STATS;<br><br><span class="hljs-comment">-- 查询LRU页的使用情况</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_BUFFER_PAGE_LRU;<br><br><span class="hljs-comment">-- 查询LRU页数</span><br><span class="hljs-keyword">select</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> information_schema.INNODB_BUFFER_PAGE_LRU;<br><br><span class="hljs-comment">-- 查询LRU中压缩页使用情况</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_BUFFER_PAGE_LRU <span class="hljs-keyword">where</span> COMPRESSED<span class="hljs-operator">=</span><span class="hljs-string">&#x27;YES&#x27;</span>;<br><br><span class="hljs-comment">-- 查看设置缓存实例的状态</span><br><span class="hljs-keyword">SHOW</span> STATUS <span class="hljs-keyword">WHERE</span> Variable_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;InnoDB_buffer_pool_resize_status&#x27;</span>;<br><br><span class="hljs-comment">-- LRU列表空闲页个数</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_lru_scan_depth&#x27;</span>;<br><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_max_dirty_pages_pct&#x27;</span>;<br><br><span class="hljs-comment">-- changebuffer大小</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_change_buffer_max_size&#x27;</span>;<br><br><br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> STATUS <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;innodb_dblwr%&#x27;</span>;<br><br><span class="hljs-comment">-- 查询是否开启自适应哈希</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_adaptive_hash_index&#x27;</span>;<br><br><span class="hljs-comment">-- 是否开启Native AIO</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_use_native_aio&#x27;</span>;<br><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;innodb_force_recovery&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `performance_schema`.global_variables <span class="hljs-keyword">where</span> VARIABLE_NAME <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%format%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h3><ul><li><p>动态（dynamic）参数：可以在MySQL实例运行中进行更改，可以指定生效范围</p><ul><li>session：当前会话有效</li><li>global：全局有效</li></ul></li><li><p>静态（static）参数：在整个实例生命周期内都不得进行更改，只读（read only）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 全局</span><br><span class="hljs-keyword">SET</span>@<span class="hljs-variable">@global</span>.binlog_format<span class="hljs-operator">=</span><span class="hljs-type">ROW</span>;<br><span class="hljs-comment">-- 当前会话有效</span><br><span class="hljs-keyword">SET</span>@<span class="hljs-variable">@session</span>.binlog_format<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Statement&#x27;</span>;<br><br><span class="hljs-comment">-- 查询配置</span><br><span class="hljs-keyword">SELECT</span>@<span class="hljs-variable">@session</span>.binlog_format;<br><span class="hljs-keyword">SELECT</span>@<span class="hljs-variable">@global</span>.binlog_format;<br></code></pre></td></tr></table></figure><blockquote><p><font color=red><strong>PS. session级别优先级高于global，当同时存在则session级别生效</strong></font></p></blockquote><blockquote><p>下图操作为切换binlog格式的输出，Statement-&gt;ROW-&gt;Statement</p><p><strong><font color=red>同时证明两种格式的binlog是可以放在同一个文件的</font></strong></p></blockquote><p><img src="https://s2.loli.net/2023/03/09/Eq51AIdhoPDWTcj.jpg" alt="image-20221012153033026"></p><h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看错误日志文件存储路径</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;log_error&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 是否开启慢查询</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;slow_query_log&#x27;</span>;<br><br><span class="hljs-comment">-- 慢查询日志位置</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;slow_query_log_file&#x27;</span>;<br><br><span class="hljs-comment">-- 慢查询时间 单位 秒</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span><span class="hljs-string">&#x27;long_query_time&#x27;</span>;<br><br><span class="hljs-comment">-- 用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;log_throttle_queries_not_using_indexes&#x27;</span>;<br></code></pre></td></tr></table></figure><p style="color:red;text-align:center;">公司散伙了！！！！待续~</p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的Join算法</title>
    <link href="/2023/03/09/DB/MySQL%E7%9A%84Join%E7%AE%97%E6%B3%95/"/>
    <url>/2023/03/09/DB/MySQL%E7%9A%84Join%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL的Join算法"><a href="#MySQL的Join算法" class="headerlink" title="MySQL的Join算法"></a>MySQL的Join算法</h1><h2 id="Index-Nested-Loop-Join"><a href="#Index-Nested-Loop-Join" class="headerlink" title="Index Nested-Loop Join"></a>Index Nested-Loop Join</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t1 straight_join t2 <span class="hljs-keyword">on</span> (t1.a<span class="hljs-operator">=</span>t2.a);<br></code></pre></td></tr></table></figure><p><img src="https://static001.geekbang.org/resource/image/4b/90/4b9cb0e0b83618e01c9bfde44a0ea990.png" alt="img"></p><p>图1 使用索引字段join的 explain结果</p><p>可以看到，在这条语句里，被驱动表t2的字段a上有索引，join过程用上了这个索引，因此这个语句的执行流程是这样的：</p><ol><li>从表t1中读入一行数据 R；</li><li>从数据行R中，取出a字段到表t2里去查找；</li><li>取出表t2中满足条件的行，跟R组成一行，作为结果集的一部分；</li><li>重复执行步骤1到3，直到表t1的末尾循环结束。</li></ol><p><img src="https://s2.loli.net/2023/03/09/7HDgw2NO85jFpcW.jpg" alt="img"></p><p>在这个join语句执行过程中，驱动表是走全表扫描，而被驱动表是走树搜索。</p><p>假设被驱动表的行数是M。每次在被驱动表查一行数据，要先搜索索引a，再搜索主键索引。每次搜索一棵树近似复杂度是以2为底的M的对数，记为log2M，所以在被驱动表上查一行的时间复杂度是 2*log2M。</p><p>假设驱动表的行数是N，执行过程就要扫描驱动表N行，然后对于每一行，到被驱动表上匹配一次。</p><p>因此整个执行过程，近似复杂度是 N + N<em>2</em>log2M。</p><p>显然，N对扫描行数的影响更大，因此应该让小表来做驱动表。</p><blockquote><p>如果被驱动表的连接字段t2.a没有索引，则被驱动表也会全表扫描，整个过程的复杂度则为M<em>N，这种算法叫做“Simple Nested-Loop Join”。</em><em>&#x3D;&#x3D;然而MySQL并没有使用这种算法，而是使用了另一个叫作“Block Nested-Loop Join”的算法，简称BNL。&#x3D;&#x3D;</em>*</p></blockquote><h2 id="Block-Nested-Loop-Join"><a href="#Block-Nested-Loop-Join" class="headerlink" title="Block Nested-Loop Join"></a>Block Nested-Loop Join</h2><blockquote><p><font color=red><strong>不要出现这种算法</strong></font></p></blockquote><p>这时候，被驱动表上没有可用的索引，算法的流程是这样的：</p><ol><li>把表t1的数据读入线程内存join_buffer中（<strong>如果放不下表t1的所有数据话，策略很简单，就是分段放。</strong>），由于我们这个语句中写的是select *，因此是把整个表t1放入了内存；</li><li>扫描表t2，把表t2中的每一行取出来，跟join_buffer中的数据做对比，满足join条件的，作为结果集的一部分返回。</li></ol><p>这个过程的流程图如下：</p><p><img src="https://static001.geekbang.org/resource/image/15/73/15ae4f17c46bf71e8349a8f2ef70d573.jpg" alt="img"></p><p>图3 Block Nested-Loop Join 算法的执行流程</p><p>对应地，这条SQL语句的explain结果如下所示：</p><p><img src="https://static001.geekbang.org/resource/image/67/e1/676921fa0883e9463dd34fb2bc5e87e1.png" alt="img"></p><p>图4 不使用索引字段join的 explain结果</p><p>可以看到，在这个过程中，对表t1和t2都做了一次全表扫描，因此总的扫描行数是1100。由于join_buffer是以无序数组的方式组织的，因此对表t2中的每一行，都要做100次判断，总共需要在内存中做的判断次数是：100<em>1000&#x3D;10万次。</em><em><font color=red>（By default, MySQL (8.0.18 and later) employs hash joins whenever possible.已经支持hash join了；在该案例中扫描的应该是1000次）</font></em>*</p><p>前面我们说过，&#x3D;&#x3D;如果使用Simple Nested-Loop Join算法进行查询，扫描行数也是10万行。因此，从时间复杂度上来说，这两个算法是一样的。但是，Block Nested-Loop Join算法的这10万次判断是内存操作，速度上会快很多，性能也更好。&#x3D;&#x3D;</p><blockquote><p>总结：</p><ol><li>如果可以使用Index Nested-Loop Join算法，也就是说可以用上被驱动表上的索引，其实是可以使用Join的。</li><li>应该用小表驱动大表，**<font color=red>小表指的是两个表按照各自的条件过滤，过滤完成之后，计算参与join的各个字段的总数据量，数据量小的那个表，就是“小表”</font>**</li></ol></blockquote><h2 id="Multi-Range-Read"><a href="#Multi-Range-Read" class="headerlink" title="Multi-Range Read"></a>Multi-Range Read</h2><blockquote><p>MRR原理是利用了顺序读，</p></blockquote><p>借助MRR优化的设计思路。此时，语句的执行流程变成了这样：</p><ol><li>根据索引a，定位到满足条件的记录，将id值放入read_rnd_buffer中;</li><li>将read_rnd_buffer中的id进行递增排序；</li><li>排序后的id数组，依次到主键id索引中查记录，并作为结果返回。</li></ol><p>这里，read_rnd_buffer的大小是由read_rnd_buffer_size参数控制的。如果步骤1中，read_rnd_buffer放满了，就会先执行完步骤2和3，然后清空read_rnd_buffer。之后继续找索引a的下个记录，并继续循环。</p><p>另外需要说明的是，如果你想要稳定地使用MRR优化的话，需要设置<code>set optimizer_switch=&quot;mrr_cost_based=off&quot;</code>。（官方文档的说法，是现在的优化器策略，判断消耗的时候，会更倾向于不使用MRR，把mrr_cost_based设置为off，就是固定使用MRR了。）</p><p>下面两幅图就是使用了MRR优化后的执行流程和explain结果。</p><p><img src="https://static001.geekbang.org/resource/image/d5/c7/d502fbaea7cac6f815c626b078da86c7.jpg" alt="img"></p><p>图2 MRR执行流程</p><p><img src="https://static001.geekbang.org/resource/image/a5/32/a513d07ebaf1ae044d44391c89bc6432.png" alt="img"></p><p>&#x3D;&#x3D;<strong>MRR能够提升性能的核心</strong>在于，这条查询语句在索引a上做的是一个范围查询（也就是说，这是一个多值查询），可以得到足够多的主键id。这样通过排序以后，再去主键索引查数据，才能体现出“顺序性”的优势。&#x3D;&#x3D;</p><h2 id="Batched-Key-Access"><a href="#Batched-Key-Access" class="headerlink" title="Batched Key Access"></a>Batched Key Access</h2><blockquote><p>对Index Nested-Loop Join的一种优化，利用了join buffer缓存；</p><p><strong>&#x3D;&#x3D;MySQL已经默认做了这个优化，NLJ算法会自动转为BKA算法&#x3D;&#x3D;</strong></p></blockquote><p>NLJ算法优化后的BKA算法的流程。</p><p><img src="https://static001.geekbang.org/resource/image/31/7e/31d85666542b9cb0b47a447a8593a47e.jpg" alt="img"></p><p>图5 Batched Key Acess流程</p><p>图中，我在join_buffer中放入的数据是P1到P100，表示的是只会取查询需要的字段。当然，如果join buffer放不下P1到P100的所有数据，就会把这100行数据分成多段执行上图的流程。</p><p>那么，这个BKA算法到底要怎么启用呢？</p><p>如果要使用BKA优化算法的话，你需要在执行SQL语句之前，先设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">optimizer_switch</span>=<span class="hljs-string">&#x27;mrr=on,mrr_cost_based=off,batched_key_access=on&#x27;</span>;<br></code></pre></td></tr></table></figure><p>其中，前两个参数的作用是要启用MRR。这么做的原因是，BKA算法的优化要依赖于MRR。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ol><li>给被驱动表关联字段加上索引使得Block Nested-Loop Join转为Index Nested-Loop Join，经过join buffer的优化后转为Batched Key Access算法</li></ol>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL binlog与redo log</title>
    <link href="/2023/03/09/DB/MySQL%20binlog/"/>
    <url>/2023/03/09/DB/MySQL%20binlog/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-binlog与redo-log"><a href="#MySQL-binlog与redo-log" class="headerlink" title="MySQL binlog与redo log"></a>MySQL binlog与redo log</h1><h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><blockquote><p>binlog存储的是逻辑日志，即每次执行的SQL语句</p><p>binlog（归档日志）属于Server层也有自己的日志</p><p>Binlog的作用是做数据复制，主从同步，或者通过Canal读取binlog的变更日志进行业务处理</p><p>可以通过整库全量备份+binlog重放，将数据恢复到任意时间点的状态</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看binlog格式</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">GLOBAL</span> VARIABLES <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;binlog_format%&#x27;</span>;<br><span class="hljs-comment">-- 查看binlog配置信息</span><br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;log_%&#x27;</span>;<br><span class="hljs-comment">-- 查看当前正在写入的binlog文件名</span><br><span class="hljs-keyword">show</span> master status;<br><span class="hljs-comment">-- 查看指定binlog文件的内容</span><br><span class="hljs-keyword">show</span> binlog events <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;mysql-bin.000034&#x27;</span>;<br></code></pre></td></tr></table></figure><p>设置MySQL binlog，修改my.cnf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-attr">log-bin</span>=<span class="hljs-string">mysql-bin # 开启 binlog</span><br><span class="hljs-attr">binlog-format</span>=<span class="hljs-string">ROW # 选择 ROW 模式  可选Statement,MiXED,以及ROW</span><br></code></pre></td></tr></table></figure><p>下图为本地binlog文件，从文件大小看binlog应该是固定大小的文件，binlog30&#x2F;31文件大小都写满了104.9M，032没有写满就创建了033文件，是因为我修改了binlog的格式为Statement，<del>不同格式的binlog不能存储在同一个文件</del>，在文末更正说明</p><p><img src="https://s2.loli.net/2023/03/09/zpvthoHxjGIPSym.jpg" alt="image-20221011135857905"></p><h4 id="Statement格式的binlog如下图"><a href="#Statement格式的binlog如下图" class="headerlink" title="Statement格式的binlog如下图"></a>Statement格式的binlog如下图</h4><p><img src="https://s2.loli.net/2023/03/09/kJUGwe1Sh5HDOps.jpg" alt="image-20221011140252810"></p><h4 id="ROW格式的binlog如下图"><a href="#ROW格式的binlog如下图" class="headerlink" title="ROW格式的binlog如下图"></a>ROW格式的binlog如下图</h4><p><img src="https://s2.loli.net/2023/03/09/1iwo3nPfzW6cAQa.jpg" alt="image-20221011140917202"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对ROW格式的binlog进行格式化</span><br>sudo /usr/local/mysql-8.0.26-macos11-x86_64/bin/mysqlbinlog -vv --base64-output=decode-rows  /usr/local/mysql-8.0.26-macos11-x86_64/data/mysql-bin.000034 &gt; mysql-bin.000034.txt<br></code></pre></td></tr></table></figure><p>格式化后如下图</p><p><img src="https://s2.loli.net/2023/03/09/Z213TSvLWkV8cFM.jpg" alt="image-20221011142616290"></p><h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><blockquote><p>redo log主要作用是崩溃恢复。</p><p>redo log是InnoDB引擎特有的日志</p><p>为了避免发生数据丢失的问题，当前事务数据库系统普遍都采用了Write Ahead Log策略，即当事务提交时，先写重做日志，再修改页。当由于发生宕机而导致数据丢失时，通过重做日志来完成数据的恢复。这也是事务ACID中D（Durability持久性）的要求。</p><p>Write Ahead Log利用的是循环写文件如下图</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/LQGekvhPMrVNmx1.jpg" alt="img"></p><h2 id="bin-log-VS-redo-log"><a href="#bin-log-VS-redo-log" class="headerlink" title="bin log VS redo log"></a>bin log VS redo log</h2><p><strong>区别</strong></p><ol><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li><li>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID&#x3D;2这一行的c字段加1 ”。</li><li>redo log是循环写的，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><h2 id="一条更新语句的执行过程"><a href="#一条更新语句的执行过程" class="headerlink" title="一条更新语句的执行过程"></a>一条更新语句的执行过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> T <span class="hljs-keyword">set</span> c<span class="hljs-operator">=</span>c<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> ID<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>执行器和InnoDB引擎在执行这个简单的update语句时的内部流程。</p><ol><li>执行器先找引擎取ID&#x3D;2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID&#x3D;2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。</li></ol><p>这里我给出这个update语句的执行流程图，图中浅色框表示是在InnoDB内部执行的，深色框表示是在执行器中执行的。</p><p><img src="https://s2.loli.net/2023/03/09/jCGYgznL4fyu1Ws.jpg" alt="img"></p><p>update语句执行流程</p><p>你可能注意到了，最后三步看上去有点“绕”，将redo log的写入拆成了两个步骤：prepare和commit，这就是”两阶段提交”。</p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><blockquote><p>如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p></blockquote><p><strong><font color=red>更正：不同格式的binlog是可以放在同一个文件的</font></strong></p><blockquote><p>下图操作为切换binlog格式的输出，Statement-&gt;ROW-&gt;Statement</p><p>SET@@session.binlog_format&#x3D;’Statement’;</p><p>SET@@session.binlog_format&#x3D;’ROW’;</p><p>SET@@session.binlog_format&#x3D;’Statement’;</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/Eq51AIdhoPDWTcj.jpg" alt="image-20221012153033026"></p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DDD领域驱动设计</title>
    <link href="/2023/03/09/DDD/DDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/03/09/DDD/DDD%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="DDD领域驱动设计"><a href="#DDD领域驱动设计" class="headerlink" title="DDD领域驱动设计"></a>DDD领域驱动设计</h2><h4 id="数据驱动设计流程"><a href="#数据驱动设计流程" class="headerlink" title="数据驱动设计流程"></a>数据驱动设计流程</h4><ol><li>需求分析</li><li>数据建模（ER图）</li><li>建库建表（写DAO)</li><li>编写业务逻辑</li></ol><p>弊端：很难重用、</p><h4 id="领域驱动设计流程"><a href="#领域驱动设计流程" class="headerlink" title="领域驱动设计流程"></a>领域驱动设计流程</h4><ol><li>需求分析，有规范，使用统一语言</li></ol><p><img src="https://s2.loli.net/2023/03/09/Wh1mQ2Gx6p954bU.jpg" alt="image-20220606161912443"></p><ol start="2"><li><p>领域分析——领域边界划分，边界的划分标准是业务</p><p><img src="https://s2.loli.net/2023/03/09/bsX9wGuCnzvVmot.jpg" alt="image-20220606162020157"></p><p><img src="https://s2.loli.net/2023/03/09/iBsaCTG8cDwhmjZ.jpg" alt="image-20220606162435773"></p></li></ol><p>为了保证领域的内聚性更强，会对领域采取保护手段，包括ACL、OHS、PL</p><p>ACL：接口层面的定义，通过适配器、桥接模式等，</p><p>OHS、PL：应用层</p><p>领域建模</p><p><img src="https://s2.loli.net/2023/03/09/9IrhJ8sfRA3jvxw.jpg" alt="image-20220606180346934"></p><p>领域对象</p><ol><li>Bounded Context</li><li>Aggregate：聚合根，是一个大对象，包含多个Entities、多个Value Object共同组成</li><li>Value Object： 无状态的值对象</li><li>Entities：有唯一标识且有状态的对象</li><li>Services：在Entities无法满足的情况下使用，只操作无状态的数据</li><li>DomainEvents: 领域事件</li><li>Factories：生产Entities等</li><li>Repositoroies：资源，入库操作</li></ol><p>核心业务逻辑</p><p>技术实现细节</p><p>领域驱动中关心业务的流转，业务指的是从订单-&gt;库存-&gt;支付，类似这样的是属于业务；比如，查询订单、查询库存，这些操作不叫业务。</p><h3 id="COLA框架"><a href="#COLA框架" class="headerlink" title="COLA框架"></a>COLA框架</h3><p>CQRS（Command Query</p><p><img src="https://s2.loli.net/2023/03/09/sx2Vri5DHohNJyU.jpg" alt="image-20220606180623948"> </p><p><img src="https://s2.loli.net/2023/03/09/qBSColH4yKN8uit.jpg" alt="image-20220606180731780"></p><p><img src="https://s2.loli.net/2023/03/09/9NtbVd4ATPIkj3f.jpg" alt="image-20220606180920564"></p><p><img src="https://s2.loli.net/2023/03/09/csJZ6LlUSkRB8M3.jpg" alt="image-20220606182738657"></p><h3 id="六边形架构"><a href="#六边形架构" class="headerlink" title="六边形架构"></a>六边形架构</h3><p><img src="https://s2.loli.net/2023/03/09/7mqzXYA6RkWptVw.jpg" alt="image-20220606182856085"></p><h3 id="洋葱架构"><a href="#洋葱架构" class="headerlink" title="洋葱架构"></a>洋葱架构</h3><p>纵向架构+六边形横向架构相结合</p><p><img src="https://s2.loli.net/2023/03/09/6S314CdhuIBfTlK.jpg" alt="image-20220606183208041"></p><p><img src="https://s2.loli.net/2023/03/09/xuWEJIs7wXKdyCS.jpg" alt="image-20220606183246117"></p><h3 id="分层架构与DDD整合"><a href="#分层架构与DDD整合" class="headerlink" title="分层架构与DDD整合"></a>分层架构与DDD整合</h3><p><img src="https://s2.loli.net/2023/03/09/ewSh8d4yUEnGaXp.jpg" alt="image-20220606183418050"></p><h3 id="落地框架-COLA"><a href="#落地框架-COLA" class="headerlink" title="落地框架-COLA"></a>落地框架-COLA</h3><p><img src="https://s2.loli.net/2023/03/09/nmYsxPtqpJKb5VG.jpg" alt="image-20220606183538241"></p><h3 id="微服务拆分"><a href="#微服务拆分" class="headerlink" title="微服务拆分"></a>微服务拆分</h3><p><img src="https://s2.loli.net/2023/03/09/GYOn6byf5Je7dBN.jpg" alt="image-20220606184613350"></p><p><img src="https://s2.loli.net/2023/03/09/hQNMutwJqY3HOlx.jpg" alt="image-20220606184545801"></p><p><img src="https://s2.loli.net/2023/03/09/naF1CeuHrl2oZsw.jpg" alt="image-20220607104056597"></p><p><img src="https://s2.loli.net/2023/03/09/H95jPSb2NrfcqpW.jpg" alt="image-20220607104348232"></p><p><img src="https://s2.loli.net/2023/03/09/EQt6PeiJc4zn5bU.jpg" alt="image-20220607112314611"></p><p><img src="https://s2.loli.net/2023/03/09/64dFZB8VxIMsNLy.jpg" alt="image-20220607112858273"></p><p><img src="https://s2.loli.net/2023/03/09/lCxjO2K5I1SkL8W.jpg" alt="image-20220607113712361"></p><p><img src="https://s2.loli.net/2023/03/09/j3dRS1q7e5aGVnb.jpg" alt="image-20220607113749800"></p>]]></content>
    
    
    
    <tags>
      
      <tag>DDD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/09/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/%E7%BE%A4%E6%99%96%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/03/09/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/%E7%BE%A4%E6%99%96%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>安装MySQL套件</p><p><img src="https://s2.loli.net/2023/03/09/4XpjNVa38BnArsx.png" alt="image-20230309152607575"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/09/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/typora%E9%85%8D%E7%BD%AEpicgo%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/03/09/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/typora%E9%85%8D%E7%BD%AEpicgo%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="typora配置picgo命令行图床"><a href="#typora配置picgo命令行图床" class="headerlink" title="typora配置picgo命令行图床"></a>typora配置picgo命令行图床</h2><ol><li>通过node方式安装picgo</li></ol><blockquote><p>参见官网 <a href="https://support.typora.io/Upload-Image/#install-picgo-core-via-node-package-manager-requires-nodejs-runtime">https://support.typora.io/Upload-Image/#install-picgo-core-via-node-package-manager-requires-nodejs-runtime</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install picgo -g<br><span class="hljs-comment"># or</span><br>yarn global add picgo<br></code></pre></td></tr></table></figure><ol start="2"><li><p>注册smms云存储账号并获取token</p><blockquote><p>注册地址 国内访问：<a href="https://smms.app/">https://smms.app/</a></p></blockquote></li><li><p>picgo设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置上传器</span><br>picgo <span class="hljs-built_in">set</span> uploader<br><span class="hljs-comment"># 设置默认上传</span><br>picgo use uploader<br></code></pre></td></tr></table></figure><p>选择对应的云存储进行设置即可，配置文件为~&#x2F;.picgo&#x2F;config.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"> 1 &#123;<br> 2   <span class="hljs-string">&quot;picBed&quot;</span>: &#123;<br> 3     <span class="hljs-string">&quot;uploader&quot;</span>: <span class="hljs-string">&quot;smms&quot;</span>,<br> 4     <span class="hljs-string">&quot;current&quot;</span>: <span class="hljs-string">&quot;smms&quot;</span>,<br> 5     <span class="hljs-string">&quot;smms&quot;</span>: &#123;<br> 6       <span class="hljs-string">&quot;token&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span>,<br> 7       <span class="hljs-string">&quot;backupDomain&quot;</span>: <span class="hljs-string">&quot;smms.app&quot;</span><br> 8     &#125;,<br>16     <span class="hljs-string">&quot;transformer&quot;</span>: <span class="hljs-string">&quot;path&quot;</span><br>17   &#125;,<br>18   <span class="hljs-string">&quot;picgoPlugins&quot;</span>: &#123;&#125;<br>19 &#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/hkdXTiOmM1QWsyf.png" alt="image-20230309135031114"></p></li><li><p>配置typora</p><blockquote><p>官网说明，使用命令行方式配置picgo的命令如下 </p><p><strong>[your node path] [your picgo-core path] upload</strong></p><p>所以我配置的是：<code>/usr/local/opt/node@14/bin/node /usr/local/bin/picgo upload</code></p></blockquote><p><img src="https://s2.loli.net/2023/03/09/ylnMsbi8gFPdEUm.png" alt="image-20230309133853849"></p><p><img src="https://s2.loli.net/2023/03/09/ZOgSVD13qh8ea5l.png" alt="image-20230309134713472"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/26/Middleware/MessageQueue/RocketMq%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/"/>
    <url>/2022/10/26/Middleware/MessageQueue/RocketMq%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</url>
    
    <content type="html"><![CDATA[<h1 id="RocketMq技术内幕"><a href="#RocketMq技术内幕" class="headerlink" title="RocketMq技术内幕"></a>RocketMq技术内幕</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>类加载子系统</title>
    <link href="/2022/10/13/Java/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/10/13/Java/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="类加载子系统-Class-Loader-SubSystem"><a href="#类加载子系统-Class-Loader-SubSystem" class="headerlink" title="类加载子系统 Class Loader SubSystem"></a>类加载子系统 Class Loader SubSystem</h1><p><strong>类加载过程</strong></p><ol><li>加载 Loading：从物理磁盘加载class文件到内存中，将字节流所代表的静态结构转换方法区的运行时数据结构，同时在方法区生成类的Class对象</li><li>链接 Linking</li><li><ol><li>验证 Verify：验证class的文件的合法性</li><li>准备 Prepare：为类变量分配内存并初始化零值，这里不包含final修饰的类变量，因为final修饰的类变量在编译时候就会分配，在此阶段会显示初始化</li><li>解析 Resolve：将常量池的<strong>符号引用转换为直接引用</strong>，即建立一个指针指向对应的对象。</li></ol></li><li>初始化 Initialization: 执行类构造器方法（虚拟机视角下的）<clinit>的过程，<clinit>是收集所有类变量的赋值过程并顺序执行，clinit在多线程下被同步加锁。</li></ol><p><strong>双亲委派机制</strong></p><p>JVM对class文件采用的是按需加载的方式，当需要使用该类时才会将它的class文件加载到内存中生成class对象，而加载class文件时采用的就是双亲委派机制，即交由父类加载器先处理，一层一层向上委托到Bootstrap ClassLoader引导类加载器处理，如果属于引导类加载器处理的范围（Java.lang包）则进行类加载，一旦找到就停止继续委托，如果不属于则向下委托直至找到正确的类加载器。</p><p>优势：</p><ol><li>避免类的重复加载</li><li>保护程序安全，防止核心API被篡改</li></ol><p>沙箱安全机制：当我们自定义一个String的类，类加载器最终还是会加载rt.jar包下的String类，从而避免程序受到恶意攻击，保证java核心源代码的保护，这就是沙箱安全机制。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql排序算法</title>
    <link href="/2022/10/09/DB/Mysql%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2022/10/09/DB/Mysql%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql排序算法"><a href="#Mysql排序算法" class="headerlink" title="Mysql排序算法"></a>Mysql排序算法</h1><blockquote><p>参考MySQL45讲</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>假设这个表的部分定义是这样的：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">CREATE TABLE `t` (<br>  `id` int(<span class="hljs-number">11</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `city` varchar(<span class="hljs-number">16</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `name` varchar(<span class="hljs-number">16</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `age` int(<span class="hljs-number">11</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `addr` varchar(<span class="hljs-number">128</span>) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  KEY `city` (`city`)<br>) ENGINE=InnoDB<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这时，你的SQL语句可以这么写：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> city,<span class="hljs-type">name</span>,age <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> city=<span class="hljs-string">&#x27;杭州&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-type">name</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1000</span>  ;<br></code></pre></td></tr></table></figure><h2 id="全字段排序"><a href="#全字段排序" class="headerlink" title="全字段排序"></a>全字段排序</h2><blockquote><p><font color=red><strong>将需要查询的字段和排序字段一起排序</strong></font></p></blockquote><p><img src="https://static001.geekbang.org/resource/image/82/03/826579b63225def812330ef6c344a303.png" alt="img"></p><p>使用explain命令查看语句的执行情况</p><p>&#x3D;&#x3D;Extra这个字段中的“Using filesort”表示的就是需要排序，MySQL会给每个线程分配一块内存用于排序，称为sort_buffer。&#x3D;&#x3D;</p><p>通常情况下，这个语句执行流程如下所示 ：</p><ol><li>初始化sort_buffer，确定放入name、city、age这三个字段；</li><li>从索引city找到第一个满足city&#x3D;’杭州’条件的主键id，也就是图中的ID_X；</li><li>到主键id索引取出整行，取name、city、age三个字段的值，存入sort_buffer中；</li><li>从索引city取下一个记录的主键id；</li><li>重复步骤3、4直到city的值不满足查询条件为止，对应的主键id也就是图中的ID_Y；</li><li>对sort_buffer中的数据按照字段name做快速排序；</li><li>按照排序结果取前1000行返回给客户端。</li></ol><p>我们暂且把这个排序过程，称为全字段排序，执行流程的示意图如下所示，下一篇文章中我们还会用到这个排序。</p><p><img src="https://static001.geekbang.org/resource/image/6c/72/6c821828cddf46670f9d56e126e3e772.jpg" alt="img"></p><h2 id="rowid排序"><a href="#rowid排序" class="headerlink" title="rowid排序"></a>rowid排序</h2><blockquote><p>如果MySQL认为排序的单行长度太大，则会使用rowid算法</p><p>查看单行长度：show VARIABLES like ‘max_length_for_sort_data’;</p></blockquote><p>&#x3D;&#x3D;<font color=red><strong>rowid算法放入sort_buffer的字段，只有要排序的列（即name字段）和主键id。</strong></font>&#x3D;&#x3D;</p><p>但这时，排序的结果就因为少了city和age字段的值，不能直接返回了，整个执行流程就变成如下所示的样子：</p><ol><li>初始化sort_buffer，确定放入两个字段，即name和id；</li><li>从索引city找到第一个满足city&#x3D;’杭州’条件的主键id，也就是图中的ID_X；</li><li>到主键id索引取出整行，取name、id这两个字段，存入sort_buffer中；</li><li>从索引city取下一个记录的主键id；</li><li>重复步骤3、4直到不满足city&#x3D;’杭州’条件为止，也就是图中的ID_Y；</li><li>对sort_buffer中的数据按照字段name进行排序；</li><li>遍历排序结果，取前1000行，并按照id的值回到原表中取出city、name和age三个字段返回给客户端。</li></ol><p>这个执行流程的示意图如下，我把它称为rowid排序。</p><p><img src="https://static001.geekbang.org/resource/image/dc/6d/dc92b67721171206a302eb679c83e86d.jpg" alt="img"></p><h2 id="全字段排序-VS-rowid排序"><a href="#全字段排序-VS-rowid排序" class="headerlink" title="全字段排序 VS rowid排序"></a>全字段排序 VS rowid排序</h2><p>&#x3D;&#x3D;<strong>对于InnoDB表来说，rowid排序会要求回表多造成磁盘读，因此不会被优先选择。</strong>&#x3D;&#x3D;</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><blockquote><p>尽量保证索引树的数据是有序的，这样使用order by的时候就不需要额外的开销进行排序了</p><ol><li><p>将排序字段与查询字段建立联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t <span class="hljs-keyword">add</span> index city_user(city, name);<br></code></pre></td></tr></table></figure><p><img src="https://static001.geekbang.org/resource/image/fc/8a/fc53de303811ba3c46d344595743358a.png" alt="img"></p><p><img src="https://static001.geekbang.org/resource/image/f9/bf/f980201372b676893647fb17fac4e2bf.png" alt="img"></p></li><li><p>使用覆盖索引，减少回表</p><p><img src="https://static001.geekbang.org/resource/image/9e/23/9e40b7b8f0e3f81126a9171cc22e3423.png" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t <span class="hljs-keyword">add</span> index city_user_age(city, name, age);<br></code></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建博客</title>
    <link href="/2022/10/06/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/10/06/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo搭建博客"><a href="#Hexo搭建博客" class="headerlink" title="Hexo搭建博客"></a>Hexo搭建博客</h2><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>安装基础环境</p><blockquote><p>Node.js和git</p></blockquote></li><li><p>安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>建站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure><p>目录结构如下</p><p><img src="https://s2.loli.net/2023/03/09/bhRapLIUJl2CYFt.jpg" alt="image-20221005141812611"></p></li><li><p>初始化博客内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> blog<br><span class="hljs-comment"># </span><br>npm install<br></code></pre></td></tr></table></figure></li><li><p>开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成html等静态资源文件</span><br>hexo generate <span class="hljs-comment"># 也可以使用缩写版本：hexo g</span><br><span class="hljs-comment"># 启动服务</span><br>hexo server<span class="hljs-comment"># 也可以使用缩写版本：hexo s</span><br><span class="hljs-comment"># 后台启动</span><br><span class="hljs-built_in">nohup</span> hexo server &amp;<br></code></pre></td></tr></table></figure><blockquote><p>PS. 生成资源文件时，不会覆盖重名的文件，比如图片banner</p></blockquote></li><li><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a></p></li></ol><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><blockquote><ol><li><p>克隆NexT主题到themes文件夹</p><p>git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></p></li><li><p>下载Fluid主题解压到themes文件夹</p><blockquote><p>主题官网文档：<a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p></blockquote><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>PS. 使用fluid主题时，下载下来的文件夹名字是这样的<code>hexo-theme-fluid-1.9.3</code>，需要将其修改为<code>fluid</code>；</p></li></ol></blockquote><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><blockquote><p>修改<code>_config.yml</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># theme: next  # 指定主题</span><br>theme: fluid  <span class="hljs-comment"># 指定主题</span><br>language: zh-CN  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h3 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h3><blockquote><p>首次使用主题的「关于页」需要手动创建：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 测试文章<br></code></pre></td></tr></table></figure><h3 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h3><p>修改<code>_config.yml</code>即可</p><h3 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h3><blockquote><p>账号注册：<a href="https://console.leancloud.cn/register">https://console.leancloud.cn/register</a></p><p>需身份验证和邮箱验证</p></blockquote><p><strong>创建应用</strong></p><p><img src="https://s2.loli.net/2023/03/09/DIzus2iZjeTUXGm.jpg" alt="image-20221005182005192"></p><p><strong>获取应用appid</strong></p><p><img src="https://s2.loli.net/2023/03/09/ruesl2av64jhwNz.jpg" alt="image-20221005182543636"></p><p>打开主题目录 <code>themes\fluid</code>下的 <code>_config.yml</code> 文件，修改如下配置</p><ol><li>开启统计</li></ol><p><img src="https://s2.loli.net/2023/03/09/i1FctprNDzwyCkd.jpg" alt="image-20221005183006359"></p><ol start="2"><li>配置 <code>leancloud</code>的 <code>app_id</code> 、 <code>app_key</code>和<code>REST API 服务器地址</code></li></ol><p><img src="https://s2.loli.net/2023/03/09/DL2VzhoW4iJw7UP.jpg" alt="image-20221005183114159"></p><ol start="3"><li>打开计数功能，统计来源改为 <code>leancloud</code></li></ol><p><img src="https://s2.loli.net/2023/03/09/NxyVGBcSCgpnj5v.jpg" alt="image-20221005184055476"></p><ol start="4"><li><h5 id="页面底部展示网站的-PV、UV-统计数"><a href="#页面底部展示网站的-PV、UV-统计数" class="headerlink" title="页面底部展示网站的 PV、UV 统计数"></a>页面底部展示网站的 PV、UV 统计数</h5></li></ol><p><img src="https://s2.loli.net/2023/03/09/bx8GwcSPoNgju6Z.jpg" alt="image-20221005184926645"></p><h3 id="开启评论功能"><a href="#开启评论功能" class="headerlink" title="开启评论功能"></a>开启评论功能</h3><p>打开主题目录 <code>themes\fluid</code>下的 <code>_config.yml</code> 文件，修改如下配置</p><p><img src="https://s2.loli.net/2023/03/09/pIC3HOolaVbiqYA.jpg" alt="image-20221005185903196"></p><p><img src="https://s2.loli.net/2023/03/09/rz6jCS3AKbe4l8J.jpg" alt="image-20221005185309930"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>站点设置：根目录<code>_config.yml</code></p><p>主题设置：根目录<code>_config.fluid.yml</code></p><h2 id="在Github上托管"><a href="#在Github上托管" class="headerlink" title="在Github上托管"></a>在Github上托管</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><img src="https://s2.loli.net/2023/03/09/cOisptJ35AHrNq6.jpg" alt="image-20221005191814021"></p><h3 id="创建token"><a href="#创建token" class="headerlink" title="创建token"></a>创建token</h3><p><img src="https://s2.loli.net/2023/03/09/jqDY4zrGuykIKhm.jpg" alt="image-20221005190403282"></p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p><img src="https://s2.loli.net/2023/03/09/GB3kdsrHcKovEe2.jpg" alt="image-20221005190528703"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><blockquote><p>部署后的渲染有点慢，不要着急，请耐心等待~</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure><h3 id="创建Readme文件"><a href="#创建Readme文件" class="headerlink" title="创建Readme文件"></a>创建Readme文件</h3><p>&#x3D;&#x3D;<strong>发布后记得添加Readme.md文件，否则网站无法访问</strong>&#x3D;&#x3D;</p><p><img src="https://s2.loli.net/2023/03/09/IcGsYCL9RuSoKWD.jpg" alt="image-20221005192010048"></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="https://unclebryan719.github.io/">https://unclebryan719.github.io/</a></p><h3 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h3><blockquote><p>直接在设置页面配置域名即可，我没有配置域名解析也成功了</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/5AkM6oeZ9LQcsW4.jpg" alt="image-20221006162117603"></p><blockquote><p>配置后会生成一个CNAME的文件，记得把它copy到public文件夹，否则，每次自定义域名都会被清除</p></blockquote><p><img src="https://s2.loli.net/2023/03/09/opV9ELH7yKJutrQ.jpg" alt="image-20221006170751802"></p><p><img src="https://s2.loli.net/2023/03/09/8EVCjyHbIKokYhP.jpg" alt="image-20221006170823489"></p><h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><ol><li><p>有时发布大量文章可能会导致无法正常加载Title信息，此时可以将public资源清理，重新发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g d<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2022/09/29/ElasticSearch/ElasticSearch/"/>
    <url>/2022/09/29/ElasticSearch/ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><blockquote><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/index.html</a></p></blockquote><h4 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create elastic<br>docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.6<br>docker run --name es01-test --net elastic -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> docker.elastic.co/elasticsearch/elasticsearch:7.17.6<br></code></pre></td></tr></table></figure><h4 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull docker.elastic.co/kibana/kibana:7.17.6<br>docker run --name kib01-test --net elastic -p 127.0.0.1:5601:5601 -e <span class="hljs-string">&quot;ELASTICSEARCH_HOSTS=http://es01-test:9200&quot;</span> docker.elastic.co/kibana/kibana:7.17.6<br></code></pre></td></tr></table></figure><h4 id="访问Kibana"><a href="#访问Kibana" class="headerlink" title="访问Kibana"></a>访问Kibana</h4><blockquote><p><a href="http://localhost:5601/">http://localhost:5601</a></p></blockquote><h4 id="Search-Api"><a href="#Search-Api" class="headerlink" title="Search Api"></a>Search Api</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-search.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-search.html</a></p><h4 id="Query-DSL"><a href="#Query-DSL" class="headerlink" title="Query DSL"></a>Query DSL</h4><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl.html</a></p>]]></content>
    
    
    <categories>
      
      <category>es</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tech</tag>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集成Swagger</title>
    <link href="/2022/08/22/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/swagger%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/08/22/%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/swagger%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="集成Swagger"><a href="#集成Swagger" class="headerlink" title="集成Swagger"></a>集成Swagger</h1><h2 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><blockquote><p>Swagger: <a href="http://springfox.github.io/springfox/docs/current/">http://springfox.github.io/springfox/docs/current/</a></p><p>Knife4j: <a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a></p></blockquote><h3 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- swagger3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- knife4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Swagger相关配置"><a href="#Swagger相关配置" class="headerlink" title="Swagger相关配置"></a>Swagger相关配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># ===== 自定义swagger配置 ===== #</span><br><span class="hljs-comment"># 是否开启swagger，生产环境一般关闭</span><br><span class="hljs-attr">swagger.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># title</span><br><span class="hljs-attr">swagger.application-name</span>= <span class="hljs-string">$&#123;spring.application.name&#125;</span><br><span class="hljs-comment"># 接口文档版本</span><br><span class="hljs-attr">swagger.application-version</span>=<span class="hljs-string">1.0</span><br><span class="hljs-comment"># 文档描述</span><br><span class="hljs-attr">swagger.application-description</span>=<span class="hljs-string">swagger测试文档描述</span><br><span class="hljs-comment"># 联系人</span><br><span class="hljs-attr">swagger.contact-name</span>=<span class="hljs-string">王宝建</span><br><span class="hljs-comment"># 联系人邮箱</span><br><span class="hljs-attr">swagger.contact-email</span>=<span class="hljs-string">wangbaojian@okay.cn</span><br><span class="hljs-comment"># 组织地址</span><br><span class="hljs-attr">swagger.terms-url</span>=<span class="hljs-string">https://okos.yuque.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 开启knife4j增强功能</span><br><span class="hljs-attr">knife4j.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 开启basic身份认证功能</span><br><span class="hljs-attr">knife4j.basic.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">knife4j.basic.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">knife4j.basic.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h3 id="Swagger配置类"><a href="#Swagger配置类" class="headerlink" title="Swagger配置类"></a>Swagger配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestParameterBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.service.RequestParameter;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> unclebryan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> ok-app-web</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/19 19:39:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// @EnableOpenApi目的是导入OpenApiDocumentationConfiguration.class，可以省略，因为在starter中已经自动配置了OpenApiAutoConfiguration(在该类中导入了OpenApiDocumentationConfiguration.class)</span><br><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;swagger&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否开启swagger，生产环境一般关闭</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Boolean enable;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 项目应用名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String applicationName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 项目版本信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String applicationVersion;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 项目描述信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String applicationDescription;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 联系人姓名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String contactName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 联系人邮箱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String contactEmail;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组织地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Value(&quot;https://okos.yuque.com/dashboard&quot;)</span><br>    <span class="hljs-keyword">private</span> String termsUrl;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//添加head参数</span><br>        <span class="hljs-type">RequestParameterBuilder</span> <span class="hljs-variable">tokenPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>();<br>        <span class="hljs-type">RequestParameterBuilder</span> <span class="hljs-variable">requestIdPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>();<br>        <span class="hljs-type">RequestParameterBuilder</span> <span class="hljs-variable">systemIdPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>();<br>        List&lt;RequestParameter&gt; pars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;RequestParameter&gt;();<br>        tokenPar.name(<span class="hljs-string">&quot;token&quot;</span>).description(<span class="hljs-string">&quot;token&quot;</span>)<br>                .in(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        requestIdPar.name(<span class="hljs-string">&quot;requestid&quot;</span>).description(<span class="hljs-string">&quot;requestid&quot;</span>)<br>                .in(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        systemIdPar.name(<span class="hljs-string">&quot;systemId&quot;</span>).description(<span class="hljs-string">&quot;systemId&quot;</span>)<br>                .in(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        pars.add(tokenPar.build());<br>        pars.add(requestIdPar.build());<br>        pars.add(systemIdPar.build());<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)<br>                .enable(enable)<br>                .select()<br>                <span class="hljs-comment">// 扫描的包路径</span><br>                .apis(<br>                        RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.noriental.okapp.module.coupon.controller&quot;</span>)<br>                                .or(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.noriental.okapp.module.user.v1.controller&quot;</span>))<br>                )<br>                <span class="hljs-comment">// 定义要生成文档的Api的url路径规则</span><br>                .paths(<br>                        PathSelectors.ant(<span class="hljs-string">&quot;/v1/**&quot;</span>)<br>                                .and(PathSelectors.ant(<span class="hljs-string">&quot;/v1/coupon/**&quot;</span>))<br>                )<br>                .build()<br>                .globalRequestParameters(pars)<br>          <span class="hljs-comment">// 可以忽略一些不需要的参数类型</span><br>                .ignoredParameterTypes(HttpSession.class)<br>                <span class="hljs-comment">// 设置swagger-ui.html页面上的一些元素信息。</span><br>                .apiInfo(apiInfo());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(applicationName)<br>                .description(applicationDescription)<br>                .version(applicationVersion)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(contactName,<span class="hljs-string">&quot;&quot;</span>,contactEmail))<br>                .termsOfServiceUrl(termsUrl)<br>                .build();<br>    &#125;<br>  <br>  <span class="hljs-comment">// SwaggerUiWebMvcConfigurer中也对下面做了一些配置</span><br>  <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;swagger-ui.html&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匹配规则说明"><a href="#匹配规则说明" class="headerlink" title="匹配规则说明"></a>匹配规则说明</h3><ol><li><p>包匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">apis(<br>  RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.noriental.okapp.module.coupon.controller&quot;</span>)    .or(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.noriental.okapp.module.user.v1.controller&quot;</span>)))<br></code></pre></td></tr></table></figure></li><li><p>路径匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">paths(<br>                        PathSelectors.ant(<span class="hljs-string">&quot;/v1/**&quot;</span>)<br>                                .and(PathSelectors.ant(<span class="hljs-string">&quot;/v1/coupon/**&quot;</span>))<br>                )<br></code></pre></td></tr></table></figure></li><li><p>正则匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">paths(<br>                        PathSelectors.regex(<span class="hljs-string">&quot;/v1/**&quot;</span>)<br>                                .and(PathSelectors.regex(<span class="hljs-string">&quot;/v1/coupon/**&quot;</span>))<br>                )<br></code></pre></td></tr></table></figure></li><li><p>不匹配</p><blockquote><p>使用<code>@ApiIgnore</code>注解，即可忽略不需要进行Swagger的类或者方法，如可以屏蔽跑数据的接口</p><p>同时，该注解还可以忽略不需要的参数，如 <code>(@RequestBody @Valid RequestEntity&lt;CouponRequest&gt; request, @ApiIgnore HttpSession session)</code></p></blockquote></li></ol><blockquote><p><strong>PS. 以上操作均可以通过Predicate的negate()方法进行取反操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">.paths(<br>        PathSelectors.ant(<span class="hljs-string">&quot;/v1/**&quot;</span>)<br>                .and(PathSelectors.ant(<span class="hljs-string">&quot;/v1/coupon/**&quot;</span>).negate())<br>)<br></code></pre></td></tr></table></figure></blockquote><h3 id="文档访问地址"><a href="#文档访问地址" class="headerlink" title="文档访问地址"></a>文档访问地址</h3><blockquote><p>swagger</p><p><a href="http://localhost:8999/swagger-ui/index.html">http://localhost:8999/swagger-ui/index.html</a></p><p>Knief4j</p><p><a href="http://localhost:8999/doc.html">http://localhost:8999/doc.html</a></p></blockquote><h2 id="认证与授权（可选）"><a href="#认证与授权（可选）" class="headerlink" title="认证与授权（可选）"></a>认证与授权（可选）</h2><h3 id="相关依赖-1"><a href="#相关依赖-1" class="headerlink" title="相关依赖"></a>相关依赖</h3><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security.oauth.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-oauth2-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><h4 id="授权服务配置类"><a href="#授权服务配置类" class="headerlink" title="授权服务配置类"></a>授权服务配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.noriental.okapp.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 2020/10/25 9:20</span><br><span class="hljs-comment"> * 授权服务</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAuthorizationServer</span><br><span class="hljs-meta">@Order(404)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizationServerConfigurerAdapter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AuthenticationManager authenticationManager;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BCryptPasswordEncoder bCryptPasswordEncoder;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AuthConfiguration</span><span class="hljs-params">(AuthenticationManager authenticationManager, BCryptPasswordEncoder bCryptPasswordEncoder)</span> &#123;<br>        <span class="hljs-built_in">this</span>.authenticationManager = authenticationManager;<br>        <span class="hljs-built_in">this</span>.bCryptPasswordEncoder = bCryptPasswordEncoder;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        endpoints.authenticationManager(authenticationManager);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//授权码模式（authorization code）</span><br>        <span class="hljs-comment">//简化模式（implicit）</span><br>        <span class="hljs-comment">//密码模式（resource owner password credentials）</span><br>        <span class="hljs-comment">//客户端模式（client credentials）</span><br><br>        <span class="hljs-comment">// 内存模式存储token</span><br>        clients.inMemory()<br>            .withClient(<span class="hljs-string">&quot;okay&quot;</span>).secret(bCryptPasswordEncoder.encode(<span class="hljs-string">&quot;123&quot;</span>))<br>                <span class="hljs-comment">//.authorizedGrantTypes(&quot;implicit&quot;)</span><br>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>)<br>                <span class="hljs-comment">//.authorizedGrantTypes(&quot;password&quot;)</span><br>                <span class="hljs-comment">//.authorizedGrantTypes(&quot;client_credentials&quot;)</span><br>                .redirectUris(<br>                        <span class="hljs-comment">// knife4j 授权地址</span><br>                        <span class="hljs-string">&quot;http://localhost:8999/webjars/oauth/oauth2.html&quot;</span>,<br>                        <span class="hljs-comment">// swagger 授权地址</span><br>                        <span class="hljs-string">&quot;http://localhost:8999/swagger-ui/oauth2-redirect.html&quot;</span>)<br>                .scopes(<span class="hljs-string">&quot;read&quot;</span>,<span class="hljs-string">&quot;write&quot;</span>,<span class="hljs-string">&quot;reads&quot;</span>,<span class="hljs-string">&quot;writes&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerSecurityConfigurer security)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        security<br>                .tokenKeyAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)<br>                .checkTokenAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)<br>                .allowFormAuthenticationForClients();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="认证服务配置类"><a href="#认证服务配置类" class="headerlink" title="认证服务配置类"></a>认证服务配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.noriental.okapp.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.config.BeanIds;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认证服务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> unclebryan</span><br><span class="hljs-comment"> * 2022年08月31日19:26:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Order(300)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityWebConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean(name = BeanIds.AUTHENTICATION_MANAGER)</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> BCryptPasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable();<br>        http<br>                .authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/v1/coupon/**&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;coupon&quot;</span>,<span class="hljs-string">&quot;ROLE_TEST&quot;</span>,<span class="hljs-string">&quot;ROLE_ADMIN&quot;</span>)<br>                .antMatchers(<span class="hljs-string">&quot;/v1/**&quot;</span>).hasAnyRole(<span class="hljs-string">&quot;TEST&quot;</span>,<span class="hljs-string">&quot;ADMIN&quot;</span>)<br>                .anyRequest().authenticated()<br>                .and()<br>                .formLogin().permitAll();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.inMemoryAuthentication()<br>            .passwordEncoder(passwordEncoder())<br>            .withUser(<span class="hljs-string">&quot;admin&quot;</span>).password(passwordEncoder().encode(<span class="hljs-string">&quot;123&quot;</span>)).roles(<span class="hljs-string">&quot;ADMIN&quot;</span>)<br>            .and()<br>            .withUser(<span class="hljs-string">&quot;bryan&quot;</span>).password(passwordEncoder().encode(<span class="hljs-string">&quot;123&quot;</span>)).roles(<span class="hljs-string">&quot;TEST&quot;</span>)<br>            .and()<br>            .withUser(<span class="hljs-string">&quot;lijing&quot;</span>).password(passwordEncoder().encode(<span class="hljs-string">&quot;123&quot;</span>)).authorities(<span class="hljs-string">&quot;coupon&quot;</span>)<br>        ;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Swagger配置类-1"><a href="#Swagger配置类-1" class="headerlink" title="Swagger配置类"></a>Swagger配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.noriental.okapp.config;<br><br><span class="hljs-keyword">import</span> com.google.common.collect.Lists;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.OAuthBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestParameterBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AuthorizationCodeGrant;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AuthorizationScope;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.service.GrantType;<br><span class="hljs-keyword">import</span> springfox.documentation.service.OAuth;<br><span class="hljs-keyword">import</span> springfox.documentation.service.RequestParameter;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityReference;<br><span class="hljs-keyword">import</span> springfox.documentation.service.SecurityScheme;<br><span class="hljs-keyword">import</span> springfox.documentation.service.TokenEndpoint;<br><span class="hljs-keyword">import</span> springfox.documentation.service.TokenRequestEndpoint;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> unclebryan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@project</span> ok-app-web</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/19 19:39:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;swagger&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span>  &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否开启swagger，生产环境一般关闭</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Boolean enable;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 项目应用名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String applicationName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 项目版本信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String applicationVersion;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 项目描述信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String applicationDescription;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 联系人姓名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String contactName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 联系人邮箱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String contactEmail;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 组织地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Value(&quot;https://okos.yuque.com/dashboard&quot;)</span><br>    <span class="hljs-keyword">private</span> String termsUrl;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .enable(enable)<br>                .useDefaultResponseMessages(<span class="hljs-literal">false</span>)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.noriental.okapp.module&quot;</span>))<br>                <span class="hljs-comment">// 扫描的包路径</span><br>                .build()<br>                <span class="hljs-comment">// 支持的通讯协议集合</span><br>                .protocols(newHashSet(<span class="hljs-string">&quot;https&quot;</span>, <span class="hljs-string">&quot;http&quot;</span>))<br>                .securitySchemes(getSecuritySchemes())<br>                .securityContexts(getSecurityContexts())<br>                .globalRequestParameters(getParameters())<br>                <span class="hljs-comment">// 设置swagger-ui.html页面上的一些元素信息。</span><br>                .apiInfo(apiInfo());<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(applicationName)<br>                .description(applicationDescription)<br>                .version(applicationVersion)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(contactName,<span class="hljs-string">&quot;&quot;</span>,contactEmail))<br>                .termsOfServiceUrl(termsUrl)<br>                .build();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置请求头参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;RequestParameter&gt; <span class="hljs-title function_">getParameters</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//添加head参数</span><br>        <span class="hljs-type">RequestParameterBuilder</span> <span class="hljs-variable">tokenPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>();<br>        <span class="hljs-type">RequestParameterBuilder</span> <span class="hljs-variable">requestIdPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>();<br>        <span class="hljs-type">RequestParameterBuilder</span> <span class="hljs-variable">systemIdPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestParameterBuilder</span>();<br>        List&lt;RequestParameter&gt; parameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;RequestParameter&gt;();<br>        tokenPar.name(<span class="hljs-string">&quot;token&quot;</span>).description(<span class="hljs-string">&quot;token&quot;</span>)<br>                .in(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        requestIdPar.name(<span class="hljs-string">&quot;requestid&quot;</span>).description(<span class="hljs-string">&quot;requestid&quot;</span>)<br>                .in(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        systemIdPar.name(<span class="hljs-string">&quot;systemId&quot;</span>).description(<span class="hljs-string">&quot;systemId&quot;</span>)<br>                .in(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        parameters.add(tokenPar.build());<br>        parameters.add(requestIdPar.build());<br>        parameters.add(systemIdPar.build());<br>        <span class="hljs-keyword">return</span> parameters;<br>    &#125;<br><br><br>    <span class="hljs-meta">@SafeVarargs</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> &lt;T&gt; Set&lt;T&gt; <span class="hljs-title function_">newHashSet</span><span class="hljs-params">(T... ts)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ts.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(ts));<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证模式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;SecurityScheme&gt; <span class="hljs-title function_">getSecuritySchemes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//schema</span><br>        List&lt;GrantType&gt; grantTypes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//授权码模式AuthorizationCodeGrant</span><br>        TokenRequestEndpoint tokenRequestEndpoint=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenRequestEndpoint</span>(<span class="hljs-string">&quot;/oauth/authorize&quot;</span>,<span class="hljs-string">&quot;okay&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        TokenEndpoint tokenEndpoint=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenEndpoint</span>(<span class="hljs-string">&quot;/oauth/token&quot;</span>,<span class="hljs-string">&quot;access_token&quot;</span>);<br>        AuthorizationCodeGrant authorizationCodeGrant=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationCodeGrant</span>(tokenRequestEndpoint,tokenEndpoint);<br>        grantTypes.add(authorizationCodeGrant);<br>        OAuth oAuth=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OAuthBuilder</span>().name(<span class="hljs-string">&quot;oauth2&quot;</span>)<br>                .grantTypes(grantTypes).build();<br>        List&lt;SecurityScheme&gt; securitySchemes=Lists.newArrayList(oAuth);<br>        <span class="hljs-keyword">return</span> securitySchemes;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证的安全上下文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;SecurityContext&gt; <span class="hljs-title function_">getSecurityContexts</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//context</span><br>        <span class="hljs-comment">//scope方位</span><br>        List&lt;AuthorizationScope&gt; scopes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        scopes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;read&quot;</span>,<span class="hljs-string">&quot;read  resources&quot;</span>));<br>        scopes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;write&quot;</span>,<span class="hljs-string">&quot;write resources&quot;</span>));<br>        scopes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;reads&quot;</span>,<span class="hljs-string">&quot;read all resources&quot;</span>));<br>        scopes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;writes&quot;</span>,<span class="hljs-string">&quot;write all resources&quot;</span>));<br><br>        SecurityReference securityReference=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityReference</span>(<span class="hljs-string">&quot;oauth2&quot;</span>,scopes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>[]&#123;&#125;));<br>        SecurityContext securityContext=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityContext</span>(Lists.newArrayList(securityReference),PathSelectors.any(), method-&gt;<span class="hljs-literal">true</span>, operation-&gt;<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//securyContext</span><br>        List&lt;SecurityContext&gt; securityContexts=Lists.newArrayList(securityContext);<br>        <span class="hljs-keyword">return</span> securityContexts;<br>    &#125;<br><br>    <span class="hljs-comment">// SwaggerUiWebMvcConfigurer中也对下面做了一些配置</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;swagger-ui.html&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker网络</title>
    <link href="/2022/06/30/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/ominiPlan%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/06/30/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/ominiPlan%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ol><li>分解任务</li><li>确定投入时间</li><li>定义资源并资源分配</li><li>确定任务的关联关系</li><li>自动排程并检查每项资源的任务是否存在并行</li></ol><h3 id="跟踪项目执行"><a href="#跟踪项目执行" class="headerlink" title="跟踪项目执行"></a>跟踪项目执行</h3><p>设置基线并跟踪计划执行</p><p>如果发现计划与实际偏差过大，则需要修改项目计划</p><p>设置当前的日期并自动排程</p><p>设置新的基线</p><p>如果在开发过程中，有人请假、出差或者被临时调到其他项目组，则需要进行任务拆分</p><p>如果想查看某个人的完成情况，则可以使用过滤功能</p><h4 id="影响资源分级的因素"><a href="#影响资源分级的因素" class="headerlink" title="影响资源分级的因素"></a>影响资源分级的因素</h4><ol><li>时限</li><li>安排与优先级</li><li>任务的关联关系</li><li>资源</li></ol><p>&#x3D;&#x3D;<strong>不要开启自动资源分级</strong>&#x3D;&#x3D;</p><p>当资源分级有问题，可以清除资源分级</p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OmniPlan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mockito学习笔记</title>
    <link href="/2022/05/20/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/mockito/"/>
    <url>/2022/05/20/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/mockito/</url>
    
    <content type="html"><![CDATA[<h2 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h2><ol><li>hamcrest</li><li>Spy是真实的方法，可以通过部分mock</li></ol>]]></content>
    
    
    <categories>
      
      <category>UnitTest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>Mockito</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github代理设置</title>
    <link href="/2022/05/16/%E8%BF%90%E7%BB%B4/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/05/16/%E8%BF%90%E7%BB%B4/github%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="Github代理设置"><a href="#Github代理设置" class="headerlink" title="Github代理设置"></a>Github代理设置</h3><p>git config –global http.proxy <a href="http://127.0.0.1:10809/">http://127.0.0.1:10809</a></p><p>git config –global https.proxy <a href="https://127.0.0.1:10809/">https://127.0.0.1:10809</a></p><p>git config –global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:10808</p><p>git config –global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:10808</p><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><p>git config –global –unset http.proxy</p><p>git config –global –unset https.proxy</p><p>奇怪的是设置http代理后用sock地址下载比用http地址下载更快</p><blockquote><p>git config –global url.”<a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>:”.insteadOf git:&#x2F;&#x2F;github.com&#x2F;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ omz update<br>Updating Oh My Zsh<br>fatal: remote error:<br>  The unauthenticated git protocol on port 9418 is no longer supported.<br>Please see https://github.blog/2021-09-01-improving-git-protocol-security-github/ <span class="hljs-keyword">for</span> more information.<br>There was an error updating. Try again later?<br>➜  ~ git config --global url.<span class="hljs-string">&quot;git@github.com:&quot;</span>.insteadOf git://github.com/<br>➜  ~ omz update<br>Updating Oh My Zsh<br>master<br><br>Features:<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes使用</title>
    <link href="/2022/05/16/CloudNative/Kubernetes%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/16/CloudNative/Kubernetes%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes使用"><a href="#Kubernetes使用" class="headerlink" title="Kubernetes使用"></a>Kubernetes使用</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Go语言开发，消耗资源小，基于Google内部的Borg系统设计思想进行设计并开源；特性伸缩；负载均衡：IPVS</p></blockquote><p>无状态服务：LVS、APACHE，Docker主要适用于无状态服务</p><p>有状态服务：DBMS</p><h4 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h4><p>Borg系统</p><p><img src="E:\我的\学习文档\md-pic\image-20210823213651275.png" alt="image-20210823213651275"></p><p>K8s系统</p><p><img src="E:\我的\学习文档\md-pic\image-20210823213835695.png" alt="image-20210823213835695"></p><h5 id="API-Server"><a href="#API-Server" class="headerlink" title="API Server"></a>API Server</h5><blockquote><p>所有服务的统一访问入口</p></blockquote><h5 id="Controller-Manager"><a href="#Controller-Manager" class="headerlink" title="Controller Manager:"></a>Controller Manager:</h5><blockquote><p>维持副本期望数目</p></blockquote><h5 id="Scheduler："><a href="#Scheduler：" class="headerlink" title="Scheduler："></a>Scheduler：</h5><blockquote><p>负责接收任务，选择合适的节点进行分配任务</p></blockquote><h5 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h5><blockquote><p>键值存储服务，存储K8S集群所有重要信息（持久化）&#x3D;&#x3D;推荐使用V3版本&#x3D;&#x3D;</p><p>etcd V2版：数据保存在内存中</p><p>etcd V3版：数据保存到磁盘中，使用本地卷的持久化操作</p></blockquote><h5 id="Kubelet"><a href="#Kubelet" class="headerlink" title="Kubelet"></a>Kubelet</h5><blockquote><p>直接跟容器引擎交互实现容器的生命周期管理</p></blockquote><h5 id="Kube-Proxy"><a href="#Kube-Proxy" class="headerlink" title="Kube Proxy"></a>Kube Proxy</h5><blockquote><p>负责写入规则至IPTABLES、IPVS实现服务映射访问的</p></blockquote><h5 id="CoreDNS"><a href="#CoreDNS" class="headerlink" title="CoreDNS"></a>CoreDNS</h5><blockquote><p>可以为集群中的SVC创建一个域名IP的对应关系解析</p></blockquote><h5 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h5><blockquote><p>给K8S集群提供一个B&#x2F;S结构访问体系</p></blockquote><h5 id="Ingress-Controller"><a href="#Ingress-Controller" class="headerlink" title="Ingress Controller"></a>Ingress Controller</h5><blockquote><p>官方只能实现四层代理，Ingress可以实现七层代理</p></blockquote><h5 id="Federation"><a href="#Federation" class="headerlink" title="Federation"></a>Federation</h5><blockquote><p>提供一个可以跨集群中心&#x3D;&#x3D;多K8S统一管理&#x3D;&#x3D;功能</p></blockquote><h5 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h5><blockquote><p>提供K8S集群的&#x3D;&#x3D;监控&#x3D;&#x3D;能力</p></blockquote><h5 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h5><blockquote><p>提供K8S集群&#x3D;&#x3D;日志&#x3D;&#x3D;统一分析平台</p></blockquote><p><img src="E:\我的\学习文档\md-pic\image-20210823214336521.png" alt="image-20210823214336521"></p><h4 id="K8S的三个核心概念"><a href="#K8S的三个核心概念" class="headerlink" title="K8S的三个核心概念"></a>K8S的三个核心概念</h4><h5 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h5><blockquote><p>Pod是k8s中最小的部署单元，可以有一组容器的集合，一个Pod中的容器是共享网络的，生命周期是短暂的</p></blockquote><ul><li>自主式Pod</li><li>控制器管理的Pod</li></ul><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><blockquote><p>确保预期的pod的副本的数量</p><p>无状态的应用部署：</p><p>有状态的应用部署：</p><p>确保所有的node运行同一个Pod</p><p>一次性任务和定时任务</p></blockquote><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><blockquote><p>定义一组Pod的访问规则</p></blockquote><p>StatefulSet是为了解决有状态服务的问题。</p><p>DaemonSet确保全部或者一些Node上运行一个Pod副本。</p><p>Job负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或者多个Pod成功结束。</p><p>Cron Job管理基于时间的Job</p><h4 id="平台规划"><a href="#平台规划" class="headerlink" title="平台规划"></a>平台规划</h4><ul><li><p>单Master集群</p><pre><code class=" mermaid">graph TDMaster --- Node1 &amp; Node2 &amp; Node3</code></pre></li><li><p>多Master集群</p><pre><code class=" mermaid">graph TD Master1 &amp; Master2 &amp; Master3 --- 负载均衡 --- Node1 &amp; Node2 &amp; Node3</code></pre></li></ul><h4 id="服务器配置要求"><a href="#服务器配置要求" class="headerlink" title="服务器配置要求"></a>服务器配置要求</h4><blockquote><p>测试环境：</p><p>Master节点： 2核 4G 20G </p><p>Node 4核 8G 40G</p><p>生产环境：更高要求</p><p>Master：8核 16G 100G</p><p>Node: 16核 64G 500G</p></blockquote><h4 id="部署K8S集群的两种常见方式"><a href="#部署K8S集群的两种常见方式" class="headerlink" title="部署K8S集群的两种常见方式"></a>部署K8S集群的两种常见方式</h4><ul><li><p>kubeadm</p><blockquote><p>Kubeadm是一个K8S部署工具， 提供kubeadm init 和 kubeadm join，用于快速部署，技术门槛低，屏蔽了很多细节</p></blockquote></li><li><p>二进制包</p><blockquote><p>从github下载发行版的二进制包，手动部署每个组件，组成集群，利于排查问题，理解工作原理</p></blockquote></li></ul><h4 id="虚拟机中实战搭建K8S集群"><a href="#虚拟机中实战搭建K8S集群" class="headerlink" title="虚拟机中实战搭建K8S集群"></a>虚拟机中实战搭建K8S集群</h4><blockquote><p>虚拟机配置要求：Centos7 2GB 2CPU 30G</p><p>Master节点：1</p><p>Node节点：2</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kubernetes</tag>
      
      <tag>CloudNative</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo使用技巧</title>
    <link href="/2022/05/16/Middleware/Dubbo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/05/16/Middleware/Dubbo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="Dubbo使用技巧"><a href="#Dubbo使用技巧" class="headerlink" title="Dubbo使用技巧"></a>Dubbo使用技巧</h3><h4 id="1-只订阅不注册"><a href="#1-只订阅不注册" class="headerlink" title="1. 只订阅不注册"></a>1. 只订阅不注册</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 在开发过程中，避免互相影响</span><br><span class="hljs-attr">dubbo.registry.register</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">dubbo.registry.subscribe</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h4 id="2-直连提供者的方式"><a href="#2-直连提供者的方式" class="headerlink" title="2. 直连提供者的方式"></a>2. 直连提供者的方式</h4><ul><li><p>JVM启动参数中指定提供者的URL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -D com.alibaba.xxx.XxxService=dubbo://localhost:20890<br></code></pre></td></tr></table></figure></li><li><p>在reference调用位置指定提供者的URL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">debbo.reference</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;dubbo://localhost:20890&quot;</span> <span class="hljs-attr">interfaceClass</span>=<span class="hljs-string">&quot;com.alibaba.xxx.XxxService&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboReference(url=&quot;dubbo://localhost:20890&quot;)</span><br><span class="hljs-keyword">private</span> DubboDemoService demoService;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-指定group分组"><a href="#3-指定group分组" class="headerlink" title="3.指定group分组"></a>3.指定group分组</h4><blockquote><p>目的是隔离不同的环境，比如测试、开发、或者自己本地的环境</p><p>使用：分别在<code>&lt;dubbo:consumer/&gt;</code> 和<code>&lt;dubbo:provider/&gt;</code> 添加<code>group</code>属性并自定义组名</p></blockquote><h4 id="4-version"><a href="#4-version" class="headerlink" title="4. version"></a>4. version</h4><blockquote><p>当一个接口的实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 机器A提供1.0.0版本服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">“com.foo.BarService”</span> <span class="hljs-attr">version</span>=<span class="hljs-string">“1.0.0”</span> /&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 机器B提供2.0.0版本服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">“com.foo.BarService”</span> <span class="hljs-attr">version</span>=<span class="hljs-string">“2.0.0”</span> /&gt;</span><br>  <br><span class="hljs-comment">&lt;!-- 机器C消费1.0.0版本服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">“barService”</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">“com.foo.BarService”</span> <span class="hljs-attr">version</span>=<span class="hljs-string">“1.0.0”</span> /&gt;</span><br>  <br><span class="hljs-comment">&lt;!-- 机器D消费2.0.0版本服务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">“barService”</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">“com.foo.BarService”</span> <span class="hljs-attr">version</span>=<span class="hljs-string">“2.0.0”</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 消费者也可以消费任意版本的服务 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">“barService”</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">“com.foo.BarService”</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;*&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
      <tag>Middleware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HomeBrew使用与配置</title>
    <link href="/2022/05/16/%E5%B7%A5%E5%85%B7/HomeBrew%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/16/%E5%B7%A5%E5%85%B7/HomeBrew%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="HomeBrew使用与配置"><a href="#HomeBrew使用与配置" class="headerlink" title="HomeBrew使用与配置"></a>HomeBrew使用与配置</h2><h4 id="替换为清华源"><a href="#替换为清华源" class="headerlink" title="替换为清华源"></a><strong>替换为清华源</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><br><span class="hljs-comment"># 替换各个源</span><br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git<br><br><span class="hljs-comment"># zsh 替换 brew bintray 镜像</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc<br>$ <span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># bash 替换 brew bintray 镜像</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile<br>$ <span class="hljs-built_in">source</span> ~/.bash_profile<br><br><span class="hljs-comment"># 刷新源</span><br>$ brew update<br></code></pre></td></tr></table></figure><h4 id="替换为阿里源"><a href="#替换为阿里源" class="headerlink" title="替换为阿里源"></a><strong>替换为阿里源</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看 brew.git 当前源</span><br>$ <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> &amp;&amp; git remote -v<br>origin    https://github.com/Homebrew/brew.git (fetch)<br>origin    https://github.com/Homebrew/brew.git (push)<br><br><span class="hljs-comment"># 查看 homebrew-core.git 当前源</span><br>$ <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/core)</span>&quot;</span> &amp;&amp; git remote -v<br>origin    https://github.com/Homebrew/homebrew-core.git (fetch)<br>origin    https://github.com/Homebrew/homebrew-core.git (push)<br><br><span class="hljs-comment"># 修改 brew.git 为阿里源</span><br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<br><br><span class="hljs-comment"># 修改 homebrew-core.git 为阿里源</span><br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<br><br><span class="hljs-comment"># zsh 替换 brew bintray 镜像</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc<br>$ <span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># bash 替换 brew bintray 镜像</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile<br>$ <span class="hljs-built_in">source</span> ~/.bash_profile<br><br><span class="hljs-comment"># 刷新源</span><br>$ brew update<br></code></pre></td></tr></table></figure><h4 id="替换为中科大源"><a href="#替换为中科大源" class="headerlink" title="替换为中科大源"></a><strong>替换为中科大源</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 替换各个源</span><br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git<br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git<br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git<br><br><span class="hljs-comment"># zsh 替换 brew bintray 镜像</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc<br>$ <span class="hljs-built_in">source</span> ~/.zshrc<br><br><span class="hljs-comment"># bash 替换 brew bintray 镜像</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile<br>$ <span class="hljs-built_in">source</span> ~/.bash_profile<br><br><span class="hljs-comment"># 刷新源</span><br>$ brew update<br></code></pre></td></tr></table></figure><h4 id="重置为官方源"><a href="#重置为官方源" class="headerlink" title="重置为官方源"></a><strong>重置为官方源</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重置 brew.git 为官方源</span><br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew.git<br><br><span class="hljs-comment"># 重置 homebrew-core.git 为官方源</span><br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-core.git<br><br><span class="hljs-comment"># 重置 homebrew-cask.git 为官方源</span><br>$ git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/homebrew-cask<br><br><span class="hljs-comment"># zsh 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置</span><br>$ vi ~/.zshrc<br><span class="hljs-comment"># export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx</span><br><br><span class="hljs-comment"># bash 注释掉 HOMEBREW_BOTTLE_DOMAIN 配置</span><br>$ vi ~/.bash_profile<br><span class="hljs-comment"># export HOMEBREW_BOTTLE_DOMAIN=xxxxxxxxx</span><br><br><span class="hljs-comment"># 刷新源</span><br>$ brew update<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>HomeBrew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven使用与配置</title>
    <link href="/2022/05/16/%E5%B7%A5%E5%85%B7/Maven%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/16/%E5%B7%A5%E5%85%B7/Maven%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="Maven使用与配置"><a href="#Maven使用与配置" class="headerlink" title="Maven使用与配置"></a>Maven使用与配置</h3><h4 id="settings-xml文件位置"><a href="#settings-xml文件位置" class="headerlink" title="settings.xml文件位置"></a>settings.xml文件位置</h4><p>settings.xml文件一般存在于两个位置：<br>全局配置: ${M2_HOME}&#x2F;conf&#x2F;settings.xml<br>用户配置: user.home&#x2F;.m2&#x2F;settings.xmlnote：用户配置优先于全局配置。</p><h4 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h4><p>需要注意的是：<strong>局部配置优先于全局配置</strong>。<br>配置优先级从高到低：pom.xml&gt; user settings &gt; global settings<br>如果这些文件同时存在，在应用配置时，会合并它们的内容，如果有重复的配置，优先级高的配置会覆盖优先级低的。</p><h4 id="镜像与仓库"><a href="#镜像与仓库" class="headerlink" title="镜像与仓库"></a>镜像与仓库</h4><h5 id="镜像与仓库的区别？"><a href="#镜像与仓库的区别？" class="headerlink" title="镜像与仓库的区别？"></a>镜像与仓库的区别？</h5><blockquote><p>镜像相当于一个拦截器，mirror表示的是两个Repository之间的镜像关系</p><p><code>&lt;mirrorOf&gt;&lt;/mirrorOf&gt;</code>标签里面放置的是要被镜像的Repository ID</p></blockquote><pre><code class=" mermaid">graph LRA[客户端]--&gt;C&#123;是否配置镜像&#125;C --&gt;|是| D[远程仓库的镜像仓库]C -.-&gt;|否| E[远程仓库]</code></pre><h4 id="remote-repositories和lastUpdated"><a href="#remote-repositories和lastUpdated" class="headerlink" title="remote.repositories和lastUpdated"></a>remote.repositories和lastUpdated</h4><blockquote><p>_remote.repositories可以理解为该jar包的来源明细</p><p>lastUpdated可以理解为错误文件</p><p>假设我们更换了私服地址为nexus-abc,并且<strong>该私服不存在该资源</strong>,那么就会<strong>生成</strong>logback-parent-1.1.1.pom**.lastUpdated<strong>文件;<br>也就是说,_remote.repositories文件，标示该资源的来源，如果你有这个_remote.repositories，</strong>那就会在访问本地的同时，必须确保远程上有才行**(这里的远程是setting文件中配置的镜像或远程仓库,用id来进行关联)，否则就会报错;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Swarm</title>
    <link href="/2022/05/16/CloudNative/Docker/Docker%20Swarm/"/>
    <url>/2022/05/16/CloudNative/Docker/Docker%20Swarm/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化节点</span><br>docker swarm init<br><span class="hljs-meta prompt_">#</span><span class="language-bash">加入一个节点</span><br>docker swarm join<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在主节点执行如下命令获取令牌，得到一个命令，在需要加入集群的集群上执行此命令</span><br>docker swarm join-token manager<br>docker swarm join-token worker<br></code></pre></td></tr></table></figure><h4 id="Raft协议"><a href="#Raft协议" class="headerlink" title="Raft协议"></a>Raft协议</h4><h4 id="灰度发布、动态扩缩容"><a href="#灰度发布、动态扩缩容" class="headerlink" title="灰度发布、动态扩缩容"></a>灰度发布、动态扩缩容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run #容器启动，不具有扩缩容功能<br>docker service #启动服务，具有扩缩容功能<br>docker service ls #查询服务<br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩缩容命令</span><br>docker service update --replicas 10 服务名<br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩缩容命令</span><br>docker service scale 服务名=num<br><span class="hljs-meta prompt_">#</span><span class="language-bash">移除命令</span><br>docker service rm 服务名<br></code></pre></td></tr></table></figure><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>swarm</strong></p><blockquote><p>集群的管理和编号。docker可以初始化一个swarm集群，其他节点可以加入。（管理者和工作者）</p></blockquote><p><strong>Node</strong></p><blockquote><p>就是docker的一个节点</p></blockquote><p><strong>Service</strong></p><blockquote><p>任务，可以在管理节点或者工作节点来运行。</p></blockquote><p><strong>Task</strong></p><blockquote><p>容器内的命令，细节任务。</p></blockquote><p><strong>逻辑</strong></p><blockquote><p>命令-&gt;管理-&gt;api-&gt;调度-&gt;工作节点（创建Task容器维护创建！）</p></blockquote><h4 id="Swarm网络"><a href="#Swarm网络" class="headerlink" title="Swarm网络"></a>Swarm网络</h4><blockquote><p>网络模式</p><ul><li><p>Overlay:</p></li><li><p>ingress：特殊的Overlay网络！具有负载均衡的功能！IPVS VIP技术</p></li></ul><p>虽然docker在不同的服务器上运行，实际网络却是同一个！使用的是ingress网络模式，ingress网络是一个特殊的Overlay网络！</p></blockquote><h4 id="Docker-Stack"><a href="#Docker-Stack" class="headerlink" title="Docker Stack"></a>Docker Stack</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">单机下用docker-compose</span><br>docker-compose up -d xxx.yaml<br><span class="hljs-meta prompt_"># </span><span class="language-bash">集群下用docker stack</span><br>docker stack deploy xxx.yaml<br></code></pre></td></tr></table></figure><h4 id="K8S"><a href="#K8S" class="headerlink" title="K8S"></a>K8S</h4><p>&#x3D;&#x3D;云原生时代&#x3D;&#x3D;</p><p>&#x3D;&#x3D;Go语言&#x3D;&#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker基本操作</title>
    <link href="/2022/05/16/CloudNative/Docker/Docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/05/16/CloudNative/Docker/Docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker version <br>docker info  # 显示docker的系统信息，包括容器和镜像的数量<br>docker 命令 --help<br><br></code></pre></td></tr></table></figure><h4 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images #查看本机所有的镜像<br>-a <br>-q  #只显示镜像id<br><br>docker search<br></code></pre></td></tr></table></figure><h5 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名称:[TAG]<br></code></pre></td></tr></table></figure><h4 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h4><p>相当于数据挂载，将Docker中的数据同步到本地</p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it -v 主机目录:容器内目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看容器信息</span></span><br>docker inspect 容器id<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 查看正在运行的容器</span></span><br>docker ps <br></code></pre></td></tr></table></figure><h4 id="实战：MySQL数据持久化"><a href="#实战：MySQL数据持久化" class="headerlink" title="实战：MySQL数据持久化"></a>实战：MySQL数据持久化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取镜像</span><br>docker pull mysql:5.7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动命令参数</span><br>-d 后台运行<br>-p 端口映射<br>-v 卷挂载<br>-e 环境配置<br>--name 容器名字<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行容器并挂载</span><br>docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7<br></code></pre></td></tr></table></figure><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [参数] image<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明</span><br>--name = &quot;容器名字&quot;<br>-d   后台启动<br>-p 指定容器端口 主机端口:容器端口<br>-it 使用交互方式运行，进入容器查看内容<br><br>docker ps 查看当前正在运行的容器<br>-a 带出历史运行过的容器<br>-n=? 指定显示的数量<br>-q 显示容器的编号<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">退出容器</span><br>exit 直接退出并停止容器<br>Ctrl + P +Q 退出不停止容器<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除容器</span><br>docker rm 容器id<br>docker rm -f $(docker ps -aq) 删除所有容器<br>docker ps -a -q | xargs docker rm  删除所有容器<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动和停止</span><br>docker start 容器id<br>docker restart 容器id<br>docker stop 容器id<br>docker kill 容器id<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">后台启动容器</span><br>docker run -d centos # 通过-d的方式启动，发现centos停止了；docker容器使用后台运行，就必须要有一个前台进程，就会自动停止<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示日志</span><br>docker logs -f -t --tail 10 容器id<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器中进程信息</span><br>docker top 容器id<br><br>docker inspect 容器id<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入正在运行的容器</span><br>docker exec -it 容器id /bin/bash  #进入容器并开启一个新的终端<br>docker attach 进入容器并  # 进入容器当前正在运行的终端<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">容器内文件拷贝到主机</span><br>docker cp 容器id:/home/test.java /home/<br><br></code></pre></td></tr></table></figure><h4 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM# 基础镜像，一切从这里开始，99%的镜像都是从scratch来的<br>MAINTAINER# 镜像是谁写的，姓名+邮箱<br>RUN# 镜像构建的时候需要运行的命令 <br>ADD # 步骤： Tomcat镜像，这个Tomcat压缩包！添加内容<br>WORKDIR# 镜像的工作目录<br>VOLUME # 挂载的目录<br>EXPOSE# 保留端口配置<br>CMD# 指定容器启动的时候要运行的命令，只有最后一个会生效，可以被替代<br>ENTRYPOINT# 指定这个容器启动的时候要运行的命令，可以追加命令<br>ONBUILD# 当构建一个被继承DockerFile这个时候就会运行ONBIULD的指令。触发指令<br>COPY# 类似ADD， 将我们文件拷贝到镜像中<br>ENV# 构建的时候设置环境变量！<br></code></pre></td></tr></table></figure><h4 id="Dockerfile构建自己的镜像"><a href="#Dockerfile构建自己的镜像" class="headerlink" title="Dockerfile构建自己的镜像"></a>Dockerfile构建自己的镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.编写Dockerfile文件</span><br>FROM centos<br>MAINTAINER unclebryan&lt;unclebryan719@gmail.com&gt;<br><br>ENV MYPATH /usr/local<br>WORKDIR $MYPATH<br><br>RUN yum -y install vim<br>RUN yum -y install net-tools<br><br>EXPOSE 80<br><br>CMD echo $MYPATH<br>CMD echo &quot;----end----&quot;<br>CMD /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 通过文件构建镜像</span><br>docker build -f dockerfile文件路径 -t 镜像名:[tag]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">3. 运行</span><br>docker run -it --name &quot;mycentos&quot; 镜像名称:[TAG]<br></code></pre></td></tr></table></figure><h4 id="Docker-root权限"><a href="#Docker-root权限" class="headerlink" title="Docker root权限"></a>Docker root权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行容器时加上如下命令</span><br>--privileged=<span class="hljs-literal">true</span><br><span class="hljs-comment"># 进入容器时如下</span><br>docker <span class="hljs-built_in">exec</span> -it -u root &lt;container_id&gt; /bin/bash<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Command</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Compose</title>
    <link href="/2022/05/16/CloudNative/Docker/Docker%20Compose/"/>
    <url>/2022/05/16/CloudNative/Docker/Docker%20Compose/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>容器编排，管理容器</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>1、下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">国内镜像</span><br>curl -L https://get.daocloud.io/docker/compose/releases/download/1.28.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>2、授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>3、检查安装是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose version<br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1、准备应用，例如，xxx.jar</p><p>2、Dockerfile应用打包为镜像</p><p>3、Docker-compose yaml文件（定义整个服务，需要的环境）完整的上线服务！</p><p>4、启动compose项目（docker-compose up）</p><p>5、停止docker-compose down</p><h4 id="Docker-Yaml规则"><a href="#Docker-Yaml规则" class="headerlink" title="Docker Yaml规则"></a>Docker Yaml规则</h4><p>docker-compose.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 3层</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#版本</span><br><span class="hljs-attr">services:</span> <span class="hljs-comment">#服务</span><br><span class="hljs-attr">service1:</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br><span class="hljs-attr">container_name:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">ports:</span> <br><span class="hljs-attr">service2:</span> <span class="hljs-string">xxx</span><br><span class="hljs-comment"># 其他配置</span><br><span class="hljs-attr">volumes:</span> <br></code></pre></td></tr></table></figure><h4 id="一键搭建博客"><a href="#一键搭建博客" class="headerlink" title="一键搭建博客"></a>一键搭建博客</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up #前台启动<br>docker-compose -d up # 后台启动<br>docker-compose up --build # 重新构建<br></code></pre></td></tr></table></figure><p>1、创建一个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir my_wordpress<br></code></pre></td></tr></table></figure><p>2、进入文件夹并创建docker-compose.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd my_wordpress<br>vim docker-compose.yml<br></code></pre></td></tr></table></figure><p>3、docker-compose内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.9&quot;</span><br>    <br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db_data:/var/lib/mysql</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">somewordpress</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">wordpress</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">wordpress</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">wordpress</span><br>    <br>  <span class="hljs-attr">wordpress:</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wordpress:latest</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wordpress_data:/var/www/html</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:80&quot;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">WORDPRESS_DB_HOST:</span> <span class="hljs-string">db:3306</span><br>      <span class="hljs-attr">WORDPRESS_DB_USER:</span> <span class="hljs-string">wordpress</span><br>      <span class="hljs-attr">WORDPRESS_DB_PASSWORD:</span> <span class="hljs-string">wordpress</span><br>      <span class="hljs-attr">WORDPRESS_DB_NAME:</span> <span class="hljs-string">wordpress</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">db_data:</span> &#123;&#125;<br>  <span class="hljs-attr">wordpress_data:</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>4、创建并启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装docker</title>
    <link href="/2022/05/16/CloudNative/Docker/%E5%AE%89%E8%A3%85docker/"/>
    <url>/2022/05/16/CloudNative/Docker/%E5%AE%89%E8%A3%85docker/</url>
    
    <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ol><li>卸载旧版本docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum remove docker \</span><br><span class="language-bash">                 docker-client \</span><br><span class="language-bash">                 docker-client-latest \</span><br><span class="language-bash">                 docker-common \</span><br><span class="language-bash">                 docker-latest \</span><br><span class="language-bash">                 docker-latest-logrotate \</span><br><span class="language-bash">                 docker-logrotate \</span><br><span class="language-bash">                 docker-engine</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>设置仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install -y yum-utils</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \</span><br><span class="language-bash">    --add-repo \</span><br><span class="language-bash">    https://download.docker.com/linux/centos/docker-ce.repo</span><br> 建议换成阿里云仓库<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \</span><br><span class="language-bash">    --add-repo \</span><br><span class="language-bash">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><br></code></pre></td></tr></table></figure></li><li><p>更新软件包索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum makecache fast</span><br></code></pre></td></tr></table></figure></li><li><p>安装docker引擎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></code></pre></td></tr></table></figure></li><li><p>启动docker服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl start docker</span><br></code></pre></td></tr></table></figure></li><li><p>检查docker服务是否启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker version</span><br></code></pre></td></tr></table></figure></li><li><p>运行hello world</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker run hello-world</span><br></code></pre></td></tr></table></figure></li><li><p>查看镜像列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker images</span><br></code></pre></td></tr></table></figure></li><li><p>卸载docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> -rf /var/lib/containerd</span><br></code></pre></td></tr></table></figure></li><li><p>配置阿里云镜像加速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://99ogs5av.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CloudNative</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker网络</title>
    <link href="/2022/05/16/CloudNative/Docker/Docker%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/05/16/CloudNative/Docker/Docker%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h4><h5 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">bridge: 桥接 docker默认<br>none： 不配置网络<br>host: 和宿主机共享网络<br>container: 容器网络连通 （局限性大）<br></code></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -P --name tomcat01 (缺省--net bridge) tomcat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">bridge相当于docker0， 默认，域名不能访问，可以通过--<span class="hljs-built_in">link</span>打通！使用比较麻烦</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自定义网络</span><br>docker network create --driver bridge --subnet 192.168.0.0/16 --gateway  192.168.0.1 mynet<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网络</span><br>docker network ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用自己创建的网络启动容器</span><br>docker run -d -P --name tomcat01 --net mynet tomcat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker自定义网络可以通过域名ping通，不需要使用--<span class="hljs-built_in">link</span></span><br></code></pre></td></tr></table></figure><h5 id="docker网络连通"><a href="#docker网络连通" class="headerlink" title="docker网络连通"></a>docker网络连通</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">不同集群之间用不同的网络，不同的网段 例如redis集群和mysql集群</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">网卡与网卡是无法打通，但是网卡和容器是可以打通</span><br>docker network connect 网络名 容器名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/16/DB/MYSQL%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/16/DB/MYSQL%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="MYSQL优化笔记"><a href="#MYSQL优化笔记" class="headerlink" title="MYSQL优化笔记"></a>MYSQL优化笔记</h3><p>mysql8去掉了缓存，因为命中率太低了</p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><blockquote><p>“Using filesort”，代表查询中有排序操作;</p></blockquote><blockquote><p>mysql5.7 group by 存在索引隐式排序，输出结果是排好序的</p></blockquote><p><img src="E:\我的\学习文档\md-pic\image-20210913164350650.png" alt="image-20210913164350650"></p><blockquote><p>mysql8 去掉了索引隐式排序，输出结果不是排好序的</p></blockquote><p><img src="E:\我的\学习文档\md-pic\image-20210913164524289.png" alt="image-20210913164524289"></p><p><img src="E:\我的\学习文档\md-pic\v2-0deb7c3dff1051fee85baf6daa4bd219_r.jpg" alt="preview"></p><h4 id="开启慢sql日志"><a href="#开启慢sql日志" class="headerlink" title="开启慢sql日志"></a>开启慢sql日志</h4><h4 id="in是否走索引"><a href="#in是否走索引" class="headerlink" title="in是否走索引"></a>in是否走索引</h4><p><img src="E:\我的\学习文档\md-pic\72e166eb2f36e62147102324737713ae.png" alt="Mysql中in到底走不走索引？"></p><blockquote><p>in通常是走索引的，当in后面的数据在数据表中超过30%（上面的例子的匹配数据大约6000&#x2F;16000 &#x3D; 37.5%）的匹配时，会走全表扫描，即不走索引，因此in走不走索引和后面的数据有关系。</p></blockquote><h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">abc组成复合索引<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> myTest <span class="hljs-keyword">where</span> a<span class="hljs-operator">=</span><span class="hljs-number">3</span> <span class="hljs-keyword">and</span> b<span class="hljs-operator">&gt;</span><span class="hljs-number">7</span> <span class="hljs-keyword">and</span> c<span class="hljs-operator">=</span><span class="hljs-number">3</span>;   b范围值，断点，阻塞了c的索引<br>a用到了，b也用到了，c没有用到，这个地方b是范围值，也算断点，只不过自身用到了索引<br></code></pre></td></tr></table></figure><h4 id="关于Filtered思考"><a href="#关于Filtered思考" class="headerlink" title="关于Filtered思考"></a>关于Filtered思考</h4><blockquote><p>猜一下下面两个执行计划，哪个执行的速度快</p></blockquote><p><img src="E:\我的\学习文档\md-pic\github代理设置" alt="image-20210915105648825"></p><p><img src="E:\我的\学习文档\md-pic\image-20210915105716719.png" alt="image-20210915105716719"></p><h4 id="sql执行过程"><a href="#sql执行过程" class="headerlink" title="sql执行过程"></a>sql执行过程</h4><p><img src="E:\我的\学习文档\md-pic\image-20210917124742511.png" alt="image-20210917124742511"></p><p><img src="E:\我的\学习文档\md-pic\image-20210917131933892.png" alt="image-20210917131933892"></p><p><img src="E:\我的\学习文档\md-pic\image-20210917132055995.png" alt="image-20210917132055995"></p><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><blockquote><p>MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p>需求：检索出表中“名字第一个字是张，而且年龄是10岁的所有男孩”;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tuser <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;张%&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">and</span> ismale<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></blockquote><ul><li><p>无索引下推的执行过程</p><p><img src="E:\我的\学习文档\md-pic\1202638-20190902232835378-374770770.png" alt="img"></p></li><li><p>有索引下推的执行过程</p><p><img src="E:\我的\学习文档\md-pic\1202638-20190902233108725-1148703041.png" alt="img"></p></li></ul><h4 id="普通索引与唯一索引"><a href="#普通索引与唯一索引" class="headerlink" title="普通索引与唯一索引"></a>普通索引与唯一索引</h4><ul><li><p>针对查询来说，普通索引与唯一索引的性能差距微乎其微，可以忽略不计</p></li><li><p>对于更新操作来说，如果要更新的数据不在内存中</p><ul><li>普通索引的操作是直接更新记录在change buffer中，语句执行结束</li><li>唯一索引的操作是&#x3D;&#x3D;需要将数据页读入到内存(所以说唯一索引是用不到change buffer的)，判断是否有冲突&#x3D;&#x3D;，插入值，语句执行结束</li></ul><blockquote><p>假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在change buffer，但之后由于马上要访问这个数据页，会立即触发merge过程。这样随机访问IO的次数不会减少，反而增加了change buffer的维护代价。所以，对于这种业务模式来说，change buffer反而起到了副作用</p></blockquote></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询事务隔离级别<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;transaction_isolation&#x27;</span>;<br># 查询binlog文件列表<br><span class="hljs-keyword">show</span> <span class="hljs-type">binary</span> logs;<br># 查询当前正在使用的binlog文件<br><span class="hljs-keyword">show</span> master status;<br># 查询binlog文件内容<br><span class="hljs-keyword">show</span> binlog events <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;binlog_name&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h4><p><img src="E:\我的\学习文档\md-pic\image-20210920103933336.png" alt="image-20210920103933336"></p><h4 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h4><p><img src="E:\我的\学习文档\md-pic\image-20210920133348526.png" alt="image-20210920133348526"></p><h5 id="一主一从"><a href="#一主一从" class="headerlink" title="一主一从"></a>一主一从</h5><blockquote><p>从节点做热备，当主节点挂掉后，从节点升级为新的主节点；&#x3D;&#x3D;一主一从并不是为了提高性能，而是为了保证服务的高可用&#x3D;&#x3D;</p></blockquote><h5 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h5><blockquote><p>通常一个主节点，2到4个从节点，过多的从节点会给数据同步带来压力，导致性能下降；</p><p>如果是4个从节点，3个从节点作为数据同步，1个从节点专门用来处理耗时较长的查询或者专门用于开发人员处理线上问题</p></blockquote><h4 id="MYISAM"><a href="#MYISAM" class="headerlink" title="MYISAM"></a>MYISAM</h4><blockquote><p>.myi 存储索引</p><p>.myd 存储数据</p><p>.frm 存储表结构数据</p><p>MYISAM数据与索引分开存储，查询的时候先根据索引查询数据文件地址，再根据地址去获取相应数据</p></blockquote><h4 id="INNODB"><a href="#INNODB" class="headerlink" title="INNODB"></a>INNODB</h4><blockquote><p>.ibd 存储索引和数据</p><p>.frm 存储表结构数据</p></blockquote><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p><img src="E:\我的\学习文档\md-pic\image-20210920225014283.png" alt="image-20210920225014283"></p><p>&#x3D;&#x3D;主从复制的过程中，最耗时的操作就是SQL Thread向数据库中写的过程，因为是随机IO；其他的过程都是顺序IO；为了解决随机IO的问题，mysql使用的是MTS，并制定了规则来保证数据的原子性&#x3D;&#x3D;</p><blockquote><p>MTS(multi-thread slave)</p><p>规则：</p><ol><li>更新同一行的多个事务，必须要分发到同一个worker中执行</li><li>同一个事务不能被拆开执行，必须放在同一个worker中执行</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 从库<span class="hljs-keyword">SQL</span>线程并行执行的粒度<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%paralle%&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------+----------+</span><br><span class="hljs-operator">|</span> Variable_name                <span class="hljs-operator">|</span> <span class="hljs-keyword">Value</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------+----------+</span><br><span class="hljs-operator">|</span> innodb_parallel_read_threads <span class="hljs-operator">|</span> <span class="hljs-number">4</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> slave_parallel_type          <span class="hljs-operator">|</span> DATABASE <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> slave_parallel_workers       <span class="hljs-operator">|</span> <span class="hljs-number">0</span>        <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------+----------+</span><br><br># 设置线程个数<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> slave_parallel_workers <span class="hljs-operator">=</span><span class="hljs-number">4</span>;<br><br># 设置并行执行粒度，database：库级别或者logical_check：行级别<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> slave_parallel_type<span class="hljs-operator">=</span><span class="hljs-string">&#x27;logical_check&#x27;</span>;<br><br># 开启slave<br><span class="hljs-keyword">start</span> slave<br># 查看线程数<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">full</span> processlist;<br></code></pre></td></tr></table></figure><ul><li>GTID 全局事务id</li></ul><h4 id="组提交"><a href="#组提交" class="headerlink" title="组提交"></a>组提交</h4><blockquote><p>组提交（group commit）是mysql处理日志的一种优化方式，主要为了解决写日志时频繁刷磁盘的问题。目前已经支持bin log和redo log 的组提交</p></blockquote><p>RC解决脏读问题，是当前读</p><p>RR解决不可重复读，是快照读</p><ul><li>当前读：读取的是最新数据</li><li>快照读：读取的是历史数据</li></ul><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><ul><li>readview：当进行快照读的时候会生成一个事务id的列表，来保存不同的信息，通过这些信息来做可见性判断<ul><li>list: 生成readview的时候活跃的id</li><li>up_limit_id: 当前活跃id的最小值</li><li>lower_limit_id：尚未分配的下一个事务id</li></ul></li></ul><p>RC：每次快照读的时候生成新的read view</p><p>RR：第一次生成快照读的时候生成read view，后续不会变<img src="E:\我的\学习文档\md-pic\image-20210921003456750.png" alt="image-20210921003456750"></p><p>历史版本保存在undolog中</p><p>Innodb存储引擎每次在进行数据插入的时候，数据必须要跟某一个索引列绑定在一起，这个索引列选择的顺序：主键-&gt;唯一键-&gt;自动生成一个6字节的rowid</p><p>脏读：一个事务读取到了另一个事务没有提交的数据</p><p>幻读：如果所有的读取都是快照读，那么不会产生幻读问题，如果有快照读也有当前读才会产生幻读问题。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p>BST(Binary Search Trees) 二叉搜索树</p><ul><li>左右子树高度差没有限制，当插入递增数据时，数据结构变成了链表，搜索效率低</li></ul></li><li><p>AVL Trees(Balanced binary search trees) 平衡二叉搜索树</p><ul><li>左右子树高度差不能大于一</li><li>当左右子树高度差大于一时，会进行数据旋转（为了提升查询性能，造成数据插入性能下降）</li></ul></li><li><p>Red-Black Trees 红黑树</p><ul><li>最长子树不能超过最短子树的两倍，对查询与插入性能做了一个平衡</li></ul></li><li><p>B Tree</p><p><img src="E:\我的\学习文档\md-pic\b-trees.png" alt="image-20210924105433583"></p></li><li><p>B+ Tree</p><p><img src="E:\我的\学习文档\md-pic\b+trees.png" alt="image-20210924105213979"></p></li></ul><h4 id="B树与B-树的区别"><a href="#B树与B-树的区别" class="headerlink" title="B树与B+树的区别"></a>B树与B+树的区别</h4><blockquote><ol><li>B+树叶子节点会将所有非叶子节点的树进行冗余，在mysql将所有的数据存储在叶子节点，非叶子节点只存索引</li><li></li></ol></blockquote><h4 id="页分裂与页合并"><a href="#页分裂与页合并" class="headerlink" title="页分裂与页合并"></a>页分裂与页合并</h4><blockquote><p>主键索引用自增的好处是减少页分裂与页合并</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis开启日志输出</title>
    <link href="/2022/05/16/%E8%BF%90%E7%BB%B4/mybatis/Mybatis%E5%BC%80%E5%90%AFSQL%E8%BE%93%E5%87%BA/"/>
    <url>/2022/05/16/%E8%BF%90%E7%BB%B4/mybatis/Mybatis%E5%BC%80%E5%90%AFSQL%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="Mybatis开启日志输出"><a href="#Mybatis开启日志输出" class="headerlink" title="Mybatis开启日志输出"></a>Mybatis开启日志输出</h3><h4 id="开启sql输出"><a href="#开启sql输出" class="headerlink" title="开启sql输出"></a>开启sql输出</h4><p>方案1：</p><ul><li><p>将ibatis log4j运行级别调到DEBUG可以在控制台打印出ibatis运行的sql语句</p></li><li><p>添加如下语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">###显示SQL语句部分</span><br>log4j.logger.com.ibatis=DEBUG<br>log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG<br>log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG<br>log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG<br>log4j.logger.Java.sql.Connection=DEBUG<br>log4j.logger.java.sql.Statement=DEBUG<br>log4j.logger.java.sql.PreparedStatement=DEBUG　<br></code></pre></td></tr></table></figure></li></ul><p>方案2：在mybatis.config.xml中增加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD SQL Map Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在SpringBoot中，修改application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis:</span><br><span class="hljs-attr">configuration:</span><br><span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Middleware</tag>
      
      <tag>Config</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qos-server can not bind localhost:22222</title>
    <link href="/2022/05/16/bug/qos/"/>
    <url>/2022/05/16/bug/qos/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">2022-04-13 15:59:47 ERROR com.alibaba.dubbo.qos.server.Server:102 [main] []  [DUBBO] qos-server can not <span class="hljs-built_in">bind</span> localhost:22222, dubbo version: 2.6.7, current host: 10.60.194.29<br>java.net.BindException: Address already <span class="hljs-keyword">in</span> use<br>at java.base/sun.nio.ch.Net.bind0(Native Method)<br>at java.base/sun.nio.ch.Net.<span class="hljs-built_in">bind</span>(Net.java:455)<br>at java.base/sun.nio.ch.Net.<span class="hljs-built_in">bind</span>(Net.java:447)<br>at java.base/sun.nio.ch.ServerSocketChannelImpl.<span class="hljs-built_in">bind</span>(ServerSocketChannelImpl.java:227)<br>at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:130)<br>at io.netty.channel.AbstractChannel<span class="hljs-variable">$AbstractUnsafe</span>.<span class="hljs-built_in">bind</span>(AbstractChannel.java:562)<br>at io.netty.channel.DefaultChannelPipeline<span class="hljs-variable">$HeadContext</span>.<span class="hljs-built_in">bind</span>(DefaultChannelPipeline.java:1358)<br>at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:501)<br>at io.netty.channel.AbstractChannelHandlerContext.<span class="hljs-built_in">bind</span>(AbstractChannelHandlerContext.java:486)<br>at io.netty.channel.DefaultChannelPipeline.<span class="hljs-built_in">bind</span>(DefaultChannelPipeline.java:1019)<br>at io.netty.channel.AbstractChannel.<span class="hljs-built_in">bind</span>(AbstractChannel.java:258)<br>at io.netty.bootstrap.AbstractBootstrap<span class="hljs-variable">$2</span>.run(AbstractBootstrap.java:366)<br>at io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$<span class="hljs-variable">$capture</span>(AbstractEventExecutor.java:163)<br>at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java)<br>at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)<br>at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)<br>at io.netty.util.concurrent.SingleThreadEventExecutor<span class="hljs-variable">$5</span>.run(SingleThreadEventExecutor.java:909)<br>at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)<br>at java.base/java.lang.Thread.run(Thread.java:829)<br></code></pre></td></tr></table></figure><h5 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h5><p>Quality of Service，qos是Dubbo的在线运维命令，可以对服务进行动态的配置、控制及查询</p><h5 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h5><p>consumer启动时qos-server也是使用的默认的22222端口，但是这时候端口已经被provider给占用了，所以才会报错的。</p><h5 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h5><p>配置consumer的qos</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dubbo.application.qos.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">dubbo.application.qos.port</span>=<span class="hljs-string">33333</span><br><span class="hljs-attr">dubbo.application.qos.accept.foreign.ip</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
      <tag>Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty学习笔记</title>
    <link href="/2022/05/16/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/Netty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/16/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD/Netty%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Netty学习笔记"><a href="#Netty学习笔记" class="headerlink" title="Netty学习笔记"></a>Netty学习笔记</h2><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><blockquote><p> (non-blocking io非阻塞IO)，面向缓冲区的编程</p></blockquote><h4 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h4><blockquote><p>Channel 网络通道，会注册到Selector中，是双向的，可以同时进行读写</p><ul><li>FileChannel ：文件的读写</li><li>DatagramChannel：UDP数据的读写</li><li>SocketChannel ：TCP网络数据读写</li><li>ServerSocketChannel  ：TCP网络数据读写</li></ul><p> Buffer 缓冲区，底层通过数组实现，是双向的流，需要通过flip切换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Buffer常用属性与方法</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 标记</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 读写数据的当前位置</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> limit; <span class="hljs-comment">// 要读取数据的位置上限，默认与capacity相等;读取的数据是[position,limit)左闭右开</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity; <span class="hljs-comment">// 缓冲区的容量</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 数据读与写的切换</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> Buffer <span class="hljs-title function_">flip</span><span class="hljs-params">()</span> &#123;<br>  limit = position;<br>  position = <span class="hljs-number">0</span>;<br>  mark = -<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Selector 选择器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//常用方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">long</span> <span class="hljs-title function_">read</span><span class="hljs-params">(ByteBuffer[] dsts, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> length)</span><br>  <span class="hljs-keyword">throws</span> IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">long</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ByteBuffer[] srcs, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> length)</span><br>  <span class="hljs-keyword">throws</span> IOException;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 将数据从当前通道拷贝到目标通道</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">long</span> <span class="hljs-title function_">transferTo</span><span class="hljs-params">(<span class="hljs-type">long</span> position, <span class="hljs-type">long</span> count,</span><br><span class="hljs-params">                                WritableByteChannel target)</span><br>  <span class="hljs-keyword">throws</span> IOException;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 将数据从目标通道拷贝到通道</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">long</span> <span class="hljs-title function_">transferFrom</span><span class="hljs-params">(ReadableByteChannel src,</span><br><span class="hljs-params">                                  <span class="hljs-type">long</span> position, <span class="hljs-type">long</span> count)</span><br>  <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="/2022/05/16/%E6%A1%86%E6%9E%B6/SpringBoot/"/>
    <url>/2022/05/16/%E6%A1%86%E6%9E%B6/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><p>项目中引入依赖可以从父工程<code>spring-boot-starter-parent</code>继承，无需指定版本号，如果需要覆盖父工程中的版本，只需在当前工程的properties重写父工程的版本号即可（就近优先原则），比如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 修改springboot父工程mysql版本号<br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.43<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>自动配置</p></li><li><p>默认包结构</p><ul><li><p>主程序所在包同级极其所有子包都会加载到IOC容器内，无需配置包扫描</p></li><li><p>如果想要改变扫描路径，需要使用<code>@SpringBootApplication(scanBasePackages=&quot;com.xxx&quot;)</code>或者使用<code>@ComponentScan</code>指定扫描路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>等同于<br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>各种配置都有默认值</p><ul><li>配置最终都是映射到对应的java类上</li><li>按需加载自动配置</li><li>springboot所有的自动配置功能都在spring-boot-autoconfigure包</li></ul></li></ul><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ol><li><p>@Configuration标识这个类是一个配置类</p><ul><li>Full模式：<code>proxyBeanMethods = true</code>表示创建的配置类为代理对象，springboot总会检查容器中是否有配置类中的组件，能够解决依赖问题</li><li>Lite模式：<code>proxyBeanMethods = false</code>表示创建的配置类的类型为配置类本身，而不是配置类的代理类，当明确配置类中的组件不存在依赖关系可以使用Lite模式，减少检查组件是否在容器中的性能开销，从而加快springboot启动的速度</li></ul></li><li><p>@Bean 创建一个组件</p></li><li><p>@Import导入组件</p><ul><li>向容器中导入组件，组件的名字默认为全类名<code>@Import(&#123;User.class,Pet.class&#125;)</code>接受一个数组</li></ul></li><li><p><code>@Conditional</code> 条件装配：满足Conditional指定的条件，则进行组件注入</p><ul><li>@ConditionalOnBean 可以加在方法和类上</li><li>@ConditionalOnMissingBean 可以加在方法和类上</li></ul></li><li><p>@ImportResource作用是将配置文件作为一个资源导入到容器中</p><ul><li><code>@ImportResource(&quot;classpath:beans.xml&quot;)</code></li></ul></li></ol><h4 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h4><p>方式一：<code>@Component+@ConfigurationProperties(prefix = &quot;前缀&quot;)</code>将配置文件中的值与对象实例绑定  </p><p>方式二：<code>@EnableConfigurationProperties(xxx.class)+@ConfigurationProperties(prefix = &quot;前缀&quot;)</code>，xxx表示要开启配置绑定的类</p><h4 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h4><ul><li><p>@SpringBootConfiguration 相当于@Configuration，是一个配置类</p></li><li><p>@EnableAutoConfiguration</p><ul><li><p>@AutoConfigurationPackage</p><ul><li>@Import(AutoConfigurationPackages.Registrar.class) 给容器中导入一个组件，利用Registrar给容器导入一系列组件，将指定的一个包下的所有组件导入进来，即Application所在的包下</li></ul></li><li><p>@Import(AutoConfigurationImportSelector.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件<br><span class="hljs-number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类<br><span class="hljs-number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">loadSpringFactories</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span>；得到所有的组件<br><span class="hljs-number">4</span>、从META-INF/spring.factories位置来加载一个文件。<br>默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件<br>    spring-boot-autoconfigure-<span class="hljs-number">2.3</span><span class="hljs-number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories<br>    <br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs xml">文件里面写死了spring-boot一启动就要给容器中加载的所有配置类<br>spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories<br># Auto Configure<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\<br>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\<br>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\<br>org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\<br>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\<br>org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\<br>org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\<br>org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\<br>org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\<br>org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\<br>org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\<br>org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\<br>org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\<br>org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\<br>org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\<br>org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\<br>org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\<br>org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\<br>org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\<br>org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\<br>org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\<br>org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\<br>org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\<br>org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\<br>org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\<br>org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\<br>org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\<br>org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\<br>org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\<br>org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\<br>org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\<br>org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\<br>org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\<br>org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\<br>org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\<br>org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\<br>org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\<br>org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\<br>org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\<br>org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\<br>org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\<br>org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\<br>org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\<br>org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\<br>org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\<br>org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\<br>org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\<br>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\<br>org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\<br>org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\<br>org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\<br>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\<br>org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\<br>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\<br>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\<br>org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\<br>org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration<br></code></pre></td></tr></table></figure><h4 id="按需开启自动配置项"><a href="#按需开启自动配置项" class="headerlink" title="按需开启自动配置项"></a>按需开启自动配置项</h4><blockquote><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration 按照条件装配规则（@Conditional），最终会按需配置。</p></blockquote></li></ul></li></ul><h4 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="hljs-comment">//容器中有这个类型组件</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="hljs-comment">//容器中没有这个名字 multipartResolver 的组件</span><br><span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">(MultipartResolver resolver)</span> &#123;<br>            <span class="hljs-comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span><br>            <span class="hljs-comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span><br><span class="hljs-comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span><br><span class="hljs-keyword">return</span> resolver;<br>&#125;<br>给容器中加入了文件上传解析器；<br></code></pre></td></tr></table></figure><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p><ul><li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p></li><li><ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenFeign学习笔记</title>
    <link href="/2022/05/16/Middleware/SpringCloud/OpenFeign/"/>
    <url>/2022/05/16/Middleware/SpringCloud/OpenFeign/</url>
    
    <content type="html"><![CDATA[<h3 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在启动类开启上添加@EnableFeignClients注解开启OpenFeign</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">xxxApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(xxxApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过@FeignClient注解声明FeignClient并绑定服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = &quot;serverName&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">XxxService</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/helloworld&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloworld</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>服务调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>XxxService xxxService;<br>xxxService.helloworld();<br></code></pre></td></tr></table></figure><h4 id="设置客户端超时时间"><a href="#设置客户端超时时间" class="headerlink" title="设置客户端超时时间"></a>设置客户端超时时间</h4><blockquote><p>OpenFeign整合了Ribbon，客户端的超时时间也由Ribbon控制</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br><span class="hljs-comment">#请求处理的超时时间</span><br><span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span><br><span class="hljs-comment">#ribbon请求连接的超时时间</span><br><span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><h4 id="开启调用日志"><a href="#开启调用日志" class="headerlink" title="开启调用日志"></a>开启调用日志</h4><h5 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h5><ul><li>NONE：默认的，不显示任何日志；</li><li>BASIC：仅记录请求方法、URL、相应状态码及执行时间</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应头信息；</li><li>FULL：除了HEADERS中定义的信息外，还有请求和响应的正文及元数据。</li></ul><h5 id="开启日志"><a href="#开启日志" class="headerlink" title="开启日志"></a>开启日志</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"># 第一步，创建Feign配置类<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignLogConfiguration</span> &#123;<br>  <span class="hljs-meta">@Bean</span><br>  Logger.Level <span class="hljs-title function_">feignLoggerLevel</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 第二步，开启feign日志</span><br><span class="hljs-attr">logging:</span><br><span class="hljs-attr">level:</span><br><span class="hljs-comment"># 日志以什么级别监控哪个接口</span><br><span class="hljs-attr">com.xxx.xxxFeign:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><p>如果你不是在<code>application.yml</code>中配置的日志级别，而是使用<code>logback-spring.xml</code>，同理，在<code>logback-spring.xml</code>中做相应配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"># logback-spring.xml<br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.xxx.xxx&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Middleware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenFeign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="/2022/05/16/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/16/Linux/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux学习笔记"><a href="#Linux学习笔记" class="headerlink" title="Linux学习笔记"></a>Linux学习笔记</h3><h4 id="网络连接模式"><a href="#网络连接模式" class="headerlink" title="网络连接模式"></a>网络连接模式</h4><ul><li><p>桥接模式（Bridged）</p><blockquote><p>虚拟机通过本机的真实网卡和主机进行通讯。不仅可以和你的本机进行通讯，<br>如果局域网内有同网段的计算机，也可以进行通讯。不过需要&#x3D;&#x3D;占用同网段的一个ip地址&#x3D;&#x3D;。<br>因为将来IP需要固定， 如果更换办工地点需要修改IP地址.</p></blockquote></li><li><p>NAT模式</p><blockquote><p>虚拟机通过VMware-8这块虚拟出来的网卡和你的本机进行通讯。<br>安装完虚拟机，默认配置的虚拟网络为NAT模式，此模式&#x3D;&#x3D;虚拟机会共享宿主机ip进行连&#x3D;&#x3D;<br>&#x3D;&#x3D;接外网&#x3D;&#x3D;，只有宿主机可以访问虚拟机！如果想要让局域网其它成员也访问这台虚拟机，<br>NAT模式就不行了。需要改成“桥接模式”。</p></blockquote></li><li><p>主机模式（Host-Only）</p><blockquote><p>虚拟机通过VMware-1这块虚拟出来的网卡和你的本机进行通讯。<br>NAT和host-only 不会占用一个ip地址，只能和你的本机进行通讯。<br>NAT和host-only还有一个区别就是，&#x3D;&#x3D;host-only只能和你的本机进行通讯，不可以访问&#x3D;&#x3D;<br>&#x3D;&#x3D;互联网&#x3D;&#x3D;。NAT除了只可以和你的本机进行通讯之外，如果你的本机可以访问互联网，你<br>的虚拟机同样可以访问互联网。</p></blockquote></li></ul><h4 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h4><blockquote><p>Linux世界，一切皆为文件！</p></blockquote><p><img src="E:\我的\学习文档\md-pic\d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p><ul><li><p>&#x3D;&#x3D;&#x2F;bin、&#x2F;usr&#x2F;bin  、&#x2F;usr&#x2F;sbin、&#x2F;usr&#x2F;local&#x2F;bin、&#x2F;usr&#x2F;local&#x2F;sbin&#x3D;&#x3D; </p><blockquote><p>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p><p>sbin存放超级用户的命令</p></blockquote></li><li><p>&#x3D;&#x3D;&#x2F;boot&#x3D;&#x3D;</p><blockquote><p>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></blockquote></li><li><p>&#x2F;dev</p><blockquote><p>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，如CPU、disk</p></blockquote></li><li><p>&#x3D;&#x3D;&#x2F;etc&#x3D;&#x3D;</p><blockquote><p>一般存放配置文件，如mysql的配置文件my.conf</p></blockquote></li><li><p>&#x3D;&#x3D;&#x2F;home&#x3D;&#x3D;</p><blockquote><p>用户的主目录，在 Linux 中，每个用户都有一个自己的目录</p></blockquote></li><li><p>&#x2F;lib</p><blockquote><p>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></blockquote></li><li><p>&#x2F;lost+found</p><blockquote><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></blockquote></li><li><p>&#x2F;media</p><blockquote><p>&#x3D;&#x3D;外部设备&#x3D;&#x3D;的挂载会放在这个目录，如U盘</p></blockquote></li><li><p>&#x2F;mnt</p><blockquote><p>系统提供该目录是为了让用户临时挂载别的&#x3D;&#x3D;文件系统&#x3D;&#x3D;的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></blockquote></li><li><p>&#x2F;opt</p><blockquote><p>opt 是 optional(可选) 的缩写，这是给主机额外&#x3D;&#x3D;安装软件(即软件安装包)&#x3D;&#x3D;所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></blockquote></li><li><p>&#x2F;proc</p><blockquote><p>&#x3D;&#x3D;勿动&#x3D;&#x3D;proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p></blockquote></li><li><p>&#x3D;&#x3D;&#x2F;root&#x3D;&#x3D;</p><blockquote><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p></blockquote></li><li><p>&#x2F;selinux</p><blockquote><p>这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></blockquote></li><li><p>&#x2F;srv</p><blockquote><p> &#x3D;&#x3D;勿动&#x3D;&#x3D;该目录存放一些服务启动之后需要提取的数据。</p></blockquote></li><li><p>&#x2F;sys</p><blockquote><p>&#x3D;&#x3D;勿动&#x3D;&#x3D;这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></blockquote></li><li><p>&#x2F;tmp</p><blockquote><p>临时文件</p></blockquote></li><li><p>&#x3D;&#x3D;&#x2F;usr&#x3D;&#x3D;</p><blockquote><p>类似windows下的program files目录，存放安装的程序</p></blockquote></li><li><p>&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x3D;&#x3D;</p><blockquote><p>安装目录，类似&#x2F;usr，一般是通过编译源码方式安装的程序</p></blockquote></li><li><p>&#x2F;usr&#x2F;src</p><blockquote><p>内核源代码默认的放置目录。</p></blockquote></li><li><p>&#x2F;var</p><blockquote><p>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种&#x3D;&#x3D;日志文件&#x3D;&#x3D;。</p></blockquote></li><li><p>&#x2F;run</p><blockquote><p>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2022/05/16/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/05/16/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">文件查找相关的</span><br>whereis # 指令只能用于查找二进制文件、源代码文件和man手册页，一般文件的定位需使用locate命令。 <br>which # which指令会在环境变量$PATH设置的目录里查找符合条件的文件。<br>locate # 用于查找符合条件的文档, locate your_file_name（文件名也可以是个路径）-i参数是忽略大小写<br>find # 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容查找相关的</span><br><br></code></pre></td></tr></table></figure><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入插入模式</span><br><span class="hljs-string">&#x27;i&#x27;</span><br><span class="hljs-string">&#x27;o&#x27;</span> 新建一行插入<br><span class="hljs-comment"># 跳到文本最后一行</span><br><span class="hljs-string">&#x27;G&#x27;</span> <br><span class="hljs-comment"># 跳到文本第一行</span><br><span class="hljs-string">&#x27;H&#x27;</span> <br><span class="hljs-comment"># 查找</span><br><span class="hljs-string">&#x27;/&#x27;</span>+要查找的字符<br><span class="hljs-comment"># 替换</span><br><span class="hljs-string">&#x27;:s/old/new&#x27;</span> <span class="hljs-comment">#替换当前行</span><br><span class="hljs-string">&#x27;:%s/old/new&#x27;</span> <span class="hljs-comment">#替换每一行的第一个符合条件的字符</span><br><span class="hljs-string">&#x27;:%s/old/new/g&#x27;</span> <span class="hljs-comment">#全局替换</span><br><span class="hljs-string">&#x27;:3,5s/old/new&#x27;</span> <span class="hljs-comment">#指定行替换</span><br><span class="hljs-comment"># 执行命令</span><br><span class="hljs-string">&#x27;:!&#x27;</span>+命令 <span class="hljs-comment">#例如 :!ifconfig</span><br><span class="hljs-comment"># 设置</span><br><span class="hljs-comment"># 显示行号 </span><br>:<span class="hljs-built_in">set</span> nu<br><span class="hljs-comment"># 不显示行号</span><br>:<span class="hljs-built_in">set</span> nonu<br><span class="hljs-comment"># 全局配置需要修改vimrc</span><br><span class="hljs-comment"># mac根路径下没有这个文件 copy到根路径</span><br><span class="hljs-built_in">cp</span>  /usr/share/vim/vimrc  ~/.vimrc<br></code></pre></td></tr></table></figure><h4 id="Grep"><a href="#Grep" class="headerlink" title="Grep"></a>Grep</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 匹配行数据包含a或b或c的数据</span><br>grep -E <span class="hljs-string">&#x27;a|b|c&#x27;</span> filename<br>grep <span class="hljs-string">&#x27;a\|b\|c&#x27;</span> filename<br><span class="hljs-comment"># 匹配行数据包含a和b和c的数据</span><br>grep <span class="hljs-string">&#x27;a&#x27;</span> filename | grep <span class="hljs-string">&#x27;b&#x27;</span> | grep <span class="hljs-string">&#x27;c&#x27;</span> <br><br><span class="hljs-comment"># 忽略大小写</span><br>grep -i<br><span class="hljs-comment"># 正则表达式</span><br>grep -E<br></code></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在指定文件夹下查找指定文件</span><br>find path -name filename <br><span class="hljs-comment"># 例如：在根目录查找文件名为broker.conf的路径</span><br>find / -name broker.conf<br><br><span class="hljs-comment"># 在指定文件夹下查找指定文件夹，如果不加-type会把文件和文件夹都输出</span><br>find path -name filename -<span class="hljs-built_in">type</span> d<br><span class="hljs-comment"># 例如：在根目录查找文件夹名为store的路径</span><br>find / -name store -<span class="hljs-built_in">type</span> d<br><br><br></code></pre></td></tr></table></figure><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查找端口占用</span><br>netstat -npl | grep 8080<br></code></pre></td></tr></table></figure><h4 id="进程监控"><a href="#进程监控" class="headerlink" title="进程监控"></a>进程监控</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">top命令<br>top 查看当前系统进程信息<br><span class="hljs-string">&#x27;P&#x27;</span>:按CPU排序<br><span class="hljs-string">&#x27;b&#x27;</span>:高亮显示排序列<br><span class="hljs-string">&#x27;Shift+&gt;或&lt;&#x27;</span>:切换排序列<br><br><span class="hljs-comment"># 查看进程信息</span><br>ps -ef | grep <span class="hljs-string">&#x27;java&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="Vim常见配置"><a href="#Vim常见配置" class="headerlink" title="Vim常见配置"></a>Vim常见配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;显示行号</span><br><span class="hljs-string">set nu</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>启动时隐去援助提示<br><span class="hljs-built_in">set</span> shortmess=atI<br><br><span class="hljs-string">&quot;语法高亮</span><br><span class="hljs-string">syntax on</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>不需要备份<br><span class="hljs-built_in">set</span> nobackup<br><br><span class="hljs-built_in">set</span> nocompatible<br><br><span class="hljs-string">&quot;没有保存或文件只读时弹出确认</span><br><span class="hljs-string">set confirm</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>鼠标可用<br><span class="hljs-built_in">set</span> mouse=a<br><br><span class="hljs-string">&quot;tab缩进</span><br><span class="hljs-string">set tabstop=4</span><br><span class="hljs-string">set shiftwidth=4</span><br><span class="hljs-string">set expandtab</span><br><span class="hljs-string">set smarttab</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>文件自动检测外部更改<br><span class="hljs-built_in">set</span> autoread<br><br><span class="hljs-string">&quot;c文件自动缩进</span><br><span class="hljs-string">set cindent</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>自动对齐<br><span class="hljs-built_in">set</span> autoindent<br><br><span class="hljs-string">&quot;智能缩进</span><br><span class="hljs-string">set smartindent</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>高亮查找匹配<br><span class="hljs-built_in">set</span> hlsearch<br><br><span class="hljs-string">&quot;显示匹配</span><br><span class="hljs-string">set showmatch</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>显示标尺，就是在右下角显示光标位置<br><span class="hljs-built_in">set</span> ruler<br><br><span class="hljs-string">&quot;去除vi的一致性</span><br><span class="hljs-string">set nocompatible</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>设置键盘映射，通过空格设置折叠<br>nnoremap &lt;space&gt; @=((foldclosed(line(<span class="hljs-string">&#x27;.&#x27;</span>)&lt;0)?<span class="hljs-string">&#x27;zc&#x27;</span>:<span class="hljs-string">&#x27;zo&#x27;</span>))&lt;CR&gt;<br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><br><span class="hljs-string">&quot;不要闪烁</span><br><span class="hljs-string">set novisualbell</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>启动显示状态行<br><span class="hljs-built_in">set</span> laststatus=2<br><br><span class="hljs-string">&quot;浅色显示当前行</span><br><span class="hljs-string">autocmd InsertLeave * se nocul</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>用浅色高亮当前行<br>autocmd InsertEnter * se cul<br><br><span class="hljs-string">&quot;显示输入的命令</span><br><span class="hljs-string">set showcmd</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>被分割窗口之间显示空白<br><span class="hljs-built_in">set</span> fillchars=vert:/<br><span class="hljs-built_in">set</span> fillchars=stl:/<br><span class="hljs-built_in">set</span> fillchars=stlnc:/<br><br><span class="hljs-string">&quot; vundle 环境设置</span><br><span class="hljs-string">filetype off</span><br><span class="hljs-string">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="hljs-string">&quot;</span>vundle管理的插件列表必须位于 vundle<span class="hljs-comment">#begin() 和 vundle#end() 之间</span><br>call vundle<span class="hljs-comment">#begin()</span><br>Plugin <span class="hljs-string">&#x27;VundleVim/Vundle.vim&#x27;</span><br>Plugin <span class="hljs-string">&#x27;altercation/vim-colors-solarized&#x27;</span><br>Plugin <span class="hljs-string">&#x27;tomasr/molokai&#x27;</span><br>Plugin <span class="hljs-string">&#x27;vim-scripts/phd&#x27;</span><br>Plugin <span class="hljs-string">&#x27;Lokaltog/vim-powerline&#x27;</span><br>Plugin <span class="hljs-string">&#x27;octol/vim-cpp-enhanced-highlight&#x27;</span><br>Plugin <span class="hljs-string">&#x27;Raimondi/delimitMate&#x27;</span><br><span class="hljs-string">&quot; 插件列表结束</span><br><span class="hljs-string">call vundle#end()</span><br><span class="hljs-string">filetype plugin indent on</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 配色方案<br><span class="hljs-built_in">set</span> background=dark<br>colorscheme torte<br><span class="hljs-string">&quot;colorscheme molokai</span><br><span class="hljs-string">&quot;</span>colorscheme phd<br><br><span class="hljs-string">&quot; 禁止显示菜单和工具条</span><br><span class="hljs-string">set guioptions-=m</span><br><span class="hljs-string">set guioptions-=T</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 总是显示状态栏<br><span class="hljs-built_in">set</span> laststatus=2<br><br><span class="hljs-string">&quot; 禁止折行</span><br><span class="hljs-string">set nowrap</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> 设置状态栏主题风格<br><span class="hljs-built_in">let</span> g:Powerline_colorscheme=<span class="hljs-string">&#x27;solarized256&#x27;</span><br><br>syntax keyword cppSTLtype initializer_list<br><br><span class="hljs-string">&quot; 基于缩进或语法进行代码折叠</span><br><span class="hljs-string">&quot;</span><span class="hljs-built_in">set</span> foldmethod=indent<br><span class="hljs-built_in">set</span> foldmethod=syntax<br><span class="hljs-string">&quot; 启动 vim 时关闭折叠代码</span><br><span class="hljs-string">set nofoldenable</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>允许用退格键删除字符<br><span class="hljs-built_in">set</span> backspace=indent,eol,start<br><br><span class="hljs-string">&quot;编码设置</span><br><span class="hljs-string">set encoding=utf-8</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span>共享剪切板<br><span class="hljs-built_in">set</span> clipboard=unnamed<br><br><span class="hljs-string">&quot; Don&#x27;t write backup file if vim is being called by &quot;</span>crontab -e<span class="hljs-string">&quot;</span><br><span class="hljs-string">au BufWrite /private/tmp/crontab.* set nowritebackup nobackup</span><br><span class="hljs-string">&quot;</span> Don<span class="hljs-string">&#x27;t write backup file if vim is being called by &quot;chpass&quot;</span><br><span class="hljs-string">au BufWrite /private/etc/pw.* set nowritebackup nobackup</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Command</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit4学习笔记</title>
    <link href="/2022/05/16/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/Junit/JUnit4/"/>
    <url>/2022/05/16/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/Junit/JUnit4/</url>
    
    <content type="html"><![CDATA[<h3 id="JUnit4学习笔记"><a href="#JUnit4学习笔记" class="headerlink" title="JUnit4学习笔记"></a>JUnit4学习笔记</h3><h4 id="Junit执行测试的生命周期"><a href="#Junit执行测试的生命周期" class="headerlink" title="Junit执行测试的生命周期"></a>Junit执行测试的生命周期</h4><pre><code class=" mermaid">graph LRBeforeClass --&gt; Before --&gt; TestA &amp; TestB &amp; TestC--&gt; After --&gt; AfterClass</code></pre><blockquote><p>@Before用于初始化测试对象，测试对象以实例变量存放</p><p>@After用于清理@Before创建的对象</p><p>@BeforeClass用于初始化耗时资源，以静态变量存放</p><p>@AfterClass用于清理@BeforeClass创建的资源</p></blockquote><h4 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h4><blockquote><p>测试异常可以使用@Test(expected &#x3D; Exception.class)</p><p>对可能发生的每种类型的异常进行测试</p></blockquote><h4 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h4><blockquote><ol><li>参数必须由静态方法data()返回，返回类型为Collection&lt;Object[]&gt;，静态方法必须标记为@Parameters</li><li>测试类必须标记为@RunWith(Parameterized.class)</li><li>构造方法参数必须和测试参数对应</li></ol></blockquote><h4 id="超时测试"><a href="#超时测试" class="headerlink" title="超时测试"></a>超时测试</h4><blockquote><p>@Test(timeout &#x3D; 500)，单位为毫秒</p><p>&#x3D;&#x3D;超时测试并不能取代性能测试和压力测试&#x3D;&#x3D;</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>UnitTest</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>JUnit4</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPN导致的Dubbo注册ip问题</title>
    <link href="/2022/05/16/Middleware/VPN%E5%AF%BC%E8%87%B4%E7%9A%84Dubbo%E6%B3%A8%E5%86%8Cip%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/16/Middleware/VPN%E5%AF%BC%E8%87%B4%E7%9A%84Dubbo%E6%B3%A8%E5%86%8Cip%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="VPN导致的Dubbo注册ip问题"><a href="#VPN导致的Dubbo注册ip问题" class="headerlink" title="VPN导致的Dubbo注册ip问题"></a>VPN导致的Dubbo注册ip问题</h2><blockquote><p><strong>原因：</strong>通过VPN连接公司内网，会产生一个内网ip，比如10.xx.xx.xx，而本机实际ip有可能是168.xx.xx.xx</p><ol><li>启动服务提供者，注册信息显示服务注册在10.xx.xx.xx</li><li>启动服务消费者，注册信息显示服务注册在168.xx.xx.xx</li></ol><p><strong>现象：</strong>消费者会去10.xx.xx.xx的机器上找对应的服务，导致访问失败</p><p><strong>方案：</strong></p><p><strong>Comsumer设置注册到注册中心的ip——加入环境变量</strong></p><p><a href="https://dubbo.apache.org/zh/docs/v2.7/user/examples/set-host/">https://dubbo.apache.org/zh/docs/v2.7/user/examples/set-host/</a></p><ul><li><p>DUBBO_IP_TO_REGISTRY — 注册到注册中心的ip地址</p></li><li><p>&#x3D;&#x3D;DUBBO_IP_TO_BIND&#x3D;&#x3D; — 监听ip地址<font color=red>起作用的就是这个配置</font></p></li></ul><p>-DDUBBO_IP_TO_BIND&#x3D;10.101.244.99 -DDUBBO_IP_TO_REGISTRY&#x3D;10.101.244.99</p><p><strong>Provider设置注册到注册中心的ip——增加host或者加入环境变量</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;192.168.0.76&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;$&#123;dubbo.protocol.port:20880&#125;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">dispatcher</span>=<span class="hljs-string">&quot;$&#123;dubbo.protocol.dispatcher:all&#125;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">threads</span>=<span class="hljs-string">&quot;$&#123;dubbo.protocol.threads:500&#125;&quot;</span> <span class="hljs-attr">threadpool</span>=<span class="hljs-string">&quot;$&#123;dubbo.protocol.threadPool:limited&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>-DDUBBO_IP_TO_BIND&#x3D;192.168.0.76 -DDUBBO_IP_TO_REGISTRY&#x3D;192.168.0.76</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">QOS在Dubbo2.7.3以前无法禁用<br>https://github.com/apache/dubbo/issues/4377<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Dubbo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
      <tag>Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
